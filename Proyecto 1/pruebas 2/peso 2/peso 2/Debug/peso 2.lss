
peso 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000440  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000be1  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000904  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000644  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052d  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000449  00000000  00000000  000026b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002afa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__ctors_end>
   4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
   c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  60:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_24>
  64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
  68:	d8 00       	.word	0x00d8	; ????
  6a:	fb 00       	.word	0x00fb	; ????
  6c:	fb 00       	.word	0x00fb	; ????
  6e:	fb 00       	.word	0x00fb	; ????
  70:	fb 00       	.word	0x00fb	; ????
  72:	fb 00       	.word	0x00fb	; ????
  74:	fb 00       	.word	0x00fb	; ????
  76:	fb 00       	.word	0x00fb	; ????
  78:	d8 00       	.word	0x00d8	; ????
  7a:	fb 00       	.word	0x00fb	; ????
  7c:	fb 00       	.word	0x00fb	; ????
  7e:	fb 00       	.word	0x00fb	; ????
  80:	fb 00       	.word	0x00fb	; ????
  82:	fb 00       	.word	0x00fb	; ????
  84:	fb 00       	.word	0x00fb	; ????
  86:	fb 00       	.word	0x00fb	; ????
  88:	d8 00       	.word	0x00d8	; ????
  8a:	fb 00       	.word	0x00fb	; ????
  8c:	fb 00       	.word	0x00fb	; ????
  8e:	fb 00       	.word	0x00fb	; ????
  90:	fb 00       	.word	0x00fb	; ????
  92:	fb 00       	.word	0x00fb	; ????
  94:	fb 00       	.word	0x00fb	; ????
  96:	fb 00       	.word	0x00fb	; ????
  98:	d8 00       	.word	0x00d8	; ????
  9a:	fb 00       	.word	0x00fb	; ????
  9c:	fb 00       	.word	0x00fb	; ????
  9e:	fb 00       	.word	0x00fb	; ????
  a0:	fb 00       	.word	0x00fb	; ????
  a2:	fb 00       	.word	0x00fb	; ????
  a4:	fb 00       	.word	0x00fb	; ????
  a6:	fb 00       	.word	0x00fb	; ????
  a8:	dc 00       	.word	0x00dc	; ????
  aa:	fb 00       	.word	0x00fb	; ????
  ac:	fb 00       	.word	0x00fb	; ????
  ae:	fb 00       	.word	0x00fb	; ????
  b0:	fb 00       	.word	0x00fb	; ????
  b2:	fb 00       	.word	0x00fb	; ????
  b4:	fb 00       	.word	0x00fb	; ????
  b6:	fb 00       	.word	0x00fb	; ????
  b8:	fb 00       	.word	0x00fb	; ????
  ba:	fb 00       	.word	0x00fb	; ????
  bc:	fb 00       	.word	0x00fb	; ????
  be:	fb 00       	.word	0x00fb	; ????
  c0:	fb 00       	.word	0x00fb	; ????
  c2:	fb 00       	.word	0x00fb	; ????
  c4:	fb 00       	.word	0x00fb	; ????
  c6:	fb 00       	.word	0x00fb	; ????
  c8:	dc 00       	.word	0x00dc	; ????
  ca:	fb 00       	.word	0x00fb	; ????
  cc:	fb 00       	.word	0x00fb	; ????
  ce:	fb 00       	.word	0x00fb	; ????
  d0:	fb 00       	.word	0x00fb	; ????
  d2:	fb 00       	.word	0x00fb	; ????
  d4:	fb 00       	.word	0x00fb	; ????
  d6:	fb 00       	.word	0x00fb	; ????
  d8:	fb 00       	.word	0x00fb	; ????
  da:	fb 00       	.word	0x00fb	; ????
  dc:	fb 00       	.word	0x00fb	; ????
  de:	fb 00       	.word	0x00fb	; ????
  e0:	fb 00       	.word	0x00fb	; ????
  e2:	fb 00       	.word	0x00fb	; ????
  e4:	fb 00       	.word	0x00fb	; ????
  e6:	fb 00       	.word	0x00fb	; ????
  e8:	f8 00       	.word	0x00f8	; ????
  ea:	fb 00       	.word	0x00fb	; ????
  ec:	fb 00       	.word	0x00fb	; ????
  ee:	fb 00       	.word	0x00fb	; ????
  f0:	fb 00       	.word	0x00fb	; ????
  f2:	fb 00       	.word	0x00fb	; ????
  f4:	fb 00       	.word	0x00fb	; ????
  f6:	fb 00       	.word	0x00fb	; ????
  f8:	e4 00       	.word	0x00e4	; ????
  fa:	fb 00       	.word	0x00fb	; ????
  fc:	fb 00       	.word	0x00fb	; ????
  fe:	fb 00       	.word	0x00fb	; ????
 100:	fb 00       	.word	0x00fb	; ????
 102:	fb 00       	.word	0x00fb	; ????
 104:	fb 00       	.word	0x00fb	; ????
 106:	fb 00       	.word	0x00fb	; ????
 108:	e4 00       	.word	0x00e4	; ????
 10a:	fb 00       	.word	0x00fb	; ????
 10c:	fb 00       	.word	0x00fb	; ????
 10e:	fb 00       	.word	0x00fb	; ????
 110:	fb 00       	.word	0x00fb	; ????
 112:	fb 00       	.word	0x00fb	; ????
 114:	fb 00       	.word	0x00fb	; ????
 116:	fb 00       	.word	0x00fb	; ????
 118:	ec 00       	.word	0x00ec	; ????
 11a:	fb 00       	.word	0x00fb	; ????
 11c:	fb 00       	.word	0x00fb	; ????
 11e:	fb 00       	.word	0x00fb	; ????
 120:	fb 00       	.word	0x00fb	; ????
 122:	fb 00       	.word	0x00fb	; ????
 124:	fb 00       	.word	0x00fb	; ????
 126:	fb 00       	.word	0x00fb	; ????
 128:	f4 00       	.word	0x00f4	; ????
 12a:	fb 00       	.word	0x00fb	; ????
 12c:	fb 00       	.word	0x00fb	; ????
 12e:	fb 00       	.word	0x00fb	; ????
 130:	fb 00       	.word	0x00fb	; ????
 132:	fb 00       	.word	0x00fb	; ????
 134:	fb 00       	.word	0x00fb	; ????
 136:	fb 00       	.word	0x00fb	; ????
 138:	f4 00       	.word	0x00f4	; ????

0000013a <__ctors_end>:
 13a:	11 24       	eor	r1, r1
 13c:	1f be       	out	0x3f, r1	; 63
 13e:	cf ef       	ldi	r28, 0xFF	; 255
 140:	d8 e0       	ldi	r29, 0x08	; 8
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_clear_bss>:
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
 14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
 150:	a2 30       	cpi	r26, 0x02	; 2
 152:	b2 07       	cpc	r27, r18
 154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
 156:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
 15a:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <_exit>

0000015e <__bad_interrupt>:
 15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <I2C_Slave_Init>:
// Implementación MODO ESCLAVO
// ============================================
void I2C_Slave_Init(uint8_t address)
{
	// Dirección de esclavo (7 bits) en TWAR
	TWAR = (address << 1);
 162:	88 0f       	add	r24, r24
 164:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

	// Habilitar TWI con ACK y su interrupción
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 168:	85 e4       	ldi	r24, 0x45	; 69
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// Valor por defecto del dato a enviar
	I2C_SlaveData    = 0;
 16e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <I2C_SlaveData>
	I2C_LastReceived = 0;
 172:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Habilitar interrupciones globales
	sei();
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <__vector_24>:
}

// ISR de TWI para manejar eventos como esclavo
ISR(TWI_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	}
}

static inline uint8_t i2c_status(void)
{
	return (TWSR & 0xF8);
 190:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 194:	e8 2f       	mov	r30, r24
 196:	e8 7f       	andi	r30, 0xF8	; 248
}

// ISR de TWI para manejar eventos como esclavo
ISR(TWI_vect)
{
	switch (i2c_status())
 198:	8e 2f       	mov	r24, r30
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	e0 56       	subi	r30, 0x60	; 96
 1a0:	f1 09       	sbc	r31, r1
 1a2:	e9 36       	cpi	r30, 0x69	; 105
 1a4:	f1 05       	cpc	r31, r1
 1a6:	38 f5       	brcc	.+78     	; 0x1f6 <__vector_24+0x7c>
 1a8:	ec 5c       	subi	r30, 0xCC	; 204
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__tablejump2__>
		case 0x60:  // Own SLA+W received; ACK returned
		case 0x68:  // Arbitration lost; own SLA+W received; ACK returned
		case 0x70:  // General call received; ACK returned
		case 0x78:  // Arbitration lost; general call received; ACK returned
		// Preparar a recibir datos del maestro
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1b0:	85 ec       	ldi	r24, 0xC5	; 197
 1b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1b6:	1f c0       	rjmp	.+62     	; 0x1f6 <__vector_24+0x7c>

		// ---------- Dato recibido (SLA+W), ACK ----------
		case 0x80:  // Data received; ACK returned (addressed)
		case 0x90:  // Data received; ACK returned (general call)
		I2C_LastReceived = TWDR; // Guardar lo que el maestro envió
 1b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		// Seguir aceptando más datos
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1c0:	85 ec       	ldi	r24, 0xC5	; 197
 1c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <__vector_24+0x7c>

		// ---------- SLA+R recibido, ACK ----------
		case 0xA8:  // Own SLA+R received; ACK returned
		case 0xB0:  // Arbitration lost; own SLA+R received; ACK returned
		TWDR = I2C_SlaveData;  // Cargar el dato a enviar
 1c8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <I2C_SlaveData>
 1cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		// Enviar dato y seguir preparado
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1d0:	85 ec       	ldi	r24, 0xC5	; 197
 1d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <__vector_24+0x7c>

		// ---------- Dato transmitido, maestro ACK ----------
		case 0xB8:  // Data transmitted; ACK received
		// Puedes mantener el mismo dato, o actualizarlo aquí si quieres streaming
		TWDR = I2C_SlaveData;
 1d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <I2C_SlaveData>
 1dc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1e0:	85 ec       	ldi	r24, 0xC5	; 197
 1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <__vector_24+0x7c>

		// ---------- Dato transmitido, maestro NACK ----------
		case 0xC0:  // Data transmitted; NACK received
		case 0xC8:  // Last data transmitted; ACK received (shouldn't happen often)
		// Listo para próximo ciclo
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1e8:	85 ec       	ldi	r24, 0xC5	; 197
 1ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_24+0x7c>

		// ---------- STOP/repeated START recibido ----------
		case 0xA0:  // STOP or repeated START condition received
		// Continuar a la espera de nueva dirección
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1f0:	85 ec       	ldi	r24, 0xC5	; 197
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;

		// ---------- Default: reset flags -}
	}
 1f6:	ff 91       	pop	r31
 1f8:	ef 91       	pop	r30
 1fa:	bf 91       	pop	r27
 1fc:	af 91       	pop	r26
 1fe:	9f 91       	pop	r25
 200:	8f 91       	pop	r24
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <HX711_init>:
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_toggle(void) { PORTC ^= (1 << PORTC0); }

/* ==== Funciones HX711 ==== */
void HX711_init(void) {
	DDRD &= ~(1 << HX711_DT);   // DT como entrada
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	87 7f       	andi	r24, 0xF7	; 247
 210:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << HX711_SCK);   // SCK como salida
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	84 60       	ori	r24, 0x04	; 4
 216:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << HX711_SCK);
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	8b 7f       	andi	r24, 0xFB	; 251
 21c:	8b b9       	out	0x0b, r24	; 11
 21e:	08 95       	ret

00000220 <HX711_is_ready>:
}

uint8_t HX711_is_ready(void) {
	return (PIND & (1 << HX711_DT)) == 0;
 220:	89 b1       	in	r24, 0x09	; 9
 222:	86 95       	lsr	r24
 224:	86 95       	lsr	r24
 226:	86 95       	lsr	r24
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	89 27       	eor	r24, r25
}
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	08 95       	ret

00000230 <HX711_read>:

long HX711_read(void) {
	long value = 0;

	// Esperar a que esté listo (sin timeout, se maneja en main)
	while (!HX711_is_ready());
 230:	0e 94 10 01 	call	0x220	; 0x220 <HX711_is_ready>
 234:	88 23       	and	r24, r24
 236:	e1 f3       	breq	.-8      	; 0x230 <HX711_read>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	ba 01       	movw	r22, r20
 240:	19 c0       	rjmp	.+50     	; 0x274 <HX711_read+0x44>

	for (uint8_t i = 0; i < 24; i++) {
		PORTD |= (1 << HX711_SCK);
 242:	8b b1       	in	r24, 0x0b	; 11
 244:	84 60       	ori	r24, 0x04	; 4
 246:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	8a 95       	dec	r24
 24c:	f1 f7       	brne	.-4      	; 0x24a <HX711_read+0x1a>
 24e:	00 00       	nop
		_delay_us(1);

		value = value << 1;
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	66 1f       	adc	r22, r22
 256:	77 1f       	adc	r23, r23
		if (PIND & (1 << HX711_DT)) {
 258:	4b 9b       	sbis	0x09, 3	; 9
 25a:	04 c0       	rjmp	.+8      	; 0x264 <HX711_read+0x34>
			value++;
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	6f 4f       	sbci	r22, 0xFF	; 255
 262:	7f 4f       	sbci	r23, 0xFF	; 255
		}

		PORTD &= ~(1 << HX711_SCK);
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	8b 7f       	andi	r24, 0xFB	; 251
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <HX711_read+0x3c>
 270:	00 00       	nop
	long value = 0;

	// Esperar a que esté listo (sin timeout, se maneja en main)
	while (!HX711_is_ready());

	for (uint8_t i = 0; i < 24; i++) {
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	98 31       	cpi	r25, 0x18	; 24
 276:	28 f3       	brcs	.-54     	; 0x242 <HX711_read+0x12>
		PORTD &= ~(1 << HX711_SCK);
		_delay_us(1);
	}

	// pulso extra para ganancia = 128
	PORTD |= (1 << HX711_SCK);
 278:	8b b1       	in	r24, 0x0b	; 11
 27a:	84 60       	ori	r24, 0x04	; 4
 27c:	8b b9       	out	0x0b, r24	; 11
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <HX711_read+0x50>
 284:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << HX711_SCK);
 286:	8b b1       	in	r24, 0x0b	; 11
 288:	8b 7f       	andi	r24, 0xFB	; 251
 28a:	8b b9       	out	0x0b, r24	; 11
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <HX711_read+0x5e>
 292:	00 00       	nop
	_delay_us(1);

	// convertir a 32 bits con signo
	if (value & 0x800000) {
 294:	67 fd       	sbrc	r22, 7
		value |= 0xFF000000;
 296:	7f 6f       	ori	r23, 0xFF	; 255
	}

	return value;
}
 298:	cb 01       	movw	r24, r22
 29a:	ba 01       	movw	r22, r20
 29c:	08 95       	ret

0000029e <main>:

/* ==== Programa principal ==== */
int main(void) {
	HX711_init();
 29e:	0e 94 06 01 	call	0x20c	; 0x20c <HX711_init>
#define OFFSET   1887439   // valor de tara guardado
#define SCALE    3852      // factor de calibración
#define TIMEOUT  50000     // ciclos de espera máx (~50 ms)

/* ==== LED en PC0 ==== */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
 2a2:	87 b1       	in	r24, 0x07	; 7
 2a4:	81 60       	ori	r24, 0x01	; 1
 2a6:	87 b9       	out	0x07, r24	; 7
 2a8:	88 b1       	in	r24, 0x08	; 8
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	88 b9       	out	0x08, r24	; 8

/* ==== Programa principal ==== */
int main(void) {
	HX711_init();
	led_init();
	I2C_Slave_Init(0x08);   // Dirección I2C esclavo
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	0e 94 b1 00 	call	0x162	; 0x162 <I2C_Slave_Init>

	uint8_t peso_final = 0;
 2b4:	c0 e0       	ldi	r28, 0x00	; 0
	long lectura = 0;

	while (1) {
		// Espera con timeout
		uint32_t counter = 0;
 2b6:	c1 2c       	mov	r12, r1
 2b8:	d1 2c       	mov	r13, r1
 2ba:	76 01       	movw	r14, r12
		while (!HX711_is_ready() && counter < TIMEOUT) {
 2bc:	05 c0       	rjmp	.+10     	; 0x2c8 <main+0x2a>
			counter++;
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	c2 1a       	sub	r12, r18
 2c2:	d2 0a       	sbc	r13, r18
 2c4:	e2 0a       	sbc	r14, r18
 2c6:	f2 0a       	sbc	r15, r18
	long lectura = 0;

	while (1) {
		// Espera con timeout
		uint32_t counter = 0;
		while (!HX711_is_ready() && counter < TIMEOUT) {
 2c8:	0e 94 10 01 	call	0x220	; 0x220 <HX711_is_ready>
 2cc:	81 11       	cpse	r24, r1
 2ce:	07 c0       	rjmp	.+14     	; 0x2de <main+0x40>
 2d0:	80 e5       	ldi	r24, 0x50	; 80
 2d2:	c8 16       	cp	r12, r24
 2d4:	83 ec       	ldi	r24, 0xC3	; 195
 2d6:	d8 06       	cpc	r13, r24
 2d8:	e1 04       	cpc	r14, r1
 2da:	f1 04       	cpc	r15, r1
 2dc:	80 f3       	brcs	.-32     	; 0x2be <main+0x20>
			counter++;
		}

		if (counter < TIMEOUT) {
 2de:	90 e5       	ldi	r25, 0x50	; 80
 2e0:	c9 16       	cp	r12, r25
 2e2:	93 ec       	ldi	r25, 0xC3	; 195
 2e4:	d9 06       	cpc	r13, r25
 2e6:	e1 04       	cpc	r14, r1
 2e8:	f1 04       	cpc	r15, r1
 2ea:	b8 f4       	brcc	.+46     	; 0x31a <main+0x7c>
			// Sensor respondió
			lectura = HX711_read();
 2ec:	0e 94 18 01 	call	0x230	; 0x230 <HX711_read>
			int peso = (int)((lectura - OFFSET) / SCALE);
 2f0:	6f 5c       	subi	r22, 0xCF	; 207
 2f2:	7c 4c       	sbci	r23, 0xCC	; 204
 2f4:	8c 41       	sbci	r24, 0x1C	; 28
 2f6:	91 09       	sbc	r25, r1
 2f8:	2c e0       	ldi	r18, 0x0C	; 12
 2fa:	3f e0       	ldi	r19, 0x0F	; 15
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	0e 94 bf 01 	call	0x37e	; 0x37e <__divmodsi4>
			if (peso < 0) peso = 0;
 304:	33 23       	and	r19, r19
 306:	14 f4       	brge	.+4      	; 0x30c <main+0x6e>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
			if (peso > 255) peso = 255;
 30c:	2f 3f       	cpi	r18, 0xFF	; 255
 30e:	31 05       	cpc	r19, r1
 310:	19 f0       	breq	.+6      	; 0x318 <main+0x7a>
 312:	14 f0       	brlt	.+4      	; 0x318 <main+0x7a>
 314:	2f ef       	ldi	r18, 0xFF	; 255
 316:	30 e0       	ldi	r19, 0x00	; 0
			peso_final = (uint8_t)peso;
 318:	c2 2f       	mov	r28, r18
		}
		// si hubo timeout ? se conserva peso_final anterior

		// Publicar en I2C
		I2C_SlaveData = peso_final;
 31a:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <I2C_SlaveData>
#define SCALE    3852      // factor de calibración
#define TIMEOUT  50000     // ciclos de espera máx (~50 ms)

/* ==== LED en PC0 ==== */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_toggle(void) { PORTC ^= (1 << PORTC0); }
 31e:	98 b1       	in	r25, 0x08	; 8
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	89 27       	eor	r24, r25
 324:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	81 ee       	ldi	r24, 0xE1	; 225
 32a:	94 e0       	ldi	r25, 0x04	; 4
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x8e>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x98>
 336:	00 00       	nop
 338:	be cf       	rjmp	.-132    	; 0x2b6 <main+0x18>

0000033a <__udivmodsi4>:
 33a:	a1 e2       	ldi	r26, 0x21	; 33
 33c:	1a 2e       	mov	r1, r26
 33e:	aa 1b       	sub	r26, r26
 340:	bb 1b       	sub	r27, r27
 342:	fd 01       	movw	r30, r26
 344:	0d c0       	rjmp	.+26     	; 0x360 <__udivmodsi4_ep>

00000346 <__udivmodsi4_loop>:
 346:	aa 1f       	adc	r26, r26
 348:	bb 1f       	adc	r27, r27
 34a:	ee 1f       	adc	r30, r30
 34c:	ff 1f       	adc	r31, r31
 34e:	a2 17       	cp	r26, r18
 350:	b3 07       	cpc	r27, r19
 352:	e4 07       	cpc	r30, r20
 354:	f5 07       	cpc	r31, r21
 356:	20 f0       	brcs	.+8      	; 0x360 <__udivmodsi4_ep>
 358:	a2 1b       	sub	r26, r18
 35a:	b3 0b       	sbc	r27, r19
 35c:	e4 0b       	sbc	r30, r20
 35e:	f5 0b       	sbc	r31, r21

00000360 <__udivmodsi4_ep>:
 360:	66 1f       	adc	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	1a 94       	dec	r1
 36a:	69 f7       	brne	.-38     	; 0x346 <__udivmodsi4_loop>
 36c:	60 95       	com	r22
 36e:	70 95       	com	r23
 370:	80 95       	com	r24
 372:	90 95       	com	r25
 374:	9b 01       	movw	r18, r22
 376:	ac 01       	movw	r20, r24
 378:	bd 01       	movw	r22, r26
 37a:	cf 01       	movw	r24, r30
 37c:	08 95       	ret

0000037e <__divmodsi4>:
 37e:	05 2e       	mov	r0, r21
 380:	97 fb       	bst	r25, 7
 382:	1e f4       	brtc	.+6      	; 0x38a <__divmodsi4+0xc>
 384:	00 94       	com	r0
 386:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__negsi2>
 38a:	57 fd       	sbrc	r21, 7
 38c:	07 d0       	rcall	.+14     	; 0x39c <__divmodsi4_neg2>
 38e:	0e 94 9d 01 	call	0x33a	; 0x33a <__udivmodsi4>
 392:	07 fc       	sbrc	r0, 7
 394:	03 d0       	rcall	.+6      	; 0x39c <__divmodsi4_neg2>
 396:	4e f4       	brtc	.+18     	; 0x3aa <__divmodsi4_exit>
 398:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__negsi2>

0000039c <__divmodsi4_neg2>:
 39c:	50 95       	com	r21
 39e:	40 95       	com	r20
 3a0:	30 95       	com	r19
 3a2:	21 95       	neg	r18
 3a4:	3f 4f       	sbci	r19, 0xFF	; 255
 3a6:	4f 4f       	sbci	r20, 0xFF	; 255
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255

000003aa <__divmodsi4_exit>:
 3aa:	08 95       	ret

000003ac <__negsi2>:
 3ac:	90 95       	com	r25
 3ae:	80 95       	com	r24
 3b0:	70 95       	com	r23
 3b2:	61 95       	neg	r22
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	08 95       	ret

000003bc <__tablejump2__>:
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	05 90       	lpm	r0, Z+
 3c2:	f4 91       	lpm	r31, Z
 3c4:	e0 2d       	mov	r30, r0
 3c6:	09 94       	ijmp

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
