
Esclavo Ultrasonico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000720  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000750  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc0  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096e  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000880  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000502  00000000  00000000  00002e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000333c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  88:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <I2C_Slave_Init>:
//******************************************************************************************************************
//FUNCION PARA INICIALIAR EL ESCLAVO
//******************************************************************************************************************

void I2C_Slave_Init(uint8_t address){
	DDRC &= ~((1 << DDC4)|(1 << DDC5));		// Pines de i2c como entradas --> Se debe implementar un Pull-Up con el nodo de 5V
  90:	97 b1       	in	r25, 0x07	; 7
  92:	9f 7c       	andi	r25, 0xCF	; 207
  94:	97 b9       	out	0x07, r25	; 7
											//Generlamente se emplea una resistencia de 4.7Kohms
									
	TWAR = address << 1; // Se asigna la direccion que tendra
  96:	88 0f       	add	r24, r24
  98:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
	//TWAR = (address << 1| 0x01); // Se asigna la direccion que tendra y habilita llamada general

	// Se habilita la interfaz, ACK automatico, se habilita la ISR
	TWCR=(1 << TWEA)|(1 << TWEN)|(1 << TWIE);
  9c:	85 e4       	ldi	r24, 0x45	; 69
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a2:	08 95       	ret

000000a4 <setup>:

//******************************************************************************************************************
// FUNCIONES
//******************************************************************************************************************
void setup(void){
    DDRC |= (1 << LED_PIN);     // LED como salida
  a4:	87 b1       	in	r24, 0x07	; 7
  a6:	81 60       	ori	r24, 0x01	; 1
  a8:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~(1 << LED_PIN);   // Apagar LED
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	88 b9       	out	0x08, r24	; 8
  b0:	08 95       	ret

000000b2 <setupTimer0>:
}

// Configuración TIMER0 para 100 ms
void setupTimer0(void){
    TCCR0A = (1 << WGM01);              // Modo CTC
  b2:	82 e0       	ldi	r24, 0x02	; 2
  b4:	84 bd       	out	0x24, r24	; 36
    TCCR0B = (1 << CS02) | (1 << CS00); // Prescaler 1024
  b6:	95 e0       	ldi	r25, 0x05	; 5
  b8:	95 bd       	out	0x25, r25	; 37
    OCR0A = 155;                        // Cada 10 ms
  ba:	9b e9       	ldi	r25, 0x9B	; 155
  bc:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1 << OCIE0A);             // Habilitar interrupción
  be:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  c2:	08 95       	ret

000000c4 <main>:

//******************************************************************************************************************
// MAIN LOOP
//******************************************************************************************************************
int main(void) {
    setup();
  c4:	0e 94 52 00 	call	0xa4	; 0xa4 <setup>
    servo_init();       // Inicializar servo (Timer1 dedicado)
  c8:	0e 94 05 01 	call	0x20a	; 0x20a <servo_init>
    ultrasonic_init();  // Inicializar pines del sensor
  cc:	0e 94 2c 01 	call	0x258	; 0x258 <ultrasonic_init>
    I2C_Slave_Init(SlaveAddress);
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	0e 94 48 00 	call	0x90	; 0x90 <I2C_Slave_Init>
    setupTimer0();      // Timer0 para activar medición cada 100 ms
  d6:	0e 94 59 00 	call	0xb2	; 0xb2 <setupTimer0>

    sei();   // Habilitar interrupciones globales
  da:	78 94       	sei

    while(1) {

        // ---------- Medición de distancia ----------
        if(flag_measure){
  dc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_measure>
  e0:	88 23       	and	r24, r24
  e2:	19 f1       	breq	.+70     	; 0x12a <main+0x66>
            flag_measure = 0;   // Limpiar flag
  e4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_measure>

            uint16_t dist = measure_distance(); // Medición completa y estable
  e8:	0e 94 3c 01 	call	0x278	; 0x278 <measure_distance>
            distance = dist; // Guardar para I2C
  ec:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <distance+0x1>
  f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <distance>

            // Accionar servo y LED solo si el objeto está cerca
            if(distance > 0 && distance < DISTANCE_THRESHOLD){
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distance>
  f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distance+0x1>
  fc:	89 2b       	or	r24, r25
  fe:	71 f0       	breq	.+28     	; 0x11c <main+0x58>
 100:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distance>
 104:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distance+0x1>
 108:	4e 97       	sbiw	r24, 0x1e	; 30
 10a:	40 f4       	brcc	.+16     	; 0x11c <main+0x58>
                PORTC |= (1 << LED_PIN);    // Encender LED
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	88 b9       	out	0x08, r24	; 8
                servo_set(SERVO_MAX);       // Mover servo
 112:	80 ea       	ldi	r24, 0xA0	; 160
 114:	9f e0       	ldi	r25, 0x0F	; 15
 116:	0e 94 1b 01 	call	0x236	; 0x236 <servo_set>
 11a:	07 c0       	rjmp	.+14     	; 0x12a <main+0x66>
            } else {
                PORTC &= ~(1 << LED_PIN);   // Apagar LED
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	8e 7f       	andi	r24, 0xFE	; 254
 120:	88 b9       	out	0x08, r24	; 8
                servo_set(SERVO_MIN);       // Mantener servo en posición mínima
 122:	80 ed       	ldi	r24, 0xD0	; 208
 124:	97 e0       	ldi	r25, 0x07	; 7
 126:	0e 94 1b 01 	call	0x236	; 0x236 <servo_set>
            }
        }

        // ---------- Comando del maestro ----------
        if(buffer == 'C'){  
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <buffer>
 12e:	83 34       	cpi	r24, 0x43	; 67
 130:	a9 f6       	brne	.-86     	; 0xdc <main+0x18>
            PORTC ^= (1 << LED_PIN);   // Parpadeo LED
 132:	98 b1       	in	r25, 0x08	; 8
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 27       	eor	r24, r25
 138:	88 b9       	out	0x08, r24	; 8
            buffer = 0;
 13a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <buffer>
 13e:	ce cf       	rjmp	.-100    	; 0xdc <main+0x18>

00000140 <__vector_24>:
//******************************************************************************************************************
// INTERRUPCIONES
//******************************************************************************************************************

// ISR I2C - Comunicación con Maestro
ISR(TWI_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	ef 93       	push	r30
 150:	ff 93       	push	r31
    uint8_t estado;
    estado = TWSR & 0xFC;
 152:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 156:	8c 7f       	andi	r24, 0xFC	; 252

    switch(estado){
 158:	80 38       	cpi	r24, 0x80	; 128
 15a:	99 f0       	breq	.+38     	; 0x182 <__vector_24+0x42>
 15c:	28 f4       	brcc	.+10     	; 0x168 <__vector_24+0x28>
 15e:	80 36       	cpi	r24, 0x60	; 96
 160:	51 f0       	breq	.+20     	; 0x176 <__vector_24+0x36>
 162:	80 37       	cpi	r24, 0x70	; 112
 164:	41 f0       	breq	.+16     	; 0x176 <__vector_24+0x36>
 166:	2b c0       	rjmp	.+86     	; 0x1be <__vector_24+0x7e>
 168:	88 3a       	cpi	r24, 0xA8	; 168
 16a:	a9 f0       	breq	.+42     	; 0x196 <__vector_24+0x56>
 16c:	88 3b       	cpi	r24, 0xB8	; 184
 16e:	99 f0       	breq	.+38     	; 0x196 <__vector_24+0x56>
 170:	80 39       	cpi	r24, 0x90	; 144
 172:	29 f5       	brne	.+74     	; 0x1be <__vector_24+0x7e>
 174:	06 c0       	rjmp	.+12     	; 0x182 <__vector_24+0x42>
        case 0x60: // SLA+W recibido
        case 0x70:
            TWCR |= (1 << TWINT);
 176:	ec eb       	ldi	r30, 0xBC	; 188
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	80 68       	ori	r24, 0x80	; 128
 17e:	80 83       	st	Z, r24
            break;
 180:	23 c0       	rjmp	.+70     	; 0x1c8 <__vector_24+0x88>

        case 0x80: // Dato recibido
        case 0x90:
            buffer = TWDR;              // Guardar comando
 182:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 186:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <buffer>
            TWCR |= (1 << TWINT);
 18a:	ec eb       	ldi	r30, 0xBC	; 188
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
            break;
 194:	19 c0       	rjmp	.+50     	; 0x1c8 <__vector_24+0x88>

        case 0xA8: // SLA+R recibido -> enviar datos
        case 0xB8:
        {
            uint8_t scaledDistance;
            if(distance > 255) scaledDistance = 255;
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distance>
 19a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distance+0x1>
 19e:	8f 3f       	cpi	r24, 0xFF	; 255
 1a0:	91 05       	cpc	r25, r1
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <__vector_24+0x66>
 1a4:	28 f4       	brcc	.+10     	; 0x1b0 <__vector_24+0x70>
            else scaledDistance = (uint8_t)distance;
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <distance>
 1aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <distance+0x1>
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <__vector_24+0x72>

        case 0xA8: // SLA+R recibido -> enviar datos
        case 0xB8:
        {
            uint8_t scaledDistance;
            if(distance > 255) scaledDistance = 255;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
            else scaledDistance = (uint8_t)distance;
            TWDR = scaledDistance;  // Mandar solo un byte
 1b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            TWCR = (1 << TWEN)|(1 << TWIE)|(1 << TWINT)|(1 << TWEA);
 1b6:	85 ec       	ldi	r24, 0xC5	; 197
 1b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <__vector_24+0x88>
        }

        default: // Error
            TWCR |= (1 << TWINT)|(1 << TWSTO);
 1be:	ec eb       	ldi	r30, 0xBC	; 188
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 69       	ori	r24, 0x90	; 144
 1c6:	80 83       	st	Z, r24
            break;
    }
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <__vector_14>:

// Timer0 cada 10 ms: solo activa flag
ISR(TIMER0_COMPA_vect){
 1da:	1f 92       	push	r1
 1dc:	0f 92       	push	r0
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	0f 92       	push	r0
 1e2:	11 24       	eor	r1, r1
 1e4:	8f 93       	push	r24
    static uint8_t contador = 0;
    contador++;
 1e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ea:	8f 5f       	subi	r24, 0xFF	; 255
 1ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if(contador >= 10){ // Cada 100 ms
 1f0:	8a 30       	cpi	r24, 0x0A	; 10
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <__vector_14+0x24>
        contador = 0;
 1f4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
        flag_measure = 1;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_measure>
    }
}
 1fe:	8f 91       	pop	r24
 200:	0f 90       	pop	r0
 202:	0f be       	out	0x3f, r0	; 63
 204:	0f 90       	pop	r0
 206:	1f 90       	pop	r1
 208:	18 95       	reti

0000020a <servo_init>:


#include "servo.h"

void servo_init(void) {
	DDRB |= (1 << PB1); // OC1A como salida
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	82 60       	ori	r24, 0x02	; 2
 20e:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 210:	82 e8       	ldi	r24, 0x82	; 130
 212:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Fast PWM, prescaler=8
 216:	8a e1       	ldi	r24, 0x1A	; 26
 218:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 40000;   // 20 ms (50 Hz)
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	9c e9       	ldi	r25, 0x9C	; 156
 220:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 224:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = SERVO_MIN;
 228:	80 ed       	ldi	r24, 0xD0	; 208
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 230:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 234:	08 95       	ret

00000236 <servo_set>:
}

void servo_set(uint16_t position) {
	if (position < SERVO_MIN) position = SERVO_MIN;
 236:	80 3d       	cpi	r24, 0xD0	; 208
 238:	27 e0       	ldi	r18, 0x07	; 7
 23a:	92 07       	cpc	r25, r18
 23c:	10 f4       	brcc	.+4      	; 0x242 <servo_set+0xc>
 23e:	80 ed       	ldi	r24, 0xD0	; 208
 240:	97 e0       	ldi	r25, 0x07	; 7
	if (position > SERVO_MAX) position = SERVO_MAX;
 242:	81 3a       	cpi	r24, 0xA1	; 161
 244:	2f e0       	ldi	r18, 0x0F	; 15
 246:	92 07       	cpc	r25, r18
 248:	10 f0       	brcs	.+4      	; 0x24e <servo_set+0x18>
 24a:	80 ea       	ldi	r24, 0xA0	; 160
 24c:	9f e0       	ldi	r25, 0x0F	; 15
	OCR1A = position;
 24e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 252:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 256:	08 95       	ret

00000258 <ultrasonic_init>:
#include "ultrasonic.h"
#include <avr/io.h>
#include <util/delay.h>

void ultrasonic_init(void) {
    DDRD |= (1 << TRIG_PIN);   // Trigger como salida
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << ECHO_PIN);  // Echo como entrada
 25e:	8a b1       	in	r24, 0x0a	; 10
 260:	8f 7b       	andi	r24, 0xBF	; 191
 262:	8a b9       	out	0x0a, r24	; 10

    // Inicializar Timer1 para medir microsegundos
    TCCR1A = 0;
 264:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    TCCR1B = (1 << CS11); // prescaler = 8
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    TCNT1 = 0;
 26e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 272:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 276:	08 95       	ret

00000278 <measure_distance>:
}

uint16_t measure_distance(void) {
 278:	8f 92       	push	r8
 27a:	9f 92       	push	r9
 27c:	af 92       	push	r10
 27e:	bf 92       	push	r11
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	cf 93       	push	r28
    uint32_t sum = 0;
    uint8_t samples = 5; // número de mediciones a promediar

    for(uint8_t i = 0; i < samples; i++){
 28c:	c0 e0       	ldi	r28, 0x00	; 0
    TCCR1B = (1 << CS11); // prescaler = 8
    TCNT1 = 0;
}

uint16_t measure_distance(void) {
    uint32_t sum = 0;
 28e:	c1 2c       	mov	r12, r1
 290:	d1 2c       	mov	r13, r1
 292:	76 01       	movw	r14, r12
    uint8_t samples = 5; // número de mediciones a promediar

    for(uint8_t i = 0; i < samples; i++){
 294:	57 c0       	rjmp	.+174    	; 0x344 <measure_distance+0xcc>
        // Pulso de trigger
        PORTD &= ~(1 << TRIG_PIN);
 296:	8b b1       	in	r24, 0x0b	; 11
 298:	8f 7d       	andi	r24, 0xDF	; 223
 29a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	00 c0       	rjmp	.+0      	; 0x29e <measure_distance+0x26>
        _delay_us(2);
        PORTD |= (1 << TRIG_PIN);
 29e:	8b b1       	in	r24, 0x0b	; 11
 2a0:	80 62       	ori	r24, 0x20	; 32
 2a2:	8b b9       	out	0x0b, r24	; 11
 2a4:	23 e0       	ldi	r18, 0x03	; 3
 2a6:	2a 95       	dec	r18
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <measure_distance+0x2e>
 2aa:	00 00       	nop
        _delay_us(10);
        PORTD &= ~(1 << TRIG_PIN);
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	8f 7d       	andi	r24, 0xDF	; 223
 2b0:	8b b9       	out	0x0b, r24	; 11

        // Esperar inicio de eco con timeout
        uint32_t timeout = 0;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	dc 01       	movw	r26, r24
        while(!(PIND & (1 << ECHO_PIN)) && timeout < 30000){
 2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <measure_distance+0x48>
            timeout++;
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	a1 1d       	adc	r26, r1
 2be:	b1 1d       	adc	r27, r1
        _delay_us(10);
        PORTD &= ~(1 << TRIG_PIN);

        // Esperar inicio de eco con timeout
        uint32_t timeout = 0;
        while(!(PIND & (1 << ECHO_PIN)) && timeout < 30000){
 2c0:	4e 99       	sbic	0x09, 6	; 9
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <measure_distance+0x58>
 2c4:	80 33       	cpi	r24, 0x30	; 48
 2c6:	25 e7       	ldi	r18, 0x75	; 117
 2c8:	92 07       	cpc	r25, r18
 2ca:	a1 05       	cpc	r26, r1
 2cc:	b1 05       	cpc	r27, r1
 2ce:	a8 f3       	brcs	.-22     	; 0x2ba <measure_distance+0x42>
            timeout++;
        }

        TCNT1 = 0; // Reiniciar Timer1
 2d0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2d4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
        timeout = 0;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	dc 01       	movw	r26, r24
        while((PIND & (1 << ECHO_PIN)) && timeout < 30000){
 2de:	03 c0       	rjmp	.+6      	; 0x2e6 <measure_distance+0x6e>
            timeout++;
 2e0:	01 96       	adiw	r24, 0x01	; 1
 2e2:	a1 1d       	adc	r26, r1
 2e4:	b1 1d       	adc	r27, r1
            timeout++;
        }

        TCNT1 = 0; // Reiniciar Timer1
        timeout = 0;
        while((PIND & (1 << ECHO_PIN)) && timeout < 30000){
 2e6:	4e 9b       	sbis	0x09, 6	; 9
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <measure_distance+0x7e>
 2ea:	80 33       	cpi	r24, 0x30	; 48
 2ec:	25 e7       	ldi	r18, 0x75	; 117
 2ee:	92 07       	cpc	r25, r18
 2f0:	a1 05       	cpc	r26, r1
 2f2:	b1 05       	cpc	r27, r1
 2f4:	a8 f3       	brcs	.-22     	; 0x2e0 <measure_distance+0x68>
            timeout++;
        }

        uint16_t duration = TCNT1;
 2f6:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 2fa:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

        // Convertir ticks a distancia en cm
        uint16_t distance_cm = (uint16_t)((duration * 0.5 * 0.0343) / 2);
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <__floatunsisf>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	5f e3       	ldi	r21, 0x3F	; 63
 30e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 312:	28 e2       	ldi	r18, 0x28	; 40
 314:	3e e7       	ldi	r19, 0x7E	; 126
 316:	4c e0       	ldi	r20, 0x0C	; 12
 318:	5d e3       	ldi	r21, 0x3D	; 61
 31a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 31e:	20 e0       	ldi	r18, 0x00	; 0
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	5f e3       	ldi	r21, 0x3F	; 63
 326:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__mulsf3>
 32a:	0e 94 c9 01 	call	0x392	; 0x392 <__fixunssfsi>
        sum += distance_cm;
 32e:	c6 0e       	add	r12, r22
 330:	d7 1e       	adc	r13, r23
 332:	e1 1c       	adc	r14, r1
 334:	f1 1c       	adc	r15, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	83 ec       	ldi	r24, 0xC3	; 195
 338:	99 e0       	ldi	r25, 0x09	; 9
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <measure_distance+0xc2>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <measure_distance+0xc8>
 340:	00 00       	nop

uint16_t measure_distance(void) {
    uint32_t sum = 0;
    uint8_t samples = 5; // número de mediciones a promediar

    for(uint8_t i = 0; i < samples; i++){
 342:	cf 5f       	subi	r28, 0xFF	; 255
 344:	c5 30       	cpi	r28, 0x05	; 5
 346:	08 f4       	brcc	.+2      	; 0x34a <measure_distance+0xd2>
 348:	a6 cf       	rjmp	.-180    	; 0x296 <measure_distance+0x1e>
        sum += distance_cm;

        _delay_ms(10); // Pequeña pausa entre mediciones
    }

    return (uint16_t)(sum / samples); // Promedio
 34a:	c7 01       	movw	r24, r14
 34c:	b6 01       	movw	r22, r12
 34e:	2d ec       	ldi	r18, 0xCD	; 205
 350:	3c ec       	ldi	r19, 0xCC	; 204
 352:	4c ec       	ldi	r20, 0xCC	; 204
 354:	5c ec       	ldi	r21, 0xCC	; 204
 356:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__umulsidi3>
 35a:	00 e2       	ldi	r16, 0x20	; 32
 35c:	0e 94 20 03 	call	0x640	; 0x640 <__lshrdi3>
 360:	82 2e       	mov	r8, r18
 362:	93 2e       	mov	r9, r19
 364:	a4 2e       	mov	r10, r20
 366:	b5 2e       	mov	r11, r21
 368:	d5 01       	movw	r26, r10
 36a:	c4 01       	movw	r24, r8
 36c:	b6 95       	lsr	r27
 36e:	a7 95       	ror	r26
 370:	97 95       	ror	r25
 372:	87 95       	ror	r24
 374:	b6 95       	lsr	r27
 376:	a7 95       	ror	r26
 378:	97 95       	ror	r25
 37a:	87 95       	ror	r24
}
 37c:	cf 91       	pop	r28
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	df 90       	pop	r13
 386:	cf 90       	pop	r12
 388:	bf 90       	pop	r11
 38a:	af 90       	pop	r10
 38c:	9f 90       	pop	r9
 38e:	8f 90       	pop	r8
 390:	08 95       	ret

00000392 <__fixunssfsi>:
 392:	0e 94 3d 02 	call	0x47a	; 0x47a <__fp_splitA>
 396:	88 f0       	brcs	.+34     	; 0x3ba <__fixunssfsi+0x28>
 398:	9f 57       	subi	r25, 0x7F	; 127
 39a:	98 f0       	brcs	.+38     	; 0x3c2 <__fixunssfsi+0x30>
 39c:	b9 2f       	mov	r27, r25
 39e:	99 27       	eor	r25, r25
 3a0:	b7 51       	subi	r27, 0x17	; 23
 3a2:	b0 f0       	brcs	.+44     	; 0x3d0 <__fixunssfsi+0x3e>
 3a4:	e1 f0       	breq	.+56     	; 0x3de <__fixunssfsi+0x4c>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	88 1f       	adc	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	1a f0       	brmi	.+6      	; 0x3b6 <__fixunssfsi+0x24>
 3b0:	ba 95       	dec	r27
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <__fixunssfsi+0x14>
 3b4:	14 c0       	rjmp	.+40     	; 0x3de <__fixunssfsi+0x4c>
 3b6:	b1 30       	cpi	r27, 0x01	; 1
 3b8:	91 f0       	breq	.+36     	; 0x3de <__fixunssfsi+0x4c>
 3ba:	0e 94 57 02 	call	0x4ae	; 0x4ae <__fp_zero>
 3be:	b1 e0       	ldi	r27, 0x01	; 1
 3c0:	08 95       	ret
 3c2:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__fp_zero>
 3c6:	67 2f       	mov	r22, r23
 3c8:	78 2f       	mov	r23, r24
 3ca:	88 27       	eor	r24, r24
 3cc:	b8 5f       	subi	r27, 0xF8	; 248
 3ce:	39 f0       	breq	.+14     	; 0x3de <__fixunssfsi+0x4c>
 3d0:	b9 3f       	cpi	r27, 0xF9	; 249
 3d2:	cc f3       	brlt	.-14     	; 0x3c6 <__fixunssfsi+0x34>
 3d4:	86 95       	lsr	r24
 3d6:	77 95       	ror	r23
 3d8:	67 95       	ror	r22
 3da:	b3 95       	inc	r27
 3dc:	d9 f7       	brne	.-10     	; 0x3d4 <__fixunssfsi+0x42>
 3de:	3e f4       	brtc	.+14     	; 0x3ee <__fixunssfsi+0x5c>
 3e0:	90 95       	com	r25
 3e2:	80 95       	com	r24
 3e4:	70 95       	com	r23
 3e6:	61 95       	neg	r22
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	8f 4f       	sbci	r24, 0xFF	; 255
 3ec:	9f 4f       	sbci	r25, 0xFF	; 255
 3ee:	08 95       	ret

000003f0 <__floatunsisf>:
 3f0:	e8 94       	clt
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>

000003f4 <__floatsisf>:
 3f4:	97 fb       	bst	r25, 7
 3f6:	3e f4       	brtc	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	90 95       	com	r25
 3fa:	80 95       	com	r24
 3fc:	70 95       	com	r23
 3fe:	61 95       	neg	r22
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	99 23       	and	r25, r25
 408:	a9 f0       	breq	.+42     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 40a:	f9 2f       	mov	r31, r25
 40c:	96 e9       	ldi	r25, 0x96	; 150
 40e:	bb 27       	eor	r27, r27
 410:	93 95       	inc	r25
 412:	f6 95       	lsr	r31
 414:	87 95       	ror	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b7 95       	ror	r27
 41c:	f1 11       	cpse	r31, r1
 41e:	f8 cf       	rjmp	.-16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 420:	fa f4       	brpl	.+62     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 422:	bb 0f       	add	r27, r27
 424:	11 f4       	brne	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	60 ff       	sbrs	r22, 0
 428:	1b c0       	rjmp	.+54     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 42a:	6f 5f       	subi	r22, 0xFF	; 255
 42c:	7f 4f       	sbci	r23, 0xFF	; 255
 42e:	8f 4f       	sbci	r24, 0xFF	; 255
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	16 c0       	rjmp	.+44     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 434:	88 23       	and	r24, r24
 436:	11 f0       	breq	.+4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 438:	96 e9       	ldi	r25, 0x96	; 150
 43a:	11 c0       	rjmp	.+34     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 43c:	77 23       	and	r23, r23
 43e:	21 f0       	breq	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 440:	9e e8       	ldi	r25, 0x8E	; 142
 442:	87 2f       	mov	r24, r23
 444:	76 2f       	mov	r23, r22
 446:	05 c0       	rjmp	.+10     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 448:	66 23       	and	r22, r22
 44a:	71 f0       	breq	.+28     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 44c:	96 e8       	ldi	r25, 0x86	; 134
 44e:	86 2f       	mov	r24, r22
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	2a f0       	brmi	.+10     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 456:	9a 95       	dec	r25
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	da f7       	brpl	.-10     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 460:	88 0f       	add	r24, r24
 462:	96 95       	lsr	r25
 464:	87 95       	ror	r24
 466:	97 f9       	bld	r25, 7
 468:	08 95       	ret

0000046a <__fp_split3>:
 46a:	57 fd       	sbrc	r21, 7
 46c:	90 58       	subi	r25, 0x80	; 128
 46e:	44 0f       	add	r20, r20
 470:	55 1f       	adc	r21, r21
 472:	59 f0       	breq	.+22     	; 0x48a <__fp_splitA+0x10>
 474:	5f 3f       	cpi	r21, 0xFF	; 255
 476:	71 f0       	breq	.+28     	; 0x494 <__fp_splitA+0x1a>
 478:	47 95       	ror	r20

0000047a <__fp_splitA>:
 47a:	88 0f       	add	r24, r24
 47c:	97 fb       	bst	r25, 7
 47e:	99 1f       	adc	r25, r25
 480:	61 f0       	breq	.+24     	; 0x49a <__fp_splitA+0x20>
 482:	9f 3f       	cpi	r25, 0xFF	; 255
 484:	79 f0       	breq	.+30     	; 0x4a4 <__fp_splitA+0x2a>
 486:	87 95       	ror	r24
 488:	08 95       	ret
 48a:	12 16       	cp	r1, r18
 48c:	13 06       	cpc	r1, r19
 48e:	14 06       	cpc	r1, r20
 490:	55 1f       	adc	r21, r21
 492:	f2 cf       	rjmp	.-28     	; 0x478 <__fp_split3+0xe>
 494:	46 95       	lsr	r20
 496:	f1 df       	rcall	.-30     	; 0x47a <__fp_splitA>
 498:	08 c0       	rjmp	.+16     	; 0x4aa <__fp_splitA+0x30>
 49a:	16 16       	cp	r1, r22
 49c:	17 06       	cpc	r1, r23
 49e:	18 06       	cpc	r1, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	f1 cf       	rjmp	.-30     	; 0x486 <__fp_splitA+0xc>
 4a4:	86 95       	lsr	r24
 4a6:	71 05       	cpc	r23, r1
 4a8:	61 05       	cpc	r22, r1
 4aa:	08 94       	sec
 4ac:	08 95       	ret

000004ae <__fp_zero>:
 4ae:	e8 94       	clt

000004b0 <__fp_szero>:
 4b0:	bb 27       	eor	r27, r27
 4b2:	66 27       	eor	r22, r22
 4b4:	77 27       	eor	r23, r23
 4b6:	cb 01       	movw	r24, r22
 4b8:	97 f9       	bld	r25, 7
 4ba:	08 95       	ret

000004bc <__mulsf3>:
 4bc:	0e 94 71 02 	call	0x4e2	; 0x4e2 <__mulsf3x>
 4c0:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_round>
 4c4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_pscA>
 4c8:	38 f0       	brcs	.+14     	; 0x4d8 <__mulsf3+0x1c>
 4ca:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fp_pscB>
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__mulsf3+0x1c>
 4d0:	95 23       	and	r25, r21
 4d2:	11 f0       	breq	.+4      	; 0x4d8 <__mulsf3+0x1c>
 4d4:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 4d8:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_nan>
 4dc:	11 24       	eor	r1, r1
 4de:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_szero>

000004e2 <__mulsf3x>:
 4e2:	0e 94 35 02 	call	0x46a	; 0x46a <__fp_split3>
 4e6:	70 f3       	brcs	.-36     	; 0x4c4 <__mulsf3+0x8>

000004e8 <__mulsf3_pse>:
 4e8:	95 9f       	mul	r25, r21
 4ea:	c1 f3       	breq	.-16     	; 0x4dc <__mulsf3+0x20>
 4ec:	95 0f       	add	r25, r21
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	55 1f       	adc	r21, r21
 4f2:	62 9f       	mul	r22, r18
 4f4:	f0 01       	movw	r30, r0
 4f6:	72 9f       	mul	r23, r18
 4f8:	bb 27       	eor	r27, r27
 4fa:	f0 0d       	add	r31, r0
 4fc:	b1 1d       	adc	r27, r1
 4fe:	63 9f       	mul	r22, r19
 500:	aa 27       	eor	r26, r26
 502:	f0 0d       	add	r31, r0
 504:	b1 1d       	adc	r27, r1
 506:	aa 1f       	adc	r26, r26
 508:	64 9f       	mul	r22, r20
 50a:	66 27       	eor	r22, r22
 50c:	b0 0d       	add	r27, r0
 50e:	a1 1d       	adc	r26, r1
 510:	66 1f       	adc	r22, r22
 512:	82 9f       	mul	r24, r18
 514:	22 27       	eor	r18, r18
 516:	b0 0d       	add	r27, r0
 518:	a1 1d       	adc	r26, r1
 51a:	62 1f       	adc	r22, r18
 51c:	73 9f       	mul	r23, r19
 51e:	b0 0d       	add	r27, r0
 520:	a1 1d       	adc	r26, r1
 522:	62 1f       	adc	r22, r18
 524:	83 9f       	mul	r24, r19
 526:	a0 0d       	add	r26, r0
 528:	61 1d       	adc	r22, r1
 52a:	22 1f       	adc	r18, r18
 52c:	74 9f       	mul	r23, r20
 52e:	33 27       	eor	r19, r19
 530:	a0 0d       	add	r26, r0
 532:	61 1d       	adc	r22, r1
 534:	23 1f       	adc	r18, r19
 536:	84 9f       	mul	r24, r20
 538:	60 0d       	add	r22, r0
 53a:	21 1d       	adc	r18, r1
 53c:	82 2f       	mov	r24, r18
 53e:	76 2f       	mov	r23, r22
 540:	6a 2f       	mov	r22, r26
 542:	11 24       	eor	r1, r1
 544:	9f 57       	subi	r25, 0x7F	; 127
 546:	50 40       	sbci	r21, 0x00	; 0
 548:	9a f0       	brmi	.+38     	; 0x570 <__mulsf3_pse+0x88>
 54a:	f1 f0       	breq	.+60     	; 0x588 <__mulsf3_pse+0xa0>
 54c:	88 23       	and	r24, r24
 54e:	4a f0       	brmi	.+18     	; 0x562 <__mulsf3_pse+0x7a>
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	bb 1f       	adc	r27, r27
 556:	66 1f       	adc	r22, r22
 558:	77 1f       	adc	r23, r23
 55a:	88 1f       	adc	r24, r24
 55c:	91 50       	subi	r25, 0x01	; 1
 55e:	50 40       	sbci	r21, 0x00	; 0
 560:	a9 f7       	brne	.-22     	; 0x54c <__mulsf3_pse+0x64>
 562:	9e 3f       	cpi	r25, 0xFE	; 254
 564:	51 05       	cpc	r21, r1
 566:	80 f0       	brcs	.+32     	; 0x588 <__mulsf3_pse+0xa0>
 568:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 56c:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__fp_szero>
 570:	5f 3f       	cpi	r21, 0xFF	; 255
 572:	e4 f3       	brlt	.-8      	; 0x56c <__mulsf3_pse+0x84>
 574:	98 3e       	cpi	r25, 0xE8	; 232
 576:	d4 f3       	brlt	.-12     	; 0x56c <__mulsf3_pse+0x84>
 578:	86 95       	lsr	r24
 57a:	77 95       	ror	r23
 57c:	67 95       	ror	r22
 57e:	b7 95       	ror	r27
 580:	f7 95       	ror	r31
 582:	e7 95       	ror	r30
 584:	9f 5f       	subi	r25, 0xFF	; 255
 586:	c1 f7       	brne	.-16     	; 0x578 <__mulsf3_pse+0x90>
 588:	fe 2b       	or	r31, r30
 58a:	88 0f       	add	r24, r24
 58c:	91 1d       	adc	r25, r1
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	97 f9       	bld	r25, 7
 594:	08 95       	ret

00000596 <__fp_inf>:
 596:	97 f9       	bld	r25, 7
 598:	9f 67       	ori	r25, 0x7F	; 127
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	08 95       	ret

000005a2 <__fp_nan>:
 5a2:	9f ef       	ldi	r25, 0xFF	; 255
 5a4:	80 ec       	ldi	r24, 0xC0	; 192
 5a6:	08 95       	ret

000005a8 <__fp_pscA>:
 5a8:	00 24       	eor	r0, r0
 5aa:	0a 94       	dec	r0
 5ac:	16 16       	cp	r1, r22
 5ae:	17 06       	cpc	r1, r23
 5b0:	18 06       	cpc	r1, r24
 5b2:	09 06       	cpc	r0, r25
 5b4:	08 95       	ret

000005b6 <__fp_pscB>:
 5b6:	00 24       	eor	r0, r0
 5b8:	0a 94       	dec	r0
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	05 06       	cpc	r0, r21
 5c2:	08 95       	ret

000005c4 <__fp_round>:
 5c4:	09 2e       	mov	r0, r25
 5c6:	03 94       	inc	r0
 5c8:	00 0c       	add	r0, r0
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__fp_round+0xc>
 5cc:	88 23       	and	r24, r24
 5ce:	52 f0       	brmi	.+20     	; 0x5e4 <__fp_round+0x20>
 5d0:	bb 0f       	add	r27, r27
 5d2:	40 f4       	brcc	.+16     	; 0x5e4 <__fp_round+0x20>
 5d4:	bf 2b       	or	r27, r31
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0x18>
 5d8:	60 ff       	sbrs	r22, 0
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__fp_round+0x20>
 5dc:	6f 5f       	subi	r22, 0xFF	; 255
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__umulsidi3>:
 5e6:	e8 94       	clt

000005e8 <__umulsidi3_helper>:
 5e8:	df 93       	push	r29
 5ea:	cf 93       	push	r28
 5ec:	fc 01       	movw	r30, r24
 5ee:	db 01       	movw	r26, r22
 5f0:	0e 94 3c 03 	call	0x678	; 0x678 <__umulhisi3>
 5f4:	7f 93       	push	r23
 5f6:	6f 93       	push	r22
 5f8:	e9 01       	movw	r28, r18
 5fa:	9a 01       	movw	r18, r20
 5fc:	ac 01       	movw	r20, r24
 5fe:	bf 93       	push	r27
 600:	af 93       	push	r26
 602:	3f 93       	push	r19
 604:	2f 93       	push	r18
 606:	df 01       	movw	r26, r30
 608:	0e 94 3c 03 	call	0x678	; 0x678 <__umulhisi3>
 60c:	26 f4       	brtc	.+8      	; 0x616 <__umulsidi3_helper+0x2e>
 60e:	6c 1b       	sub	r22, r28
 610:	7d 0b       	sbc	r23, r29
 612:	82 0b       	sbc	r24, r18
 614:	93 0b       	sbc	r25, r19
 616:	9e 01       	movw	r18, r28
 618:	eb 01       	movw	r28, r22
 61a:	fc 01       	movw	r30, r24
 61c:	0e 94 4b 03 	call	0x696	; 0x696 <__muldi3_6>
 620:	af 91       	pop	r26
 622:	bf 91       	pop	r27
 624:	2f 91       	pop	r18
 626:	3f 91       	pop	r19
 628:	0e 94 4b 03 	call	0x696	; 0x696 <__muldi3_6>
 62c:	be 01       	movw	r22, r28
 62e:	cf 01       	movw	r24, r30
 630:	f9 01       	movw	r30, r18
 632:	2f 91       	pop	r18
 634:	3f 91       	pop	r19
 636:	cf 91       	pop	r28
 638:	df 91       	pop	r29
 63a:	08 95       	ret

0000063c <__ashrdi3>:
 63c:	97 fb       	bst	r25, 7
 63e:	10 f8       	bld	r1, 0

00000640 <__lshrdi3>:
 640:	16 94       	lsr	r1
 642:	00 08       	sbc	r0, r0
 644:	0f 93       	push	r16
 646:	08 30       	cpi	r16, 0x08	; 8
 648:	98 f0       	brcs	.+38     	; 0x670 <__lshrdi3+0x30>
 64a:	08 50       	subi	r16, 0x08	; 8
 64c:	23 2f       	mov	r18, r19
 64e:	34 2f       	mov	r19, r20
 650:	45 2f       	mov	r20, r21
 652:	56 2f       	mov	r21, r22
 654:	67 2f       	mov	r22, r23
 656:	78 2f       	mov	r23, r24
 658:	89 2f       	mov	r24, r25
 65a:	90 2d       	mov	r25, r0
 65c:	f4 cf       	rjmp	.-24     	; 0x646 <__lshrdi3+0x6>
 65e:	05 94       	asr	r0
 660:	97 95       	ror	r25
 662:	87 95       	ror	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	57 95       	ror	r21
 66a:	47 95       	ror	r20
 66c:	37 95       	ror	r19
 66e:	27 95       	ror	r18
 670:	0a 95       	dec	r16
 672:	aa f7       	brpl	.-22     	; 0x65e <__lshrdi3+0x1e>
 674:	0f 91       	pop	r16
 676:	08 95       	ret

00000678 <__umulhisi3>:
 678:	a2 9f       	mul	r26, r18
 67a:	b0 01       	movw	r22, r0
 67c:	b3 9f       	mul	r27, r19
 67e:	c0 01       	movw	r24, r0
 680:	a3 9f       	mul	r26, r19
 682:	70 0d       	add	r23, r0
 684:	81 1d       	adc	r24, r1
 686:	11 24       	eor	r1, r1
 688:	91 1d       	adc	r25, r1
 68a:	b2 9f       	mul	r27, r18
 68c:	70 0d       	add	r23, r0
 68e:	81 1d       	adc	r24, r1
 690:	11 24       	eor	r1, r1
 692:	91 1d       	adc	r25, r1
 694:	08 95       	ret

00000696 <__muldi3_6>:
 696:	0e 94 3c 03 	call	0x678	; 0x678 <__umulhisi3>
 69a:	46 0f       	add	r20, r22
 69c:	57 1f       	adc	r21, r23
 69e:	c8 1f       	adc	r28, r24
 6a0:	d9 1f       	adc	r29, r25
 6a2:	08 f4       	brcc	.+2      	; 0x6a6 <__muldi3_6+0x10>
 6a4:	31 96       	adiw	r30, 0x01	; 1
 6a6:	08 95       	ret

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
