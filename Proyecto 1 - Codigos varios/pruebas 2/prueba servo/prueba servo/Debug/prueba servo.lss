
prueba servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d8  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000838  00000000  00000000  00000ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000050c  00000000  00000000  0000172c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001c38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000453  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ca  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#define LED_PIN PC0
#define DISTANCE_THRESHOLD 30

int main(void) {
	DDRC |= (1 << LED_PIN);  // LED salida
  80:	87 b1       	in	r24, 0x07	; 7
  82:	81 60       	ori	r24, 0x01	; 1
  84:	87 b9       	out	0x07, r24	; 7

	servo_init();
  86:	0e 94 65 00 	call	0xca	; 0xca <servo_init>
	ultrasonic_init();
  8a:	0e 94 8c 00 	call	0x118	; 0x118 <ultrasonic_init>

	while(1) {
		uint16_t distance = measure_distance();
  8e:	0e 94 93 00 	call	0x126	; 0x126 <measure_distance>

		if(distance > 0 && distance < DISTANCE_THRESHOLD) {
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	4d 97       	sbiw	r24, 0x1d	; 29
  96:	40 f4       	brcc	.+16     	; 0xa8 <main+0x28>
			PORTC |= (1 << LED_PIN);
  98:	88 b1       	in	r24, 0x08	; 8
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	88 b9       	out	0x08, r24	; 8
			servo_set(SERVO_MAX);
  9e:	80 ea       	ldi	r24, 0xA0	; 160
  a0:	9f e0       	ldi	r25, 0x0F	; 15
  a2:	0e 94 7b 00 	call	0xf6	; 0xf6 <servo_set>
  a6:	07 c0       	rjmp	.+14     	; 0xb6 <main+0x36>
			} else {
			PORTC &= ~(1 << LED_PIN);
  a8:	88 b1       	in	r24, 0x08	; 8
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	88 b9       	out	0x08, r24	; 8
			servo_set(SERVO_MIN);
  ae:	80 ed       	ldi	r24, 0xD0	; 208
  b0:	97 e0       	ldi	r25, 0x07	; 7
  b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <servo_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	81 ee       	ldi	r24, 0xE1	; 225
  ba:	94 e0       	ldi	r25, 0x04	; 4
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x3c>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x46>
  c6:	00 00       	nop
  c8:	e2 cf       	rjmp	.-60     	; 0x8e <main+0xe>

000000ca <servo_init>:


#include "servo.h"

void servo_init(void) {
	DDRB |= (1 << PB1); // OC1A como salida
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
  d0:	82 e8       	ldi	r24, 0x82	; 130
  d2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // Fast PWM, prescaler=8
  d6:	8a e1       	ldi	r24, 0x1A	; 26
  d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 40000;   // 20 ms (50 Hz)
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	9c e9       	ldi	r25, 0x9C	; 156
  e0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = SERVO_MIN;
  e8:	80 ed       	ldi	r24, 0xD0	; 208
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  f4:	08 95       	ret

000000f6 <servo_set>:
}

void servo_set(uint16_t position) {
	if (position < SERVO_MIN) position = SERVO_MIN;
  f6:	80 3d       	cpi	r24, 0xD0	; 208
  f8:	27 e0       	ldi	r18, 0x07	; 7
  fa:	92 07       	cpc	r25, r18
  fc:	10 f4       	brcc	.+4      	; 0x102 <servo_set+0xc>
  fe:	80 ed       	ldi	r24, 0xD0	; 208
 100:	97 e0       	ldi	r25, 0x07	; 7
	if (position > SERVO_MAX) position = SERVO_MAX;
 102:	81 3a       	cpi	r24, 0xA1	; 161
 104:	2f e0       	ldi	r18, 0x0F	; 15
 106:	92 07       	cpc	r25, r18
 108:	10 f0       	brcs	.+4      	; 0x10e <servo_set+0x18>
 10a:	80 ea       	ldi	r24, 0xA0	; 160
 10c:	9f e0       	ldi	r25, 0x0F	; 15
	OCR1A = position;
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 116:	08 95       	ret

00000118 <ultrasonic_init>:


#include "ultrasonic.h"

void ultrasonic_init(void) {
	DDRD |= (1 << TRIG_PIN);   // Trigger salida
 118:	8a b1       	in	r24, 0x0a	; 10
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << ECHO_PIN);  // Echo entrada
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	8a b9       	out	0x0a, r24	; 10
 124:	08 95       	ret

00000126 <measure_distance>:
}

uint16_t measure_distance(void) {
	// Pulso de trigger
	PORTD &= ~(1 << TRIG_PIN);
 126:	8b b1       	in	r24, 0x0b	; 11
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12c:	00 c0       	rjmp	.+0      	; 0x12e <measure_distance+0x8>
	_delay_us(2);
	PORTD |= (1 << TRIG_PIN);
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	80 62       	ori	r24, 0x20	; 32
 132:	8b b9       	out	0x0b, r24	; 11
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	8a 95       	dec	r24
 138:	f1 f7       	brne	.-4      	; 0x136 <measure_distance+0x10>
 13a:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << TRIG_PIN);
 13c:	8b b1       	in	r24, 0x0b	; 11
 13e:	8f 7d       	andi	r24, 0xDF	; 223
 140:	8b b9       	out	0x0b, r24	; 11

	// Esperar inicio de eco
	while(!(PIND & (1 << ECHO_PIN)));
 142:	4e 9b       	sbis	0x09, 6	; 9
 144:	fe cf       	rjmp	.-4      	; 0x142 <measure_distance+0x1c>
	TCNT1 = 0;
 146:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 14a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	while(PIND & (1 << ECHO_PIN));
 14e:	4e 99       	sbic	0x09, 6	; 9
 150:	fe cf       	rjmp	.-4      	; 0x14e <measure_distance+0x28>
	uint16_t duration = TCNT1;
 152:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 156:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

	// Convertir ticks (0.5 us cada uno con prescaler=8 y F_CPU=16 MHz) a distancia
	return (duration * 0.5 * 0.0343) / 2;
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__floatunsisf>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	5f e3       	ldi	r21, 0x3F	; 63
 16a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__mulsf3>
 16e:	28 e2       	ldi	r18, 0x28	; 40
 170:	3e e7       	ldi	r19, 0x7E	; 126
 172:	4c e0       	ldi	r20, 0x0C	; 12
 174:	5d e3       	ldi	r21, 0x3D	; 61
 176:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__mulsf3>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	5f e3       	ldi	r21, 0x3F	; 63
 182:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <__mulsf3>
 186:	0e 94 c7 00 	call	0x18e	; 0x18e <__fixunssfsi>
}
 18a:	cb 01       	movw	r24, r22
 18c:	08 95       	ret

0000018e <__fixunssfsi>:
 18e:	0e 94 3b 01 	call	0x276	; 0x276 <__fp_splitA>
 192:	88 f0       	brcs	.+34     	; 0x1b6 <__fixunssfsi+0x28>
 194:	9f 57       	subi	r25, 0x7F	; 127
 196:	98 f0       	brcs	.+38     	; 0x1be <__fixunssfsi+0x30>
 198:	b9 2f       	mov	r27, r25
 19a:	99 27       	eor	r25, r25
 19c:	b7 51       	subi	r27, 0x17	; 23
 19e:	b0 f0       	brcs	.+44     	; 0x1cc <__fixunssfsi+0x3e>
 1a0:	e1 f0       	breq	.+56     	; 0x1da <__fixunssfsi+0x4c>
 1a2:	66 0f       	add	r22, r22
 1a4:	77 1f       	adc	r23, r23
 1a6:	88 1f       	adc	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	1a f0       	brmi	.+6      	; 0x1b2 <__fixunssfsi+0x24>
 1ac:	ba 95       	dec	r27
 1ae:	c9 f7       	brne	.-14     	; 0x1a2 <__fixunssfsi+0x14>
 1b0:	14 c0       	rjmp	.+40     	; 0x1da <__fixunssfsi+0x4c>
 1b2:	b1 30       	cpi	r27, 0x01	; 1
 1b4:	91 f0       	breq	.+36     	; 0x1da <__fixunssfsi+0x4c>
 1b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <__fp_zero>
 1ba:	b1 e0       	ldi	r27, 0x01	; 1
 1bc:	08 95       	ret
 1be:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__fp_zero>
 1c2:	67 2f       	mov	r22, r23
 1c4:	78 2f       	mov	r23, r24
 1c6:	88 27       	eor	r24, r24
 1c8:	b8 5f       	subi	r27, 0xF8	; 248
 1ca:	39 f0       	breq	.+14     	; 0x1da <__fixunssfsi+0x4c>
 1cc:	b9 3f       	cpi	r27, 0xF9	; 249
 1ce:	cc f3       	brlt	.-14     	; 0x1c2 <__fixunssfsi+0x34>
 1d0:	86 95       	lsr	r24
 1d2:	77 95       	ror	r23
 1d4:	67 95       	ror	r22
 1d6:	b3 95       	inc	r27
 1d8:	d9 f7       	brne	.-10     	; 0x1d0 <__fixunssfsi+0x42>
 1da:	3e f4       	brtc	.+14     	; 0x1ea <__fixunssfsi+0x5c>
 1dc:	90 95       	com	r25
 1de:	80 95       	com	r24
 1e0:	70 95       	com	r23
 1e2:	61 95       	neg	r22
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	8f 4f       	sbci	r24, 0xFF	; 255
 1e8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ea:	08 95       	ret

000001ec <__floatunsisf>:
 1ec:	e8 94       	clt
 1ee:	09 c0       	rjmp	.+18     	; 0x202 <__floatsisf+0x12>

000001f0 <__floatsisf>:
 1f0:	97 fb       	bst	r25, 7
 1f2:	3e f4       	brtc	.+14     	; 0x202 <__floatsisf+0x12>
 1f4:	90 95       	com	r25
 1f6:	80 95       	com	r24
 1f8:	70 95       	com	r23
 1fa:	61 95       	neg	r22
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	8f 4f       	sbci	r24, 0xFF	; 255
 200:	9f 4f       	sbci	r25, 0xFF	; 255
 202:	99 23       	and	r25, r25
 204:	a9 f0       	breq	.+42     	; 0x230 <__floatsisf+0x40>
 206:	f9 2f       	mov	r31, r25
 208:	96 e9       	ldi	r25, 0x96	; 150
 20a:	bb 27       	eor	r27, r27
 20c:	93 95       	inc	r25
 20e:	f6 95       	lsr	r31
 210:	87 95       	ror	r24
 212:	77 95       	ror	r23
 214:	67 95       	ror	r22
 216:	b7 95       	ror	r27
 218:	f1 11       	cpse	r31, r1
 21a:	f8 cf       	rjmp	.-16     	; 0x20c <__floatsisf+0x1c>
 21c:	fa f4       	brpl	.+62     	; 0x25c <__floatsisf+0x6c>
 21e:	bb 0f       	add	r27, r27
 220:	11 f4       	brne	.+4      	; 0x226 <__floatsisf+0x36>
 222:	60 ff       	sbrs	r22, 0
 224:	1b c0       	rjmp	.+54     	; 0x25c <__floatsisf+0x6c>
 226:	6f 5f       	subi	r22, 0xFF	; 255
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	8f 4f       	sbci	r24, 0xFF	; 255
 22c:	9f 4f       	sbci	r25, 0xFF	; 255
 22e:	16 c0       	rjmp	.+44     	; 0x25c <__floatsisf+0x6c>
 230:	88 23       	and	r24, r24
 232:	11 f0       	breq	.+4      	; 0x238 <__floatsisf+0x48>
 234:	96 e9       	ldi	r25, 0x96	; 150
 236:	11 c0       	rjmp	.+34     	; 0x25a <__floatsisf+0x6a>
 238:	77 23       	and	r23, r23
 23a:	21 f0       	breq	.+8      	; 0x244 <__floatsisf+0x54>
 23c:	9e e8       	ldi	r25, 0x8E	; 142
 23e:	87 2f       	mov	r24, r23
 240:	76 2f       	mov	r23, r22
 242:	05 c0       	rjmp	.+10     	; 0x24e <__floatsisf+0x5e>
 244:	66 23       	and	r22, r22
 246:	71 f0       	breq	.+28     	; 0x264 <__floatsisf+0x74>
 248:	96 e8       	ldi	r25, 0x86	; 134
 24a:	86 2f       	mov	r24, r22
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	2a f0       	brmi	.+10     	; 0x25c <__floatsisf+0x6c>
 252:	9a 95       	dec	r25
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	88 1f       	adc	r24, r24
 25a:	da f7       	brpl	.-10     	; 0x252 <__floatsisf+0x62>
 25c:	88 0f       	add	r24, r24
 25e:	96 95       	lsr	r25
 260:	87 95       	ror	r24
 262:	97 f9       	bld	r25, 7
 264:	08 95       	ret

00000266 <__fp_split3>:
 266:	57 fd       	sbrc	r21, 7
 268:	90 58       	subi	r25, 0x80	; 128
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	59 f0       	breq	.+22     	; 0x286 <__fp_splitA+0x10>
 270:	5f 3f       	cpi	r21, 0xFF	; 255
 272:	71 f0       	breq	.+28     	; 0x290 <__fp_splitA+0x1a>
 274:	47 95       	ror	r20

00000276 <__fp_splitA>:
 276:	88 0f       	add	r24, r24
 278:	97 fb       	bst	r25, 7
 27a:	99 1f       	adc	r25, r25
 27c:	61 f0       	breq	.+24     	; 0x296 <__fp_splitA+0x20>
 27e:	9f 3f       	cpi	r25, 0xFF	; 255
 280:	79 f0       	breq	.+30     	; 0x2a0 <__fp_splitA+0x2a>
 282:	87 95       	ror	r24
 284:	08 95       	ret
 286:	12 16       	cp	r1, r18
 288:	13 06       	cpc	r1, r19
 28a:	14 06       	cpc	r1, r20
 28c:	55 1f       	adc	r21, r21
 28e:	f2 cf       	rjmp	.-28     	; 0x274 <__fp_split3+0xe>
 290:	46 95       	lsr	r20
 292:	f1 df       	rcall	.-30     	; 0x276 <__fp_splitA>
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <__fp_splitA+0x30>
 296:	16 16       	cp	r1, r22
 298:	17 06       	cpc	r1, r23
 29a:	18 06       	cpc	r1, r24
 29c:	99 1f       	adc	r25, r25
 29e:	f1 cf       	rjmp	.-30     	; 0x282 <__fp_splitA+0xc>
 2a0:	86 95       	lsr	r24
 2a2:	71 05       	cpc	r23, r1
 2a4:	61 05       	cpc	r22, r1
 2a6:	08 94       	sec
 2a8:	08 95       	ret

000002aa <__fp_zero>:
 2aa:	e8 94       	clt

000002ac <__fp_szero>:
 2ac:	bb 27       	eor	r27, r27
 2ae:	66 27       	eor	r22, r22
 2b0:	77 27       	eor	r23, r23
 2b2:	cb 01       	movw	r24, r22
 2b4:	97 f9       	bld	r25, 7
 2b6:	08 95       	ret

000002b8 <__mulsf3>:
 2b8:	0e 94 6f 01 	call	0x2de	; 0x2de <__mulsf3x>
 2bc:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <__fp_round>
 2c0:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <__fp_pscA>
 2c4:	38 f0       	brcs	.+14     	; 0x2d4 <__mulsf3+0x1c>
 2c6:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_pscB>
 2ca:	20 f0       	brcs	.+8      	; 0x2d4 <__mulsf3+0x1c>
 2cc:	95 23       	and	r25, r21
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <__mulsf3+0x1c>
 2d0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_inf>
 2d4:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__fp_nan>
 2d8:	11 24       	eor	r1, r1
 2da:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__fp_szero>

000002de <__mulsf3x>:
 2de:	0e 94 33 01 	call	0x266	; 0x266 <__fp_split3>
 2e2:	70 f3       	brcs	.-36     	; 0x2c0 <__mulsf3+0x8>

000002e4 <__mulsf3_pse>:
 2e4:	95 9f       	mul	r25, r21
 2e6:	c1 f3       	breq	.-16     	; 0x2d8 <__mulsf3+0x20>
 2e8:	95 0f       	add	r25, r21
 2ea:	50 e0       	ldi	r21, 0x00	; 0
 2ec:	55 1f       	adc	r21, r21
 2ee:	62 9f       	mul	r22, r18
 2f0:	f0 01       	movw	r30, r0
 2f2:	72 9f       	mul	r23, r18
 2f4:	bb 27       	eor	r27, r27
 2f6:	f0 0d       	add	r31, r0
 2f8:	b1 1d       	adc	r27, r1
 2fa:	63 9f       	mul	r22, r19
 2fc:	aa 27       	eor	r26, r26
 2fe:	f0 0d       	add	r31, r0
 300:	b1 1d       	adc	r27, r1
 302:	aa 1f       	adc	r26, r26
 304:	64 9f       	mul	r22, r20
 306:	66 27       	eor	r22, r22
 308:	b0 0d       	add	r27, r0
 30a:	a1 1d       	adc	r26, r1
 30c:	66 1f       	adc	r22, r22
 30e:	82 9f       	mul	r24, r18
 310:	22 27       	eor	r18, r18
 312:	b0 0d       	add	r27, r0
 314:	a1 1d       	adc	r26, r1
 316:	62 1f       	adc	r22, r18
 318:	73 9f       	mul	r23, r19
 31a:	b0 0d       	add	r27, r0
 31c:	a1 1d       	adc	r26, r1
 31e:	62 1f       	adc	r22, r18
 320:	83 9f       	mul	r24, r19
 322:	a0 0d       	add	r26, r0
 324:	61 1d       	adc	r22, r1
 326:	22 1f       	adc	r18, r18
 328:	74 9f       	mul	r23, r20
 32a:	33 27       	eor	r19, r19
 32c:	a0 0d       	add	r26, r0
 32e:	61 1d       	adc	r22, r1
 330:	23 1f       	adc	r18, r19
 332:	84 9f       	mul	r24, r20
 334:	60 0d       	add	r22, r0
 336:	21 1d       	adc	r18, r1
 338:	82 2f       	mov	r24, r18
 33a:	76 2f       	mov	r23, r22
 33c:	6a 2f       	mov	r22, r26
 33e:	11 24       	eor	r1, r1
 340:	9f 57       	subi	r25, 0x7F	; 127
 342:	50 40       	sbci	r21, 0x00	; 0
 344:	9a f0       	brmi	.+38     	; 0x36c <__mulsf3_pse+0x88>
 346:	f1 f0       	breq	.+60     	; 0x384 <__mulsf3_pse+0xa0>
 348:	88 23       	and	r24, r24
 34a:	4a f0       	brmi	.+18     	; 0x35e <__mulsf3_pse+0x7a>
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	bb 1f       	adc	r27, r27
 352:	66 1f       	adc	r22, r22
 354:	77 1f       	adc	r23, r23
 356:	88 1f       	adc	r24, r24
 358:	91 50       	subi	r25, 0x01	; 1
 35a:	50 40       	sbci	r21, 0x00	; 0
 35c:	a9 f7       	brne	.-22     	; 0x348 <__mulsf3_pse+0x64>
 35e:	9e 3f       	cpi	r25, 0xFE	; 254
 360:	51 05       	cpc	r21, r1
 362:	80 f0       	brcs	.+32     	; 0x384 <__mulsf3_pse+0xa0>
 364:	0c 94 c9 01 	jmp	0x392	; 0x392 <__fp_inf>
 368:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <__fp_szero>
 36c:	5f 3f       	cpi	r21, 0xFF	; 255
 36e:	e4 f3       	brlt	.-8      	; 0x368 <__mulsf3_pse+0x84>
 370:	98 3e       	cpi	r25, 0xE8	; 232
 372:	d4 f3       	brlt	.-12     	; 0x368 <__mulsf3_pse+0x84>
 374:	86 95       	lsr	r24
 376:	77 95       	ror	r23
 378:	67 95       	ror	r22
 37a:	b7 95       	ror	r27
 37c:	f7 95       	ror	r31
 37e:	e7 95       	ror	r30
 380:	9f 5f       	subi	r25, 0xFF	; 255
 382:	c1 f7       	brne	.-16     	; 0x374 <__mulsf3_pse+0x90>
 384:	fe 2b       	or	r31, r30
 386:	88 0f       	add	r24, r24
 388:	91 1d       	adc	r25, r1
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	97 f9       	bld	r25, 7
 390:	08 95       	ret

00000392 <__fp_inf>:
 392:	97 f9       	bld	r25, 7
 394:	9f 67       	ori	r25, 0x7F	; 127
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	08 95       	ret

0000039e <__fp_nan>:
 39e:	9f ef       	ldi	r25, 0xFF	; 255
 3a0:	80 ec       	ldi	r24, 0xC0	; 192
 3a2:	08 95       	ret

000003a4 <__fp_pscA>:
 3a4:	00 24       	eor	r0, r0
 3a6:	0a 94       	dec	r0
 3a8:	16 16       	cp	r1, r22
 3aa:	17 06       	cpc	r1, r23
 3ac:	18 06       	cpc	r1, r24
 3ae:	09 06       	cpc	r0, r25
 3b0:	08 95       	ret

000003b2 <__fp_pscB>:
 3b2:	00 24       	eor	r0, r0
 3b4:	0a 94       	dec	r0
 3b6:	12 16       	cp	r1, r18
 3b8:	13 06       	cpc	r1, r19
 3ba:	14 06       	cpc	r1, r20
 3bc:	05 06       	cpc	r0, r21
 3be:	08 95       	ret

000003c0 <__fp_round>:
 3c0:	09 2e       	mov	r0, r25
 3c2:	03 94       	inc	r0
 3c4:	00 0c       	add	r0, r0
 3c6:	11 f4       	brne	.+4      	; 0x3cc <__fp_round+0xc>
 3c8:	88 23       	and	r24, r24
 3ca:	52 f0       	brmi	.+20     	; 0x3e0 <__fp_round+0x20>
 3cc:	bb 0f       	add	r27, r27
 3ce:	40 f4       	brcc	.+16     	; 0x3e0 <__fp_round+0x20>
 3d0:	bf 2b       	or	r27, r31
 3d2:	11 f4       	brne	.+4      	; 0x3d8 <__fp_round+0x18>
 3d4:	60 ff       	sbrs	r22, 0
 3d6:	04 c0       	rjmp	.+8      	; 0x3e0 <__fp_round+0x20>
 3d8:	6f 5f       	subi	r22, 0xFF	; 255
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f 4f       	sbci	r24, 0xFF	; 255
 3de:	9f 4f       	sbci	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
