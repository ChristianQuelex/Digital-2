
Postlab-1- digital2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000336  000003ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800110  00800110  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009af  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079a  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004e0  00000000  00000000  000015fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f4  00000000  00000000  00002076  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000236a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_3>
  10:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  9e:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initPCINT0>:
//************************************************************
//                 Interrupciones (mejoradas con debounce)
//************************************************************

void initPCINT0(void) {
    PCICR |= (1 << PCIE0);
  a6:	e8 e6       	ldi	r30, 0x68	; 104
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
    PCMSK0 |= (1 << PCINT4);  // PB4
  b0:	eb e6       	ldi	r30, 0x6B	; 107
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <initPCINT1>:
}

void initPCINT1(void) {
    PCICR |= (1 << PCIE1);
  bc:	e8 e6       	ldi	r30, 0x68	; 104
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	80 83       	st	Z, r24
    PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);  // PC4 y PC5
  c6:	ec e6       	ldi	r30, 0x6C	; 108
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	80 83       	st	Z, r24
  d0:	08 95       	ret

000000d2 <main>:

void initPCINT0(void);
void initPCINT1(void);

int main(void) {
    cli();
  d2:	f8 94       	cli
    initDisplayPorts();  // Nombre corregido
  d4:	0e 94 6d 01 	call	0x2da	; 0x2da <initDisplayPorts>

    // Configuración de puertos (orden correcto: DDR -> PORT)
    DDRB = 0x0F;        // PB0-PB3 como salidas, PB4-PB7 como entradas
  d8:	9f e0       	ldi	r25, 0x0F	; 15
  da:	94 b9       	out	0x04, r25	; 4
    PORTB |= (1 << PB4); // Pull-up en PB4
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	80 61       	ori	r24, 0x10	; 16
  e0:	85 b9       	out	0x05, r24	; 5

    DDRC = 0x0F;        // PC0-PC3 como salidas, PC4-PC7 como entradas
  e2:	97 b9       	out	0x07, r25	; 7
    PORTC |= (1 << PC4) | (1 << PC5); // Pull-ups en PC4 y PC5
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	80 63       	ori	r24, 0x30	; 48
  e8:	88 b9       	out	0x08, r24	; 8

    initPCINT0();
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <initPCINT0>
    initPCINT1();
  ee:	0e 94 5e 00 	call	0xbc	; 0xbc <initPCINT1>
    sei();
  f2:	78 94       	sei

    while (1) {
        if (start == 1) { // Cuenta regresiva
  f4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start>
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x22>
  fc:	0e c0       	rjmp	.+28     	; 0x11a <main+0x48>
            for (uint8_t i = 5; i > 0; i--) {
                display(i);
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 73 01 	call	0x2e6	; 0x2e6 <display>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	83 ed       	ldi	r24, 0xD3	; 211
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x38>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x42>
 114:	00 00       	nop
    initPCINT1();
    sei();

    while (1) {
        if (start == 1) { // Cuenta regresiva
            for (uint8_t i = 5; i > 0; i--) {
 116:	c1 50       	subi	r28, 0x01	; 1
 118:	01 c0       	rjmp	.+2      	; 0x11c <main+0x4a>
 11a:	c5 e0       	ldi	r28, 0x05	; 5
 11c:	c1 11       	cpse	r28, r1
 11e:	ef cf       	rjmp	.-34     	; 0xfe <main+0x2c>
                display(i);
                _delay_ms(1000);
            }
            display(0);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 73 01 	call	0x2e6	; 0x2e6 <display>
            start = 2;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <start>
 12c:	e3 cf       	rjmp	.-58     	; 0xf4 <main+0x22>

0000012e <__vector_3>:
void initPCINT1(void) {
    PCICR |= (1 << PCIE1);
    PCMSK1 |= (1 << PCINT12) | (1 << PCINT13);  // PC4 y PC5
}

ISR(PCINT0_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <__vector_3+0x28>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <__vector_3+0x32>
 160:	00 00       	nop
    _delay_ms(20);  // Debounce básico
    if (!(PINB & (1 << PB4)) && (block == 0) && (start == 2)) {
 162:	1c 99       	sbic	0x03, 4	; 3
 164:	39 c0       	rjmp	.+114    	; 0x1d8 <__vector_3+0xaa>
 166:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 16a:	81 11       	cpse	r24, r1
 16c:	35 c0       	rjmp	.+106    	; 0x1d8 <__vector_3+0xaa>
 16e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	89 f5       	brne	.+98     	; 0x1d8 <__vector_3+0xaa>
        PORTC &= 0xF0;
 176:	88 b1       	in	r24, 0x08	; 8
 178:	80 7f       	andi	r24, 0xF0	; 240
 17a:	88 b9       	out	0x08, r24	; 8
        counter1++;
 17c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter1>
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <counter1>
        shift1 = (counter1 - 1) % 4;  // Limita a 0-3
 186:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <counter1>
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	83 70       	andi	r24, 0x03	; 3
 190:	90 78       	andi	r25, 0x80	; 128
 192:	99 23       	and	r25, r25
 194:	24 f4       	brge	.+8      	; 0x19e <__vector_3+0x70>
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	8c 6f       	ori	r24, 0xFC	; 252
 19a:	9f 6f       	ori	r25, 0xFF	; 255
 19c:	01 96       	adiw	r24, 0x01	; 1
 19e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <shift1>
        PORTC |= (1 << shift1);
 1a2:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <shift1>
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <__vector_3+0x82>
 1ac:	88 0f       	add	r24, r24
 1ae:	99 1f       	adc	r25, r25
 1b0:	2a 95       	dec	r18
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <__vector_3+0x7e>
 1b4:	98 b1       	in	r25, 0x08	; 8
 1b6:	89 2b       	or	r24, r25
 1b8:	88 b9       	out	0x08, r24	; 8

        if (shift1 == 3) {  // Si llega al final
 1ba:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <shift1>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	59 f4       	brne	.+22     	; 0x1d8 <__vector_3+0xaa>
            block = 1;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
            display(1);
 1c8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <display>
            PORTC |= 0x0F;
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	8f 60       	ori	r24, 0x0F	; 15
 1d0:	88 b9       	out	0x08, r24	; 8
            PORTB &= 0xF0;
 1d2:	85 b1       	in	r24, 0x05	; 5
 1d4:	80 7f       	andi	r24, 0xF0	; 240
 1d6:	85 b9       	out	0x05, r24	; 5
        }
    }
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_4>:

ISR(PCINT1_vect) {
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	89 ef       	ldi	r24, 0xF9	; 249
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <__vector_4+0x28>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__vector_4+0x32>
 22c:	00 00       	nop
    _delay_ms(20);  // Debounce básico
    
    // Botón de inicio (PC4)
    if (!(PINC & (1 << PC4)) && (start == 0)) {
 22e:	34 99       	sbic	0x06, 4	; 6
 230:	07 c0       	rjmp	.+14     	; 0x240 <__vector_4+0x46>
 232:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start>
 236:	81 11       	cpse	r24, r1
 238:	03 c0       	rjmp	.+6      	; 0x240 <__vector_4+0x46>
        start = 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <start>
    }
    
    // Botón del jugador 2 (PC5)
    if (!(PINC & (1 << PC5)) && (block == 0) && (start == 2)) {
 240:	35 99       	sbic	0x06, 5	; 6
 242:	3a c0       	rjmp	.+116    	; 0x2b8 <__vector_4+0xbe>
 244:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 248:	81 11       	cpse	r24, r1
 24a:	36 c0       	rjmp	.+108    	; 0x2b8 <__vector_4+0xbe>
 24c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <start>
 250:	82 30       	cpi	r24, 0x02	; 2
 252:	91 f5       	brne	.+100    	; 0x2b8 <__vector_4+0xbe>
        PORTB &= 0xF0;
 254:	85 b1       	in	r24, 0x05	; 5
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	85 b9       	out	0x05, r24	; 5
        counter2++;
 25a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <counter2>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <counter2>
        shift2 = (counter2 - 1) % 4;  // Limita a 0-3
 264:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <counter2>
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	83 70       	andi	r24, 0x03	; 3
 26e:	90 78       	andi	r25, 0x80	; 128
 270:	99 23       	and	r25, r25
 272:	24 f4       	brge	.+8      	; 0x27c <__vector_4+0x82>
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	8c 6f       	ori	r24, 0xFC	; 252
 278:	9f 6f       	ori	r25, 0xFF	; 255
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <shift2>
        PORTB |= (1 << shift2);
 280:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <shift2>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <__vector_4+0x94>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	2a 95       	dec	r18
 290:	e2 f7       	brpl	.-8      	; 0x28a <__vector_4+0x90>
 292:	95 b1       	in	r25, 0x05	; 5
 294:	89 2b       	or	r24, r25
 296:	85 b9       	out	0x05, r24	; 5

        if (shift2 == 3) {  // Si llega al final
 298:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <shift2>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	61 f4       	brne	.+24     	; 0x2b8 <__vector_4+0xbe>
            block = 1;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
            display(2);
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <display>
            PORTB |= 0x0F;
 2ac:	85 b1       	in	r24, 0x05	; 5
 2ae:	8f 60       	ori	r24, 0x0F	; 15
 2b0:	85 b9       	out	0x05, r24	; 5
            PORTC &= 0xF0;
 2b2:	88 b1       	in	r24, 0x08	; 8
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	88 b9       	out	0x08, r24	; 8
        }
    }
 2b8:	ff 91       	pop	r31
 2ba:	ef 91       	pop	r30
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <initDisplayPorts>:

#include "display.h"  // Inclusión corregida
#include <avr/io.h>

void initDisplayPorts(void) {  // Nombre corregido
    DDRD = 0xFF;    // PORTD como salida
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	8a b9       	out	0x0a, r24	; 10
    PORTD = 0x00;   // Apagar todos los segmentos
 2de:	1b b8       	out	0x0b, r1	; 11
    UCSR0B = 0;     // Deshabilitar UART para usar los pines normales
 2e0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2e4:	08 95       	ret

000002e6 <display>:
}

void display(uint8_t digit) {
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	60 97       	sbiw	r28, 0x10	; 16
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
    const uint8_t segments[] = {
 2fa:	90 e1       	ldi	r25, 0x10	; 16
 2fc:	e0 e0       	ldi	r30, 0x00	; 0
 2fe:	f1 e0       	ldi	r31, 0x01	; 1
 300:	de 01       	movw	r26, r28
 302:	11 96       	adiw	r26, 0x01	; 1
 304:	01 90       	ld	r0, Z+
 306:	0d 92       	st	X+, r0
 308:	9a 95       	dec	r25
 30a:	e1 f7       	brne	.-8      	; 0x304 <display+0x1e>
        0x66, 0x6D, 0x7D, 0x07,  // 4-7
        0x7F, 0x6F, 0x77, 0x7C,  // 8-11
        0x39, 0x5E, 0x79, 0x71   // 12-15
    };
    
    if (digit < 16) {
 30c:	80 31       	cpi	r24, 0x10	; 16
 30e:	40 f4       	brcc	.+16     	; 0x320 <display+0x3a>
        PORTD = segments[digit];
 310:	e1 e0       	ldi	r30, 0x01	; 1
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	ec 0f       	add	r30, r28
 316:	fd 1f       	adc	r31, r29
 318:	e8 0f       	add	r30, r24
 31a:	f1 1d       	adc	r31, r1
 31c:	80 81       	ld	r24, Z
 31e:	8b b9       	out	0x0b, r24	; 11
    }
 320:	60 96       	adiw	r28, 0x10	; 16
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
