
Esclavo Ultrasonico.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb5  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaa  00000000  00000000  000016c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000933  00000000  00000000  0000216f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00002aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063f  00000000  00000000  00002c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e6  00000000  00000000  00003267  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000394d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__ctors_end>
   4:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   8:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
   c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  10:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  14:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  18:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  1c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  20:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  24:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  28:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  2c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  34:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  38:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  3c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  40:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  44:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  48:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  4c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  50:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  54:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  58:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  5c:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  60:	0c 94 c8 00 	jmp	0x190	; 0x190 <__vector_24>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__bad_interrupt>
  68:	e3 00       	.word	0x00e3	; ????
  6a:	06 01       	movw	r0, r12
  6c:	06 01       	movw	r0, r12
  6e:	06 01       	movw	r0, r12
  70:	06 01       	movw	r0, r12
  72:	06 01       	movw	r0, r12
  74:	06 01       	movw	r0, r12
  76:	06 01       	movw	r0, r12
  78:	e3 00       	.word	0x00e3	; ????
  7a:	06 01       	movw	r0, r12
  7c:	06 01       	movw	r0, r12
  7e:	06 01       	movw	r0, r12
  80:	06 01       	movw	r0, r12
  82:	06 01       	movw	r0, r12
  84:	06 01       	movw	r0, r12
  86:	06 01       	movw	r0, r12
  88:	e3 00       	.word	0x00e3	; ????
  8a:	06 01       	movw	r0, r12
  8c:	06 01       	movw	r0, r12
  8e:	06 01       	movw	r0, r12
  90:	06 01       	movw	r0, r12
  92:	06 01       	movw	r0, r12
  94:	06 01       	movw	r0, r12
  96:	06 01       	movw	r0, r12
  98:	e3 00       	.word	0x00e3	; ????
  9a:	06 01       	movw	r0, r12
  9c:	06 01       	movw	r0, r12
  9e:	06 01       	movw	r0, r12
  a0:	06 01       	movw	r0, r12
  a2:	06 01       	movw	r0, r12
  a4:	06 01       	movw	r0, r12
  a6:	06 01       	movw	r0, r12
  a8:	e7 00       	.word	0x00e7	; ????
  aa:	06 01       	movw	r0, r12
  ac:	06 01       	movw	r0, r12
  ae:	06 01       	movw	r0, r12
  b0:	06 01       	movw	r0, r12
  b2:	06 01       	movw	r0, r12
  b4:	06 01       	movw	r0, r12
  b6:	06 01       	movw	r0, r12
  b8:	06 01       	movw	r0, r12
  ba:	06 01       	movw	r0, r12
  bc:	06 01       	movw	r0, r12
  be:	06 01       	movw	r0, r12
  c0:	06 01       	movw	r0, r12
  c2:	06 01       	movw	r0, r12
  c4:	06 01       	movw	r0, r12
  c6:	06 01       	movw	r0, r12
  c8:	e7 00       	.word	0x00e7	; ????
  ca:	06 01       	movw	r0, r12
  cc:	06 01       	movw	r0, r12
  ce:	06 01       	movw	r0, r12
  d0:	06 01       	movw	r0, r12
  d2:	06 01       	movw	r0, r12
  d4:	06 01       	movw	r0, r12
  d6:	06 01       	movw	r0, r12
  d8:	06 01       	movw	r0, r12
  da:	06 01       	movw	r0, r12
  dc:	06 01       	movw	r0, r12
  de:	06 01       	movw	r0, r12
  e0:	06 01       	movw	r0, r12
  e2:	06 01       	movw	r0, r12
  e4:	06 01       	movw	r0, r12
  e6:	06 01       	movw	r0, r12
  e8:	03 01       	movw	r0, r6
  ea:	06 01       	movw	r0, r12
  ec:	06 01       	movw	r0, r12
  ee:	06 01       	movw	r0, r12
  f0:	06 01       	movw	r0, r12
  f2:	06 01       	movw	r0, r12
  f4:	06 01       	movw	r0, r12
  f6:	06 01       	movw	r0, r12
  f8:	ef 00       	.word	0x00ef	; ????
  fa:	06 01       	movw	r0, r12
  fc:	06 01       	movw	r0, r12
  fe:	06 01       	movw	r0, r12
 100:	06 01       	movw	r0, r12
 102:	06 01       	movw	r0, r12
 104:	06 01       	movw	r0, r12
 106:	06 01       	movw	r0, r12
 108:	ef 00       	.word	0x00ef	; ????
 10a:	06 01       	movw	r0, r12
 10c:	06 01       	movw	r0, r12
 10e:	06 01       	movw	r0, r12
 110:	06 01       	movw	r0, r12
 112:	06 01       	movw	r0, r12
 114:	06 01       	movw	r0, r12
 116:	06 01       	movw	r0, r12
 118:	f7 00       	.word	0x00f7	; ????
 11a:	06 01       	movw	r0, r12
 11c:	06 01       	movw	r0, r12
 11e:	06 01       	movw	r0, r12
 120:	06 01       	movw	r0, r12
 122:	06 01       	movw	r0, r12
 124:	06 01       	movw	r0, r12
 126:	06 01       	movw	r0, r12
 128:	ff 00       	.word	0x00ff	; ????
 12a:	06 01       	movw	r0, r12
 12c:	06 01       	movw	r0, r12
 12e:	06 01       	movw	r0, r12
 130:	06 01       	movw	r0, r12
 132:	06 01       	movw	r0, r12
 134:	06 01       	movw	r0, r12
 136:	06 01       	movw	r0, r12
 138:	ff 00       	.word	0x00ff	; ????

0000013a <__ctors_end>:
 13a:	11 24       	eor	r1, r1
 13c:	1f be       	out	0x3f, r1	; 63
 13e:	cf ef       	ldi	r28, 0xFF	; 255
 140:	d8 e0       	ldi	r29, 0x08	; 8
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
 146:	11 e0       	ldi	r17, 0x01	; 1
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	e6 e3       	ldi	r30, 0x36	; 54
 14e:	f5 e0       	ldi	r31, 0x05	; 5
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
 152:	05 90       	lpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	a4 30       	cpi	r26, 0x04	; 4
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	a4 e0       	ldi	r26, 0x04	; 4
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	a6 30       	cpi	r26, 0x06	; 6
 168:	b2 07       	cpc	r27, r18
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	0e 94 11 01 	call	0x222	; 0x222 <main>
 170:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

00000174 <__bad_interrupt>:
 174:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000178 <I2C_Slave_Init>:
// Implementación MODO ESCLAVO
// ============================================
void I2C_Slave_Init(uint8_t address)
{
	// Dirección de esclavo (7 bits) en TWAR
	TWAR = (address << 1);
 178:	88 0f       	add	r24, r24
 17a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

	// Habilitar TWI con ACK y su interrupción
	TWCR = (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 17e:	85 e4       	ldi	r24, 0x45	; 69
 180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// Valor por defecto del dato a enviar
	I2C_SlaveData    = 0;
 184:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <I2C_SlaveData>
	I2C_LastReceived = 0;
 188:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>

	// Habilitar interrupciones globales
	sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <__vector_24>:
}

// ISR de TWI para manejar eventos como esclavo
ISR(TWI_vect)
{
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	}
}

static inline uint8_t i2c_status(void)
{
	return (TWSR & 0xF8);
 1a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 1aa:	e8 2f       	mov	r30, r24
 1ac:	e8 7f       	andi	r30, 0xF8	; 248
}

// ISR de TWI para manejar eventos como esclavo
ISR(TWI_vect)
{
	switch (i2c_status())
 1ae:	8e 2f       	mov	r24, r30
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	e0 56       	subi	r30, 0x60	; 96
 1b6:	f1 09       	sbc	r31, r1
 1b8:	e9 36       	cpi	r30, 0x69	; 105
 1ba:	f1 05       	cpc	r31, r1
 1bc:	38 f5       	brcc	.+78     	; 0x20c <__vector_24+0x7c>
 1be:	ec 5c       	subi	r30, 0xCC	; 204
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	0c 94 84 02 	jmp	0x508	; 0x508 <__tablejump2__>
		case 0x60:  // Own SLA+W received; ACK returned
		case 0x68:  // Arbitration lost; own SLA+W received; ACK returned
		case 0x70:  // General call received; ACK returned
		case 0x78:  // Arbitration lost; general call received; ACK returned
		// Preparar a recibir datos del maestro
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1c6:	85 ec       	ldi	r24, 0xC5	; 197
 1c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1cc:	1f c0       	rjmp	.+62     	; 0x20c <__vector_24+0x7c>

		// ---------- Dato recibido (SLA+W), ACK ----------
		case 0x80:  // Data received; ACK returned (addressed)
		case 0x90:  // Data received; ACK returned (general call)
		I2C_LastReceived = TWDR; // Guardar lo que el maestro envió
 1ce:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
		// Seguir aceptando más datos
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1d6:	85 ec       	ldi	r24, 0xC5	; 197
 1d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1dc:	17 c0       	rjmp	.+46     	; 0x20c <__vector_24+0x7c>

		// ---------- SLA+R recibido, ACK ----------
		case 0xA8:  // Own SLA+R received; ACK returned
		case 0xB0:  // Arbitration lost; own SLA+R received; ACK returned
		TWDR = I2C_SlaveData;  // Cargar el dato a enviar
 1de:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SlaveData>
 1e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		// Enviar dato y seguir preparado
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1e6:	85 ec       	ldi	r24, 0xC5	; 197
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1ec:	0f c0       	rjmp	.+30     	; 0x20c <__vector_24+0x7c>

		// ---------- Dato transmitido, maestro ACK ----------
		case 0xB8:  // Data transmitted; ACK received
		// Puedes mantener el mismo dato, o actualizarlo aquí si quieres streaming
		TWDR = I2C_SlaveData;
 1ee:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <I2C_SlaveData>
 1f2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1f6:	85 ec       	ldi	r24, 0xC5	; 197
 1f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 1fc:	07 c0       	rjmp	.+14     	; 0x20c <__vector_24+0x7c>

		// ---------- Dato transmitido, maestro NACK ----------
		case 0xC0:  // Data transmitted; NACK received
		case 0xC8:  // Last data transmitted; ACK received (shouldn't happen often)
		// Listo para próximo ciclo
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 1fe:	85 ec       	ldi	r24, 0xC5	; 197
 200:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
 204:	03 c0       	rjmp	.+6      	; 0x20c <__vector_24+0x7c>

		// ---------- STOP/repeated START recibido ----------
		case 0xA0:  // STOP or repeated START condition received
		// Continuar a la espera de nueva dirección
		TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA) | (1<<TWIE);
 206:	85 ec       	ldi	r24, 0xC5	; 197
 208:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;

		// ---------- Default: reset flags -}
	}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	0f 90       	pop	r0
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	0f 90       	pop	r0
 21e:	1f 90       	pop	r1
 220:	18 95       	reti

00000222 <main>:
/* Comandos recibidos por I2C (último byte escrito por el maestro) */
#define SERVO_CMD_ON   0xA1   // override ON  -> forzar SERVO_NEAR_DEG
#define SERVO_CMD_OFF  0xA0   // override OFF -> comportamiento normal

/* LED estado: A0 (PC0) */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
 222:	87 b1       	in	r24, 0x07	; 7
 224:	81 60       	ori	r24, 0x01	; 1
 226:	87 b9       	out	0x07, r24	; 7
 228:	88 b1       	in	r24, 0x08	; 8
 22a:	8e 7f       	andi	r24, 0xFE	; 254
 22c:	88 b9       	out	0x08, r24	; 8
int main(void)
{
	led_init();

	/* Servo en D9 (OC1A / PB1) */
	servo_init();
 22e:	0e 94 89 01 	call	0x312	; 0x312 <servo_init>
	#if USE_SERVO_CALIBRATION
	servo_set_calibration(SERVO_MIN_US, SERVO_MAX_US);
 232:	60 e6       	ldi	r22, 0x60	; 96
 234:	79 e0       	ldi	r23, 0x09	; 9
 236:	88 e5       	ldi	r24, 0x58	; 88
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	0e 94 9f 01 	call	0x33e	; 0x33e <servo_set_calibration>
	#endif
	servo_set_deg(SERVO_FAR_DEG);
 23e:	8a e5       	ldi	r24, 0x5A	; 90
 240:	0e 94 e6 01 	call	0x3cc	; 0x3cc <servo_set_deg>

	/* Inicializar I²C esclavo con dirección 0x40 (ajusta si usas otra) */
	I2C_Slave_Init(0x40);
 244:	80 e4       	ldi	r24, 0x40	; 64
 246:	0e 94 bc 00 	call	0x178	; 0x178 <I2C_Slave_Init>

	uint8_t override_active = 0;
 24a:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		/* Lee si hay override de servo desde el maestro */
		if (I2C_LastReceived == SERVO_CMD_ON) {
 24c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 250:	81 3a       	cpi	r24, 0xA1	; 161
 252:	29 f0       	breq	.+10     	; 0x25e <main+0x3c>
			override_active = 1;
			} else if (I2C_LastReceived == SERVO_CMD_OFF) {
 254:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 258:	80 3a       	cpi	r24, 0xA0	; 160
 25a:	21 f4       	brne	.+8      	; 0x264 <main+0x42>
 25c:	02 c0       	rjmp	.+4      	; 0x262 <main+0x40>
	uint8_t override_active = 0;

	while (1) {
		/* Lee si hay override de servo desde el maestro */
		if (I2C_LastReceived == SERVO_CMD_ON) {
			override_active = 1;
 25e:	11 e0       	ldi	r17, 0x01	; 1
 260:	01 c0       	rjmp	.+2      	; 0x264 <main+0x42>
			} else if (I2C_LastReceived == SERVO_CMD_OFF) {
			override_active = 0;
 262:	10 e0       	ldi	r17, 0x00	; 0
		}

		if (override_active) {
 264:	11 23       	and	r17, r17
 266:	f9 f0       	breq	.+62     	; 0x2a6 <main+0x84>
#define SERVO_CMD_ON   0xA1   // override ON  -> forzar SERVO_NEAR_DEG
#define SERVO_CMD_OFF  0xA0   // override OFF -> comportamiento normal

/* LED estado: A0 (PC0) */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_on(void)   { PORTC |= (1 << PORTC0); }
 268:	88 b1       	in	r24, 0x08	; 8
 26a:	81 60       	ori	r24, 0x01	; 1
 26c:	88 b9       	out	0x08, r24	; 8
		}

		if (override_active) {
			/* Forzar posición NEAR mientras override ON */
			led_on();
			servo_set_deg(SERVO_NEAR_DEG);
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	0e 94 e6 01 	call	0x3cc	; 0x3cc <servo_set_deg>
			I2C_SlaveData = (uint8_t)THRESHOLD_CM; // valor estable si el maestro lee distancia
 274:	89 e1       	ldi	r24, 0x19	; 25
 276:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <I2C_SlaveData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	80 e7       	ldi	r24, 0x70	; 112
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x5e>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x68>
 28a:	00 00       	nop
#define SERVO_CMD_OFF  0xA0   // override OFF -> comportamiento normal

/* LED estado: A0 (PC0) */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_on(void)   { PORTC |= (1 << PORTC0); }
static inline void led_off(void)  { PORTC &= ~(1 << PORTC0); }
 28c:	88 b1       	in	r24, 0x08	; 8
 28e:	8e 7f       	andi	r24, 0xFE	; 254
 290:	88 b9       	out	0x08, r24	; 8
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <main+0x76>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <main+0x80>
 2a2:	00 00       	nop
			servo_set_deg(SERVO_NEAR_DEG);
			I2C_SlaveData = (uint8_t)THRESHOLD_CM; // valor estable si el maestro lee distancia
			_delay_ms(50);
			led_off();
			_delay_ms(50);
			continue; // saltar control por sensor
 2a4:	d3 cf       	rjmp	.-90     	; 0x24c <main+0x2a>
		}

		/* Modo normal: control por distancia */
		int16_t d = ultrasonic_read_cm_blocking();  // no usa Timer1 internamente
 2a6:	0e 94 07 02 	call	0x40e	; 0x40e <ultrasonic_read_cm_blocking>
 2aa:	ec 01       	movw	r28, r24

		if (d >= 0) {
 2ac:	99 23       	and	r25, r25
 2ae:	0c f1       	brlt	.+66     	; 0x2f2 <main+0xd0>
#define SERVO_CMD_ON   0xA1   // override ON  -> forzar SERVO_NEAR_DEG
#define SERVO_CMD_OFF  0xA0   // override OFF -> comportamiento normal

/* LED estado: A0 (PC0) */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_on(void)   { PORTC |= (1 << PORTC0); }
 2b0:	88 b1       	in	r24, 0x08	; 8
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	88 b9       	out	0x08, r24	; 8
		int16_t d = ultrasonic_read_cm_blocking();  // no usa Timer1 internamente

		if (d >= 0) {
			led_on();

			if (d < THRESHOLD_CM) {
 2b6:	c9 31       	cpi	r28, 0x19	; 25
 2b8:	d1 05       	cpc	r29, r1
 2ba:	24 f4       	brge	.+8      	; 0x2c4 <main+0xa2>
				servo_set_deg(SERVO_NEAR_DEG);
 2bc:	84 e1       	ldi	r24, 0x14	; 20
 2be:	0e 94 e6 01 	call	0x3cc	; 0x3cc <servo_set_deg>
 2c2:	03 c0       	rjmp	.+6      	; 0x2ca <main+0xa8>
				} else {
				servo_set_deg(SERVO_FAR_DEG);
 2c4:	8a e5       	ldi	r24, 0x5A	; 90
 2c6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <servo_set_deg>
			}

			uint8_t d8 = (d > 255) ? 255 : (uint8_t)d;
 2ca:	cf 3f       	cpi	r28, 0xFF	; 255
 2cc:	d1 05       	cpc	r29, r1
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <main+0xb2>
 2d0:	0c f0       	brlt	.+2      	; 0x2d4 <main+0xb2>
 2d2:	cf ef       	ldi	r28, 0xFF	; 255
			I2C_SlaveData = d8;
 2d4:	c0 93 05 01 	sts	0x0105, r28	; 0x800105 <I2C_SlaveData>
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	86 e7       	ldi	r24, 0x76	; 118
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	21 50       	subi	r18, 0x01	; 1
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	90 40       	sbci	r25, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0xbc>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0xc6>
 2e8:	00 00       	nop
#define SERVO_CMD_OFF  0xA0   // override OFF -> comportamiento normal

/* LED estado: A0 (PC0) */
static inline void led_init(void) { DDRC |= (1 << DDC0); PORTC &= ~(1 << PORTC0); }
static inline void led_on(void)   { PORTC |= (1 << PORTC0); }
static inline void led_off(void)  { PORTC &= ~(1 << PORTC0); }
 2ea:	88 b1       	in	r24, 0x08	; 8
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	88 b9       	out	0x08, r24	; 8
 2f0:	06 c0       	rjmp	.+12     	; 0x2fe <main+0xdc>
 2f2:	88 b1       	in	r24, 0x08	; 8
 2f4:	8e 7f       	andi	r24, 0xFE	; 254
 2f6:	88 b9       	out	0x08, r24	; 8

			_delay_ms(30);
			led_off();
			} else {
			led_off();
			servo_set_deg(SERVO_FAR_DEG);
 2f8:	8a e5       	ldi	r24, 0x5A	; 90
 2fa:	0e 94 e6 01 	call	0x3cc	; 0x3cc <servo_set_deg>
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	8a e6       	ldi	r24, 0x6A	; 106
 302:	93 e0       	ldi	r25, 0x03	; 3
 304:	21 50       	subi	r18, 0x01	; 1
 306:	80 40       	sbci	r24, 0x00	; 0
 308:	90 40       	sbci	r25, 0x00	; 0
 30a:	e1 f7       	brne	.-8      	; 0x304 <main+0xe2>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <main+0xec>
 30e:	00 00       	nop
 310:	9d cf       	rjmp	.-198    	; 0x24c <main+0x2a>

00000312 <servo_init>:
 312:	84 b1       	in	r24, 0x04	; 4
 314:	82 60       	ori	r24, 0x02	; 2
 316:	84 b9       	out	0x04, r24	; 4
 318:	82 e8       	ldi	r24, 0x82	; 130
 31a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 31e:	8a e1       	ldi	r24, 0x1A	; 26
 320:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 324:	8f e3       	ldi	r24, 0x3F	; 63
 326:	9c e9       	ldi	r25, 0x9C	; 156
 328:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 32c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 330:	88 eb       	ldi	r24, 0xB8	; 184
 332:	9b e0       	ldi	r25, 0x0B	; 11
 334:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 338:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 33c:	08 95       	ret

0000033e <servo_set_calibration>:
 33e:	84 3f       	cpi	r24, 0xF4	; 244
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	92 07       	cpc	r25, r18
 344:	10 f4       	brcc	.+4      	; 0x34a <servo_set_calibration+0xc>
 346:	84 ef       	ldi	r24, 0xF4	; 244
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	65 3c       	cpi	r22, 0xC5	; 197
 34c:	29 e0       	ldi	r18, 0x09	; 9
 34e:	72 07       	cpc	r23, r18
 350:	10 f0       	brcs	.+4      	; 0x356 <servo_set_calibration+0x18>
 352:	64 ec       	ldi	r22, 0xC4	; 196
 354:	79 e0       	ldi	r23, 0x09	; 9
 356:	86 17       	cp	r24, r22
 358:	97 07       	cpc	r25, r23
 35a:	20 f0       	brcs	.+8      	; 0x364 <servo_set_calibration+0x26>
 35c:	60 ed       	ldi	r22, 0xD0	; 208
 35e:	77 e0       	ldi	r23, 0x07	; 7
 360:	88 ee       	ldi	r24, 0xE8	; 232
 362:	93 e0       	ldi	r25, 0x03	; 3
 364:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <g_min_us+0x1>
 368:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <g_min_us>
 36c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 370:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 374:	08 95       	ret

00000376 <servo_set_us>:
 376:	84 3f       	cpi	r24, 0xF4	; 244
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	92 07       	cpc	r25, r18
 37c:	10 f4       	brcc	.+4      	; 0x382 <servo_set_us+0xc>
 37e:	84 ef       	ldi	r24, 0xF4	; 244
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	85 3c       	cpi	r24, 0xC5	; 197
 384:	29 e0       	ldi	r18, 0x09	; 9
 386:	92 07       	cpc	r25, r18
 388:	10 f0       	brcs	.+4      	; 0x38e <servo_set_us+0x18>
 38a:	84 ec       	ldi	r24, 0xC4	; 196
 38c:	99 e0       	ldi	r25, 0x09	; 9
 38e:	a0 e0       	ldi	r26, 0x00	; 0
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	88 3e       	cpi	r24, 0xE8	; 232
 39c:	23 e0       	ldi	r18, 0x03	; 3
 39e:	92 07       	cpc	r25, r18
 3a0:	a1 05       	cpc	r26, r1
 3a2:	b1 05       	cpc	r27, r1
 3a4:	20 f4       	brcc	.+8      	; 0x3ae <servo_set_us+0x38>
 3a6:	88 ee       	ldi	r24, 0xE8	; 232
 3a8:	93 e0       	ldi	r25, 0x03	; 3
 3aa:	a0 e0       	ldi	r26, 0x00	; 0
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	89 38       	cpi	r24, 0x89	; 137
 3b0:	23 e1       	ldi	r18, 0x13	; 19
 3b2:	92 07       	cpc	r25, r18
 3b4:	a1 05       	cpc	r26, r1
 3b6:	b1 05       	cpc	r27, r1
 3b8:	20 f0       	brcs	.+8      	; 0x3c2 <servo_set_us+0x4c>
 3ba:	88 e8       	ldi	r24, 0x88	; 136
 3bc:	93 e1       	ldi	r25, 0x13	; 19
 3be:	a0 e0       	ldi	r26, 0x00	; 0
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3ca:	08 95       	ret

000003cc <servo_set_deg>:
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	85 3b       	cpi	r24, 0xB5	; 181
 3d2:	08 f0       	brcs	.+2      	; 0x3d6 <servo_set_deg+0xa>
 3d4:	84 eb       	ldi	r24, 0xB4	; 180
 3d6:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <g_min_us>
 3da:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <g_min_us+0x1>
 3de:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3e2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3e6:	2c 1b       	sub	r18, r28
 3e8:	3d 0b       	sbc	r19, r29
 3ea:	a8 2f       	mov	r26, r24
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	0e 94 8a 02 	call	0x514	; 0x514 <__umulhisi3>
 3f2:	24 eb       	ldi	r18, 0xB4	; 180
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	40 e0       	ldi	r20, 0x00	; 0
 3f8:	50 e0       	ldi	r21, 0x00	; 0
 3fa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodsi4>
 3fe:	ce 01       	movw	r24, r28
 400:	82 0f       	add	r24, r18
 402:	93 1f       	adc	r25, r19
 404:	0e 94 bb 01 	call	0x376	; 0x376 <servo_set_us>
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <ultrasonic_read_cm_blocking>:
 40e:	8a b1       	in	r24, 0x0a	; 10
 410:	80 62       	ori	r24, 0x20	; 32
 412:	8a b9       	out	0x0a, r24	; 10
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	8f 7b       	andi	r24, 0xBF	; 191
 418:	8a b9       	out	0x0a, r24	; 10
 41a:	8b b1       	in	r24, 0x0b	; 11
 41c:	8f 7d       	andi	r24, 0xDF	; 223
 41e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 420:	00 c0       	rjmp	.+0      	; 0x422 <ultrasonic_read_cm_blocking+0x14>
 422:	00 c0       	rjmp	.+0      	; 0x424 <ultrasonic_read_cm_blocking+0x16>
 424:	00 00       	nop
 426:	8b b1       	in	r24, 0x0b	; 11
 428:	80 62       	ori	r24, 0x20	; 32
 42a:	8b b9       	out	0x0b, r24	; 11
 42c:	23 e0       	ldi	r18, 0x03	; 3
 42e:	2a 95       	dec	r18
 430:	f1 f7       	brne	.-4      	; 0x42e <ultrasonic_read_cm_blocking+0x20>
 432:	00 00       	nop
 434:	8b b1       	in	r24, 0x0b	; 11
 436:	8f 7d       	andi	r24, 0xDF	; 223
 438:	8b b9       	out	0x0b, r24	; 11
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	dc 01       	movw	r26, r24
 440:	0a c0       	rjmp	.+20     	; 0x456 <ultrasonic_read_cm_blocking+0x48>
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	a1 1d       	adc	r26, r1
 446:	b1 1d       	adc	r27, r1
 448:	88 3a       	cpi	r24, 0xA8	; 168
 44a:	61 e6       	ldi	r22, 0x61	; 97
 44c:	96 07       	cpc	r25, r22
 44e:	a1 05       	cpc	r26, r1
 450:	b1 05       	cpc	r27, r1
 452:	60 f5       	brcc	.+88     	; 0x4ac <ultrasonic_read_cm_blocking+0x9e>
 454:	00 00       	nop
 456:	4e 9b       	sbis	0x09, 6	; 9
 458:	f4 cf       	rjmp	.-24     	; 0x442 <ultrasonic_read_cm_blocking+0x34>
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	dc 01       	movw	r26, r24
 460:	0a c0       	rjmp	.+20     	; 0x476 <ultrasonic_read_cm_blocking+0x68>
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	a1 1d       	adc	r26, r1
 466:	b1 1d       	adc	r27, r1
 468:	89 3a       	cpi	r24, 0xA9	; 169
 46a:	21 e6       	ldi	r18, 0x61	; 97
 46c:	92 07       	cpc	r25, r18
 46e:	a1 05       	cpc	r26, r1
 470:	b1 05       	cpc	r27, r1
 472:	f8 f4       	brcc	.+62     	; 0x4b2 <ultrasonic_read_cm_blocking+0xa4>
 474:	00 00       	nop
 476:	4e 99       	sbic	0x09, 6	; 9
 478:	f4 cf       	rjmp	.-24     	; 0x462 <ultrasonic_read_cm_blocking+0x54>
 47a:	86 39       	cpi	r24, 0x96	; 150
 47c:	91 05       	cpc	r25, r1
 47e:	a1 05       	cpc	r26, r1
 480:	b1 05       	cpc	r27, r1
 482:	d0 f0       	brcs	.+52     	; 0x4b8 <ultrasonic_read_cm_blocking+0xaa>
 484:	bc 01       	movw	r22, r24
 486:	cd 01       	movw	r24, r26
 488:	2a e3       	ldi	r18, 0x3A	; 58
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodsi4>
 494:	da 01       	movw	r26, r20
 496:	c9 01       	movw	r24, r18
 498:	02 97       	sbiw	r24, 0x02	; 2
 49a:	a1 09       	sbc	r26, r1
 49c:	b1 09       	sbc	r27, r1
 49e:	8f 38       	cpi	r24, 0x8F	; 143
 4a0:	91 40       	sbci	r25, 0x01	; 1
 4a2:	a1 05       	cpc	r26, r1
 4a4:	b1 05       	cpc	r27, r1
 4a6:	58 f4       	brcc	.+22     	; 0x4be <ultrasonic_read_cm_blocking+0xb0>
 4a8:	c9 01       	movw	r24, r18
 4aa:	08 95       	ret
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	9f ef       	ldi	r25, 0xFF	; 255
 4b0:	08 95       	ret
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	9f ef       	ldi	r25, 0xFF	; 255
 4b6:	08 95       	ret
 4b8:	8f ef       	ldi	r24, 0xFF	; 255
 4ba:	9f ef       	ldi	r25, 0xFF	; 255
 4bc:	08 95       	ret
 4be:	8f ef       	ldi	r24, 0xFF	; 255
 4c0:	9f ef       	ldi	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__udivmodsi4>:
 4c4:	a1 e2       	ldi	r26, 0x21	; 33
 4c6:	1a 2e       	mov	r1, r26
 4c8:	aa 1b       	sub	r26, r26
 4ca:	bb 1b       	sub	r27, r27
 4cc:	fd 01       	movw	r30, r26
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__udivmodsi4_ep>

000004d0 <__udivmodsi4_loop>:
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	ee 1f       	adc	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	a2 17       	cp	r26, r18
 4da:	b3 07       	cpc	r27, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__udivmodsi4_ep>
 4e2:	a2 1b       	sub	r26, r18
 4e4:	b3 0b       	sbc	r27, r19
 4e6:	e4 0b       	sbc	r30, r20
 4e8:	f5 0b       	sbc	r31, r21

000004ea <__udivmodsi4_ep>:
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a 94       	dec	r1
 4f4:	69 f7       	brne	.-38     	; 0x4d0 <__udivmodsi4_loop>
 4f6:	60 95       	com	r22
 4f8:	70 95       	com	r23
 4fa:	80 95       	com	r24
 4fc:	90 95       	com	r25
 4fe:	9b 01       	movw	r18, r22
 500:	ac 01       	movw	r20, r24
 502:	bd 01       	movw	r22, r26
 504:	cf 01       	movw	r24, r30
 506:	08 95       	ret

00000508 <__tablejump2__>:
 508:	ee 0f       	add	r30, r30
 50a:	ff 1f       	adc	r31, r31
 50c:	05 90       	lpm	r0, Z+
 50e:	f4 91       	lpm	r31, Z
 510:	e0 2d       	mov	r30, r0
 512:	09 94       	ijmp

00000514 <__umulhisi3>:
 514:	a2 9f       	mul	r26, r18
 516:	b0 01       	movw	r22, r0
 518:	b3 9f       	mul	r27, r19
 51a:	c0 01       	movw	r24, r0
 51c:	a3 9f       	mul	r26, r19
 51e:	70 0d       	add	r23, r0
 520:	81 1d       	adc	r24, r1
 522:	11 24       	eor	r1, r1
 524:	91 1d       	adc	r25, r1
 526:	b2 9f       	mul	r27, r18
 528:	70 0d       	add	r23, r0
 52a:	81 1d       	adc	r24, r1
 52c:	11 24       	eor	r1, r1
 52e:	91 1d       	adc	r25, r1
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
