
maestro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007b7  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e6  00000000  00000000  000009cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000300  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000013b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000082  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000187e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <ADC_init>:

#include <avr/io.h>
#include <util/delay.h>

void ADC_init() {
	ADMUX |= (1 << REFS0); // AVcc como referencia
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 64       	ori	r24, 0x40	; 64
  88:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // ADC enable, prescaler 128
  8a:	ea e7       	ldi	r30, 0x7A	; 122
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	87 68       	ori	r24, 0x87	; 135
  92:	80 83       	st	Z, r24
  94:	08 95       	ret

00000096 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF8) | (channel & 0x07); // Canal ADC0 o ADC1
  96:	ec e7       	ldi	r30, 0x7C	; 124
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	98 7f       	andi	r25, 0xF8	; 248
  9e:	87 70       	andi	r24, 0x07	; 7
  a0:	89 2b       	or	r24, r25
  a2:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);
  a4:	ea e7       	ldi	r30, 0x7A	; 122
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC));
  ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b2:	86 fd       	sbrc	r24, 6
  b4:	fc cf       	rjmp	.-8      	; 0xae <ADC_read+0x18>
	return ADC;
  b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
  be:	08 95       	ret

000000c0 <SPI_Slave_init>:

void SPI_Slave_init() {
	DDRB |= (1 << DDB4); // MISO como salida
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	80 61       	ori	r24, 0x10	; 16
  c4:	84 b9       	out	0x04, r24	; 4
	SPCR |= (1 << SPE);  // Habilita SPI (modo esclavo)
  c6:	8c b5       	in	r24, 0x2c	; 44
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	8c bd       	out	0x2c, r24	; 44
  cc:	08 95       	ret

000000ce <main>:
}

int main() {
	ADC_init();
  ce:	0e 94 40 00 	call	0x80	; 0x80 <ADC_init>
	SPI_Slave_init();
  d2:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_Slave_init>
	uint16_t pot1, pot2;

	while (1) {
		pot1 = ADC_read(0); // Lee potenciómetro en PC0 (ADC0)
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_read>
  dc:	c8 2f       	mov	r28, r24
  de:	d9 2f       	mov	r29, r25
		pot2 = ADC_read(1); // Lee potenciómetro en PC1 (ADC1)
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 4b 00 	call	0x96	; 0x96 <ADC_read>

		// Envía los 4 bytes (2 por potenciómetro)
		SPDR = (pot1 >> 8) & 0xFF; // Byte alto de pot1
  e6:	de bd       	out	0x2e, r29	; 46
		while (!(SPSR & (1 << SPIF)));
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x1a>

		SPDR = pot1 & 0xFF; // Byte bajo de pot1
  ee:	ce bd       	out	0x2e, r28	; 46
		while (!(SPSR & (1 << SPIF)));
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <main+0x22>

		SPDR = (pot2 >> 8) & 0xFF; // Byte alto de pot2
  f6:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1 << SPIF)));
  f8:	0d b4       	in	r0, 0x2d	; 45
  fa:	07 fe       	sbrs	r0, 7
  fc:	fd cf       	rjmp	.-6      	; 0xf8 <main+0x2a>

		SPDR = pot2 & 0xFF; // Byte bajo de pot2
  fe:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1 << SPIF)));
 100:	0d b4       	in	r0, 0x2d	; 45
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <main+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	87 ea       	ldi	r24, 0xA7	; 167
 108:	91 e6       	ldi	r25, 0x61	; 97
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x3c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x42>
 110:	00 00       	nop
 112:	e1 cf       	rjmp	.-62     	; 0xd6 <main+0x8>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
