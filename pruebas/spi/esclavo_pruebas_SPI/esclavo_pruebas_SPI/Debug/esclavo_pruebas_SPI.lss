
esclavo_pruebas_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ef  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000722  00000000  00000000  000009ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00001121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e6  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000069  00000000  00000000  000018c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_leds>:
#include <avr/io.h>
#include <util/delay.h>
#include "spi/spi.h"

void init_leds() {
	DDRD |= 0b11111100; // PD2-PD7 como salidas
  80:	8a b1       	in	r24, 0x0a	; 10
  82:	8c 6f       	ori	r24, 0xFC	; 252
  84:	8a b9       	out	0x0a, r24	; 10
	DDRB |= 0b00000011; // PB0-PB1 como salidas
  86:	84 b1       	in	r24, 0x04	; 4
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	84 b9       	out	0x04, r24	; 4
  8c:	08 95       	ret

0000008e <show_number>:
}

void show_number(uint8_t num) {
	PORTD = (PORTD & 0b00000011) | ((num & 0b00111111) << 2); // PD2-PD7
  8e:	9b b1       	in	r25, 0x0b	; 11
  90:	28 2f       	mov	r18, r24
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	22 0f       	add	r18, r18
  9a:	33 1f       	adc	r19, r19
  9c:	93 70       	andi	r25, 0x03	; 3
  9e:	29 2b       	or	r18, r25
  a0:	2b b9       	out	0x0b, r18	; 11
	PORTB = (PORTB & 0b11111100) | ((num >> 6) & 0b00000011); // PB0-PB1
  a2:	95 b1       	in	r25, 0x05	; 5
  a4:	9c 7f       	andi	r25, 0xFC	; 252
  a6:	82 95       	swap	r24
  a8:	86 95       	lsr	r24
  aa:	86 95       	lsr	r24
  ac:	83 70       	andi	r24, 0x03	; 3
  ae:	89 2b       	or	r24, r25
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	08 95       	ret

000000b4 <main>:
}

int main() {
	spi_slave_init();
  b4:	0e 94 68 00 	call	0xd0	; 0xd0 <spi_slave_init>
	init_leds();
  b8:	0e 94 40 00 	call	0x80	; 0x80 <init_leds>
	uint8_t last_num = 0; // Almacena el último número recibido
  bc:	d0 e0       	ldi	r29, 0x00	; 0

	while (1) {
		uint8_t num = spi_slave_receive();
  be:	0e 94 6e 00 	call	0xdc	; 0xdc <spi_slave_receive>
  c2:	c8 2f       	mov	r28, r24
		if (num != last_num) { // Solo actualiza si cambió
  c4:	d8 17       	cp	r29, r24
  c6:	d9 f3       	breq	.-10     	; 0xbe <main+0xa>
			show_number(num);
  c8:	0e 94 47 00 	call	0x8e	; 0x8e <show_number>
			last_num = num;
  cc:	dc 2f       	mov	r29, r28
  ce:	f7 cf       	rjmp	.-18     	; 0xbe <main+0xa>

000000d0 <spi_slave_init>:


#include "spi.h"

void spi_slave_init() {
	DDRB |= (1 << DDB4); // MISO (D12) como salida
  d0:	84 b1       	in	r24, 0x04	; 4
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	84 b9       	out	0x04, r24	; 4
	SPCR = (1 << SPE);   // Habilita SPI (modo esclavo)
  d6:	80 e4       	ldi	r24, 0x40	; 64
  d8:	8c bd       	out	0x2c, r24	; 44
  da:	08 95       	ret

000000dc <spi_slave_receive>:
}

uint8_t spi_slave_receive() {
	while (!(SPSR & (1 << SPIF))); // Espera dato del maestro
  dc:	0d b4       	in	r0, 0x2d	; 45
  de:	07 fe       	sbrs	r0, 7
  e0:	fd cf       	rjmp	.-6      	; 0xdc <spi_slave_receive>
	return SPDR;
  e2:	8e b5       	in	r24, 0x2e	; 46
}
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
