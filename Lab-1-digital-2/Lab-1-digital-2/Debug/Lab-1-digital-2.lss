
Lab-1-digital-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000246  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000963  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b4  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b6  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  0000198c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  00001ecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000020f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__vector_3>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  9e:	0c 94 21 01 	jmp	0x242	; 0x242 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <actualizarContadores>:
	}
}

void actualizarContadores(void) {
	// Actualizar LEDs de los jugadores
	PORTB = (PORTB & 0xF0) | (jugador1 & 0x0F);
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <jugador1>
  ac:	90 7f       	andi	r25, 0xF0	; 240
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	89 2b       	or	r24, r25
  b2:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & 0xF0) | (jugador2 & 0x0F);
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  ba:	90 7f       	andi	r25, 0xF0	; 240
  bc:	8f 70       	andi	r24, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	88 b9       	out	0x08, r24	; 8
  c2:	08 95       	ret

000000c4 <__vector_3>:
}

ISR(PCINT0_vect) { // Interrupción botón inicio (PB4)
  c4:	1f 92       	push	r1
  c6:	0f 92       	push	r0
  c8:	0f b6       	in	r0, 0x3f	; 63
  ca:	0f 92       	push	r0
  cc:	11 24       	eor	r1, r1
  ce:	8f 93       	push	r24
	if(!(PINB & (1 << PB4)) && (estado == 0)) {
  d0:	1c 99       	sbic	0x03, 4	; 3
  d2:	07 c0       	rjmp	.+14     	; 0xe2 <__vector_3+0x1e>
  d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <estado>
  d8:	81 11       	cpse	r24, r1
  da:	03 c0       	rjmp	.+6      	; 0xe2 <__vector_3+0x1e>
		estado = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <estado>
	}
}
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_4>:

ISR(PCINT1_vect) { // Interrupción botones jugadores
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	if(estado == 2) {
 110:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <estado>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	71 f5       	brne	.+92     	; 0x174 <__vector_4+0x86>
		if(!(PINC & (1 << PC4))) { // Jugador 1 (PC4)
 118:	34 99       	sbic	0x06, 4	; 6
 11a:	14 c0       	rjmp	.+40     	; 0x144 <__vector_4+0x56>
			jugador1 = (jugador1 < 15) ? jugador1 + 1 : 0;
 11c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <jugador1>
 120:	8f 30       	cpi	r24, 0x0F	; 15
 122:	20 f4       	brcc	.+8      	; 0x12c <__vector_4+0x3e>
 124:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <jugador1>
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_4+0x40>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <jugador1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	83 ec       	ldi	r24, 0xC3	; 195
 136:	99 e0       	ldi	r25, 0x09	; 9
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <__vector_4+0x4a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <__vector_4+0x54>
 142:	00 00       	nop
			_delay_ms(200);
		}
		if(!(PINC & (1 << PC5))) { // Jugador 2 (PC5)
 144:	35 99       	sbic	0x06, 5	; 6
 146:	14 c0       	rjmp	.+40     	; 0x170 <__vector_4+0x82>
			jugador2 = (jugador2 < 15) ? jugador2 + 1 : 0;
 148:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 14c:	8f 30       	cpi	r24, 0x0F	; 15
 14e:	20 f4       	brcc	.+8      	; 0x158 <__vector_4+0x6a>
 150:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 154:	8f 5f       	subi	r24, 0xFF	; 255
 156:	01 c0       	rjmp	.+2      	; 0x15a <__vector_4+0x6c>
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 15e:	2f ef       	ldi	r18, 0xFF	; 255
 160:	83 ec       	ldi	r24, 0xC3	; 195
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <__vector_4+0x76>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <__vector_4+0x80>
 16e:	00 00       	nop
			_delay_ms(200);
		}
		actualizarContadores();
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <actualizarContadores>
	}
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <configurarInterrupciones>:

void configurarInterrupciones(void) {
	PCICR |= (1 << PCIE0) | (1 << PCIE1);
 196:	e8 e6       	ldi	r30, 0x68	; 104
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	83 60       	ori	r24, 0x03	; 3
 19e:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4);     // PB4
 1a0:	eb e6       	ldi	r30, 0x6B	; 107
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	80 61       	ori	r24, 0x10	; 16
 1a8:	80 83       	st	Z, r24
	PCMSK1 |= (1 << PCINT12) | (1 << PCINT13); // PC4 y PC5
 1aa:	ec e6       	ldi	r30, 0x6C	; 108
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 63       	ori	r24, 0x30	; 48
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <main>:
void configurarInterrupciones(void);
void actualizarContadores(void);

int main(void) {
	// 1. Configuración inicial
	initDislayPorts();
 1b6:	0e 94 12 01 	call	0x224	; 0x224 <initDislayPorts>
	DDRB = 0x0F;    // PB0-PB3 como salidas
 1ba:	8f e0       	ldi	r24, 0x0F	; 15
 1bc:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x0F;    // PC0-PC3 como salidas
 1be:	87 b9       	out	0x07, r24	; 7
	
	// Habilitar pull-ups para botones
	PORTB |= (1 << PB4);
 1c0:	85 b1       	in	r24, 0x05	; 5
 1c2:	80 61       	ori	r24, 0x10	; 16
 1c4:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PC4) | (1 << PC5);
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	80 63       	ori	r24, 0x30	; 48
 1ca:	88 b9       	out	0x08, r24	; 8
	
	// 2. Configurar interrupciones
	configurarInterrupciones();
 1cc:	0e 94 cb 00 	call	0x196	; 0x196 <configurarInterrupciones>
	sei();
 1d0:	78 94       	sei
	
	// 3. Bucle principal
	while(1) {
		switch(estado) {
 1d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <estado>
 1d6:	81 30       	cpi	r24, 0x01	; 1
 1d8:	89 f0       	breq	.+34     	; 0x1fc <main+0x46>
 1da:	82 30       	cpi	r24, 0x02	; 2
 1dc:	b1 f0       	breq	.+44     	; 0x20a <main+0x54>
 1de:	18 c0       	rjmp	.+48     	; 0x210 <main+0x5a>
			case 1: // Conteo regresivo
			for(uint8_t i = 5; i != 255; i--) {
				display(i);
 1e0:	8c 2f       	mov	r24, r28
 1e2:	0e 94 16 01 	call	0x22c	; 0x22c <display>
 1e6:	2f ef       	ldi	r18, 0xFF	; 255
 1e8:	83 ed       	ldi	r24, 0xD3	; 211
 1ea:	90 e3       	ldi	r25, 0x30	; 48
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x36>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x40>
 1f6:	00 00       	nop
	
	// 3. Bucle principal
	while(1) {
		switch(estado) {
			case 1: // Conteo regresivo
			for(uint8_t i = 5; i != 255; i--) {
 1f8:	c1 50       	subi	r28, 0x01	; 1
 1fa:	01 c0       	rjmp	.+2      	; 0x1fe <main+0x48>
	configurarInterrupciones();
	sei();
	
	// 3. Bucle principal
	while(1) {
		switch(estado) {
 1fc:	c5 e0       	ldi	r28, 0x05	; 5
			case 1: // Conteo regresivo
			for(uint8_t i = 5; i != 255; i--) {
 1fe:	cf 3f       	cpi	r28, 0xFF	; 255
 200:	79 f7       	brne	.-34     	; 0x1e0 <main+0x2a>
				display(i);
				_delay_ms(1000);
			}
			estado = 2; // Cambiar a estado carrera
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <estado>
			break;
 208:	e4 cf       	rjmp	.-56     	; 0x1d2 <main+0x1c>
			
			case 2: // Carrera activa
			actualizarContadores();
 20a:	0e 94 53 00 	call	0xa6	; 0xa6 <actualizarContadores>
			break;
 20e:	e1 cf       	rjmp	.-62     	; 0x1d2 <main+0x1c>
			
			default: // Sistema inactivo
			display(0);
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 16 01 	call	0x22c	; 0x22c <display>
			PORTB &= 0xF0;
 216:	85 b1       	in	r24, 0x05	; 5
 218:	80 7f       	andi	r24, 0xF0	; 240
 21a:	85 b9       	out	0x05, r24	; 5
			PORTC &= 0xF0;
 21c:	88 b1       	in	r24, 0x08	; 8
 21e:	80 7f       	andi	r24, 0xF0	; 240
 220:	88 b9       	out	0x08, r24	; 8
			break;
 222:	d7 cf       	rjmp	.-82     	; 0x1d2 <main+0x1c>

00000224 <initDislayPorts>:
	0x7F, // 8
	0x6F  // 9
};

void initDislayPorts(void) {
	DDRD = 0xFF;    // PORTD como salida
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;   // Display apagado inicialmente
 228:	1b b8       	out	0x0b, r1	; 11
 22a:	08 95       	ret

0000022c <display>:
}

void display(uint8_t dig) {
	if(dig < 10) {
 22c:	8a 30       	cpi	r24, 0x0A	; 10
 22e:	38 f4       	brcc	.+14     	; 0x23e <display+0x12>
		PORTD = digitos[dig];
 230:	e8 2f       	mov	r30, r24
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e0 50       	subi	r30, 0x00	; 0
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	80 81       	ld	r24, Z
 23a:	8b b9       	out	0x0b, r24	; 11
 23c:	08 95       	ret
		} else {
		PORTD = 0x00; // Apagar display si no es válido
 23e:	1b b8       	out	0x0b, r1	; 11
 240:	08 95       	ret

00000242 <_exit>:
 242:	f8 94       	cli

00000244 <__stop_program>:
 244:	ff cf       	rjmp	.-2      	; 0x244 <__stop_program>
