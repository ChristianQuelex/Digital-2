
Lab-2-digital2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800160  00800160  00000f58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012dc  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad4  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000adb  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00003954  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055f  00000000  00000000  00003b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000866  00000000  00000000  000040ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ba 00 	jmp	0x174	; 0x174 <__ctors_end>
   4:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   8:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
   c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  10:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  14:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  18:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  1c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  20:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  24:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  28:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  2c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  30:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  34:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  38:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  3c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  40:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  44:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  48:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_18>
  4c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  50:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  54:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__vector_21>
  58:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  5c:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  60:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  64:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <__bad_interrupt>
  68:	2e 01       	movw	r4, r28
  6a:	34 01       	movw	r6, r8
  6c:	3b 01       	movw	r6, r22
  6e:	42 01       	movw	r8, r4
  70:	49 01       	movw	r8, r18
  72:	50 01       	movw	r10, r0
  74:	57 01       	movw	r10, r14
  76:	5e 01       	movw	r10, r28
  78:	65 01       	movw	r12, r10

0000007a <__trampolines_end>:
  7a:	00 40       	sbci	r16, 0x00	; 0
  7c:	7a 10       	cpse	r7, r10
  7e:	f3 5a       	subi	r31, 0xA3	; 163
  80:	00 a0       	ldd	r0, Z+32	; 0x20
  82:	72 4e       	sbci	r23, 0xE2	; 226
  84:	18 09       	sbc	r17, r8
  86:	00 10       	cpse	r0, r0
  88:	a5 d4       	rcall	.+2378   	; 0x9d4 <dtoa_prf+0x66>
  8a:	e8 00       	.word	0x00e8	; ????
  8c:	00 e8       	ldi	r16, 0x80	; 128
  8e:	76 48       	sbci	r23, 0x86	; 134
  90:	17 00       	.word	0x0017	; ????
  92:	00 e4       	ldi	r16, 0x40	; 64
  94:	0b 54       	subi	r16, 0x4B	; 75
  96:	02 00       	.word	0x0002	; ????
  98:	00 ca       	rjmp	.-3072   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
  9a:	9a 3b       	cpi	r25, 0xBA	; 186
  9c:	00 00       	nop
  9e:	00 e1       	ldi	r16, 0x10	; 16
  a0:	f5 05       	cpc	r31, r5
  a2:	00 00       	nop
  a4:	80 96       	adiw	r24, 0x20	; 32
  a6:	98 00       	.word	0x0098	; ????
  a8:	00 00       	nop
  aa:	40 42       	sbci	r20, 0x20	; 32
  ac:	0f 00       	.word	0x000f	; ????
  ae:	00 00       	nop
  b0:	a0 86       	std	Z+8, r10	; 0x08
  b2:	01 00       	.word	0x0001	; ????
  b4:	00 00       	nop
  b6:	10 27       	eor	r17, r16
  b8:	00 00       	nop
  ba:	00 00       	nop
  bc:	e8 03       	fmulsu	r22, r16
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	64 00       	.word	0x0064	; ????
  c4:	00 00       	nop
  c6:	00 00       	nop
  c8:	0a 00       	.word	0x000a	; ????
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	01 00       	.word	0x0001	; ????
  d0:	00 00       	nop
  d2:	00 00       	nop
  d4:	2c 76       	andi	r18, 0x6C	; 108
  d6:	d8 88       	ldd	r13, Y+16	; 0x10
  d8:	dc 67       	ori	r29, 0x7C	; 124
  da:	4f 08       	sbc	r4, r15
  dc:	23 df       	rcall	.-442    	; 0xffffff24 <__eeprom_end+0xff7eff24>
  de:	c1 df       	rcall	.-126    	; 0x62 <__SREG__+0x23>
  e0:	ae 59       	subi	r26, 0x9E	; 158
  e2:	e1 b1       	in	r30, 0x01	; 1
  e4:	b7 96       	adiw	r30, 0x27	; 39
  e6:	e5 e3       	ldi	r30, 0x35	; 53
  e8:	e4 53       	subi	r30, 0x34	; 52
  ea:	c6 3a       	cpi	r28, 0xA6	; 166
  ec:	e6 51       	subi	r30, 0x16	; 22
  ee:	99 76       	andi	r25, 0x69	; 105
  f0:	96 e8       	ldi	r25, 0x86	; 134
  f2:	e6 c2       	rjmp	.+1484   	; 0x6c0 <initUART9600+0x6>
  f4:	84 26       	eor	r8, r20
  f6:	eb 89       	ldd	r30, Y+19	; 0x13
  f8:	8c 9b       	sbis	0x11, 4	; 17
  fa:	62 ed       	ldi	r22, 0xD2	; 210
  fc:	40 7c       	andi	r20, 0xC0	; 192
  fe:	6f fc       	.word	0xfc6f	; ????
 100:	ef bc       	out	0x2f, r14	; 47
 102:	9c 9f       	mul	r25, r28
 104:	40 f2       	brcs	.-112    	; 0x96 <__trampolines_end+0x1c>
 106:	ba a5       	ldd	r27, Y+42	; 0x2a
 108:	6f a5       	ldd	r22, Y+47	; 0x2f
 10a:	f4 90       	lpm	r15, Z
 10c:	05 5a       	subi	r16, 0xA5	; 165
 10e:	2a f7       	brpl	.-54     	; 0xda <__trampolines_end+0x60>
 110:	5c 93       	st	X, r21
 112:	6b 6c       	ori	r22, 0xCB	; 203
 114:	f9 67       	ori	r31, 0x79	; 121
 116:	6d c1       	rjmp	.+730    	; 0x3f2 <__vector_21+0xa>
 118:	1b fc       	.word	0xfc1b	; ????
 11a:	e0 e4       	ldi	r30, 0x40	; 64
 11c:	0d 47       	sbci	r16, 0x7D	; 125
 11e:	fe f5       	brtc	.+126    	; 0x19e <.do_clear_bss_loop>
 120:	20 e6       	ldi	r18, 0x60	; 96
 122:	b5 00       	.word	0x00b5	; ????
 124:	d0 ed       	ldi	r29, 0xD0	; 208
 126:	90 2e       	mov	r9, r16
 128:	03 00       	.word	0x0003	; ????
 12a:	94 35       	cpi	r25, 0x54	; 84
 12c:	77 05       	cpc	r23, r7
 12e:	00 80       	ld	r0, Z
 130:	84 1e       	adc	r8, r20
 132:	08 00       	.word	0x0008	; ????
 134:	00 20       	and	r0, r0
 136:	4e 0a       	sbc	r4, r30
 138:	00 00       	nop
 13a:	00 c8       	rjmp	.-4096   	; 0xfffff13c <__eeprom_end+0xff7ef13c>
 13c:	0c 33       	cpi	r16, 0x3C	; 60
 13e:	33 33       	cpi	r19, 0x33	; 51
 140:	33 0f       	add	r19, r19
 142:	98 6e       	ori	r25, 0xE8	; 232
 144:	12 83       	std	Z+2, r17	; 0x02
 146:	11 41       	sbci	r17, 0x11	; 17
 148:	ef 8d       	ldd	r30, Y+31	; 0x1f
 14a:	21 14       	cp	r2, r1
 14c:	89 3b       	cpi	r24, 0xB9	; 185
 14e:	e6 55       	subi	r30, 0x56	; 86
 150:	16 cf       	rjmp	.-468    	; 0xffffff7e <__eeprom_end+0xff7eff7e>
 152:	fe e6       	ldi	r31, 0x6E	; 110
 154:	db 18       	sub	r13, r11
 156:	d1 84       	ldd	r13, Z+9	; 0x09
 158:	4b 38       	cpi	r20, 0x8B	; 139
 15a:	1b f7       	brvc	.-58     	; 0x122 <__trampolines_end+0xa8>
 15c:	7c 1d       	adc	r23, r12
 15e:	90 1d       	adc	r25, r0
 160:	a4 bb       	out	0x14, r26	; 20
 162:	e4 24       	eor	r14, r4
 164:	20 32       	cpi	r18, 0x20	; 32
 166:	84 72       	andi	r24, 0x24	; 36
 168:	5e 22       	and	r5, r30
 16a:	81 00       	.word	0x0081	; ????
 16c:	c9 f1       	breq	.+114    	; 0x1e0 <initADC+0x2e>
 16e:	24 ec       	ldi	r18, 0xC4	; 196
 170:	a1 e5       	ldi	r26, 0x51	; 81
 172:	3d 27       	eor	r19, r29

00000174 <__ctors_end>:
 174:	11 24       	eor	r1, r1
 176:	1f be       	out	0x3f, r1	; 63
 178:	cf ef       	ldi	r28, 0xFF	; 255
 17a:	d8 e0       	ldi	r29, 0x08	; 8
 17c:	de bf       	out	0x3e, r29	; 62
 17e:	cd bf       	out	0x3d, r28	; 61

00000180 <__do_copy_data>:
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	a0 e0       	ldi	r26, 0x00	; 0
 184:	b1 e0       	ldi	r27, 0x01	; 1
 186:	e4 e6       	ldi	r30, 0x64	; 100
 188:	fe e0       	ldi	r31, 0x0E	; 14
 18a:	02 c0       	rjmp	.+4      	; 0x190 <__do_copy_data+0x10>
 18c:	05 90       	lpm	r0, Z+
 18e:	0d 92       	st	X+, r0
 190:	a0 36       	cpi	r26, 0x60	; 96
 192:	b1 07       	cpc	r27, r17
 194:	d9 f7       	brne	.-10     	; 0x18c <__do_copy_data+0xc>

00000196 <__do_clear_bss>:
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	a0 e6       	ldi	r26, 0x60	; 96
 19a:	b1 e0       	ldi	r27, 0x01	; 1
 19c:	01 c0       	rjmp	.+2      	; 0x1a0 <.do_clear_bss_start>

0000019e <.do_clear_bss_loop>:
 19e:	1d 92       	st	X+, r1

000001a0 <.do_clear_bss_start>:
 1a0:	a5 37       	cpi	r26, 0x75	; 117
 1a2:	b2 07       	cpc	r27, r18
 1a4:	e1 f7       	brne	.-8      	; 0x19e <.do_clear_bss_loop>
 1a6:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
 1aa:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

000001ae <__bad_interrupt>:
 1ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001b2 <initADC>:

#include "adc.h"

// Inicializaci?n
void initADC(void){
	ADMUX = 0;
 1b2:	ec e7       	ldi	r30, 0x7C	; 124
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	10 82       	st	Z, r1
	//Vref = AVcc = 5Vs
	ADMUX |= (1 << REFS0);
 1b8:	80 81       	ld	r24, Z
 1ba:	80 64       	ori	r24, 0x40	; 64
 1bc:	80 83       	st	Z, r24
	ADMUX &= ~(1 << REFS1);
 1be:	80 81       	ld	r24, Z
 1c0:	8f 77       	andi	r24, 0x7F	; 127
 1c2:	80 83       	st	Z, r24
		
	ADMUX |= (1 << ADLAR);	//left adjust
 1c4:	80 81       	ld	r24, Z
 1c6:	80 62       	ori	r24, 0x20	; 32
 1c8:	80 83       	st	Z, r24
		
	ADCSRA = 0;
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	10 82       	st	Z, r1
	ADCSRA |= (1 << ADEN);	//turn on ADC
 1d0:	80 81       	ld	r24, Z
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);	//interruption
 1d6:	80 81       	ld	r24, Z
 1d8:	88 60       	ori	r24, 0x08	; 8
 1da:	80 83       	st	Z, r24
		
	//prescaler 128 > 125kHz
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1dc:	80 81       	ld	r24, Z
 1de:	87 60       	ori	r24, 0x07	; 7
 1e0:	80 83       	st	Z, r24
 1e2:	08 95       	ret

000001e4 <pinADC>:
}

// Seleccionar pin para ADC, habilita los necesarios
void pinADC(uint8_t a){
	switch (a)
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c1 f0       	breq	.+48     	; 0x218 <pinADC+0x34>
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <pinADC+0x10>
 1ea:	88 23       	and	r24, r24
 1ec:	49 f0       	breq	.+18     	; 0x200 <pinADC+0x1c>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	69 f0       	breq	.+26     	; 0x20c <pinADC+0x28>
 1f2:	08 95       	ret
 1f4:	84 30       	cpi	r24, 0x04	; 4
 1f6:	e1 f0       	breq	.+56     	; 0x230 <pinADC+0x4c>
 1f8:	a8 f0       	brcs	.+42     	; 0x224 <pinADC+0x40>
 1fa:	85 30       	cpi	r24, 0x05	; 5
 1fc:	f9 f0       	breq	.+62     	; 0x23c <pinADC+0x58>
 1fe:	08 95       	ret
	{
	case 0:
	DIDR0 |= (1 << ADC0D);
 200:	ee e7       	ldi	r30, 0x7E	; 126
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	81 60       	ori	r24, 0x01	; 1
 208:	80 83       	st	Z, r24
	break;
 20a:	08 95       	ret
	
	case 1:
	DIDR0 |= (1 << ADC1D);
 20c:	ee e7       	ldi	r30, 0x7E	; 126
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
	break;
 216:	08 95       	ret
	
	case 2:
	DIDR0 |= (1 << ADC2D);
 218:	ee e7       	ldi	r30, 0x7E	; 126
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	84 60       	ori	r24, 0x04	; 4
 220:	80 83       	st	Z, r24
	break;
 222:	08 95       	ret
	
	case 3:
	DIDR0 |= (1 << ADC3D);
 224:	ee e7       	ldi	r30, 0x7E	; 126
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	88 60       	ori	r24, 0x08	; 8
 22c:	80 83       	st	Z, r24
	break;
 22e:	08 95       	ret
	
	case 4:
	DIDR0 |= (1 << ADC4D);
 230:	ee e7       	ldi	r30, 0x7E	; 126
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 61       	ori	r24, 0x10	; 16
 238:	80 83       	st	Z, r24
	break;
 23a:	08 95       	ret
	
	case 5:
	DIDR0 |= (1 << ADC5D);
 23c:	ee e7       	ldi	r30, 0x7E	; 126
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <read_channelADC>:
}


// Mostrar ADC
uint8_t read_channelADC(uint8_t channel){
	switch (channel)
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	89 30       	cpi	r24, 0x09	; 9
 24c:	91 05       	cpc	r25, r1
 24e:	08 f0       	brcs	.+2      	; 0x252 <read_channelADC+0xa>
 250:	42 c0       	rjmp	.+132    	; 0x2d6 <read_channelADC+0x8e>
 252:	fc 01       	movw	r30, r24
 254:	ec 5c       	subi	r30, 0xCC	; 204
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	0c 94 77 04 	jmp	0x8ee	; 0x8ee <__tablejump2__>
	{
	case 0:
	ADMUX = (ADMUX & 0xF0); // mantiene los primeros 4 bits de config y setea canal de conversi?n
 25c:	ec e7       	ldi	r30, 0x7C	; 124
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	80 7f       	andi	r24, 0xF0	; 240
 264:	80 83       	st	Z, r24
	break;
 266:	37 c0       	rjmp	.+110    	; 0x2d6 <read_channelADC+0x8e>
	
	case 1:
	ADMUX = (ADMUX & 0xF0) | 0x01;
 268:	ec e7       	ldi	r30, 0x7C	; 124
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	81 60       	ori	r24, 0x01	; 1
 272:	80 83       	st	Z, r24
	break;
 274:	30 c0       	rjmp	.+96     	; 0x2d6 <read_channelADC+0x8e>
	
	case 2:
	ADMUX = (ADMUX & 0xF0) | 0x02;
 276:	ec e7       	ldi	r30, 0x7C	; 124
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 7f       	andi	r24, 0xF0	; 240
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
	break;
 282:	29 c0       	rjmp	.+82     	; 0x2d6 <read_channelADC+0x8e>
	
	case 3:
	ADMUX = (ADMUX & 0xF0) | 0x03;
 284:	ec e7       	ldi	r30, 0x7C	; 124
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	80 7f       	andi	r24, 0xF0	; 240
 28c:	83 60       	ori	r24, 0x03	; 3
 28e:	80 83       	st	Z, r24
	break;
 290:	22 c0       	rjmp	.+68     	; 0x2d6 <read_channelADC+0x8e>
	
	case 4:
	ADMUX = (ADMUX & 0xF0) | 0x04;
 292:	ec e7       	ldi	r30, 0x7C	; 124
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	80 7f       	andi	r24, 0xF0	; 240
 29a:	84 60       	ori	r24, 0x04	; 4
 29c:	80 83       	st	Z, r24
	break;
 29e:	1b c0       	rjmp	.+54     	; 0x2d6 <read_channelADC+0x8e>
	
	case 5:
	ADMUX = (ADMUX & 0xF0) | 0x05;
 2a0:	ec e7       	ldi	r30, 0x7C	; 124
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 7f       	andi	r24, 0xF0	; 240
 2a8:	85 60       	ori	r24, 0x05	; 5
 2aa:	80 83       	st	Z, r24
	break;
 2ac:	14 c0       	rjmp	.+40     	; 0x2d6 <read_channelADC+0x8e>
	
	case 6:
	ADMUX = (ADMUX & 0xF0) | 0x06;
 2ae:	ec e7       	ldi	r30, 0x7C	; 124
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	80 7f       	andi	r24, 0xF0	; 240
 2b6:	86 60       	ori	r24, 0x06	; 6
 2b8:	80 83       	st	Z, r24
	break;
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <read_channelADC+0x8e>
	
	case 7:
	ADMUX = (ADMUX & 0xF0) | 0x07;
 2bc:	ec e7       	ldi	r30, 0x7C	; 124
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 7f       	andi	r24, 0xF0	; 240
 2c4:	87 60       	ori	r24, 0x07	; 7
 2c6:	80 83       	st	Z, r24
	break;
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <read_channelADC+0x8e>
	
	case 8:
	ADMUX = (ADMUX & 0xF0) | 0x08;
 2ca:	ec e7       	ldi	r30, 0x7C	; 124
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	80 83       	st	Z, r24
	break;
	}
	
	return ADCH;
 2d6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 2da:	08 95       	ret

000002dc <convertADC>:


//iniciar conversi?n
void convertADC(void){
	ADCSRA |= (1 << ADSC);
 2dc:	ea e7       	ldi	r30, 0x7A	; 122
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	80 64       	ori	r24, 0x40	; 64
 2e4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	8f e3       	ldi	r24, 0x3F	; 63
 2e8:	9f e1       	ldi	r25, 0x1F	; 31
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <convertADC+0xe>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <convertADC+0x14>
 2f0:	00 00       	nop
 2f2:	08 95       	ret

000002f4 <mapingADC>:


float mapingADC(uint8_t channel){
	uint8_t adcValue = 0;
	float voltage = 0;
	adcValue = read_channelADC(channel);  // Leer ADC en el canal 3
 2f4:	0e 94 24 01 	call	0x248	; 0x248 <read_channelADC>

	// Convertir el valor ADC a voltaje
	return voltage = (adcValue * 5.0) / 256.0;
 2f8:	68 2f       	mov	r22, r24
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 7e 03 	call	0x6fc	; 0x6fc <__floatsisf>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	40 ea       	ldi	r20, 0xA0	; 160
 30a:	50 e4       	ldi	r21, 0x40	; 64
 30c:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 e8       	ldi	r20, 0x80	; 128
 316:	5b e3       	ldi	r21, 0x3B	; 59
 318:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3>
}
 31c:	08 95       	ret

0000031e <main>:
volatile char bufferRX;


int main(void)
{
	cli();
 31e:	f8 94       	cli
	DDRC = 0;
 320:	17 b8       	out	0x07, r1	; 7
	initLCD8bits();
 322:	0e 94 dd 02 	call	0x5ba	; 0x5ba <initLCD8bits>
 326:	2f ef       	ldi	r18, 0xFF	; 255
 328:	89 ef       	ldi	r24, 0xF9	; 249
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	21 50       	subi	r18, 0x01	; 1
 32e:	80 40       	sbci	r24, 0x00	; 0
 330:	90 40       	sbci	r25, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0xe>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x18>
 336:	00 00       	nop
	_delay_ms(20);
	
	initADC();
 338:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <initADC>
	pinADC(0); pinADC(1);	//PC0 Y PC1 como entradas ADC
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <pinADC>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <pinADC>
	
	initUART9600();
 348:	0e 94 5d 03 	call	0x6ba	; 0x6ba <initUART9600>
	writeTextUART("inicializacion\nControl del contador\n");
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 3b 03 	call	0x676	; 0x676 <writeTextUART>
	sei();
 354:	78 94       	sei
	
	//LCD_clear();
	LCD_Set_Cursor(1,2);	//row 1, column 2
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Set_Cursor>
	LCD_Write_String("P1:   P2:   P3:");	//It writes titles
 35e:	85 e2       	ldi	r24, 0x25	; 37
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>

    while (1) 
    {
		convertADC();		//start ADC convertion
 366:	0e 94 6e 01 	call	0x2dc	; 0x2dc <convertADC>
		
		LCD_Set_Cursor(2,1);
 36a:	61 e0       	ldi	r22, 0x01	; 1
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Set_Cursor>
		dtostrf(voltage1,4,2,buffer);	//Mostrar el primer valor
 372:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <voltage1>
 376:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <voltage1+0x1>
 37a:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <voltage1+0x2>
 37e:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <voltage1+0x3>
 382:	0a e6       	ldi	r16, 0x6A	; 106
 384:	11 e0       	ldi	r17, 0x01	; 1
 386:	22 e0       	ldi	r18, 0x02	; 2
 388:	44 e0       	ldi	r20, 0x04	; 4
 38a:	0e 94 7d 04 	call	0x8fa	; 0x8fa <dtostrf>
		LCD_Write_String(buffer);
 38e:	c8 01       	movw	r24, r16
 390:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
		LCD_Write_String("V ");
 394:	85 e3       	ldi	r24, 0x35	; 53
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
		
		dtostrf(voltage2,4,2,buffer);	//Mostrar el segundo valor
 39c:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end>
 3a0:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <__data_end+0x1>
 3a4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <__data_end+0x2>
 3a8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <__data_end+0x3>
 3ac:	22 e0       	ldi	r18, 0x02	; 2
 3ae:	44 e0       	ldi	r20, 0x04	; 4
 3b0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <dtostrf>
		LCD_Write_String(buffer);
 3b4:	c8 01       	movw	r24, r16
 3b6:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
		LCD_Write_String("V  ");
 3ba:	88 e3       	ldi	r24, 0x38	; 56
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
		
		utoa(counter,buffer,10);	//Mostrar el segundo valor
 3c2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <counter>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 3c6:	4a e0       	ldi	r20, 0x0A	; 10
 3c8:	b8 01       	movw	r22, r16
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	0e 94 9d 04 	call	0x93a	; 0x93a <__utoa_ncheck>
		LCD_Write_String("   ");
 3d0:	8c e3       	ldi	r24, 0x3C	; 60
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
		LCD_Set_Cursor(2,14);
 3d8:	6e e0       	ldi	r22, 0x0E	; 14
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 2f 03 	call	0x65e	; 0x65e <LCD_Set_Cursor>
		LCD_Write_String(buffer);
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 22 03 	call	0x644	; 0x644 <LCD_Write_String>
 3e6:	bf cf       	rjmp	.-130    	; 0x366 <main+0x48>

000003e8 <__vector_21>:
	}
}



ISR (ADC_vect){
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	ADCSRA |= (1 << ADIF);	//turn off flag
 40a:	ea e7       	ldi	r30, 0x7A	; 122
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	80 61       	ori	r24, 0x10	; 16
 412:	80 83       	st	Z, r24
	if (count == 0){
 414:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <count>
 418:	81 11       	cpse	r24, r1
 41a:	0f c0       	rjmp	.+30     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		count = 1;
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <count>
		voltage1 = mapingADC(0);
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mapingADC>
 428:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <voltage1>
 42c:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <voltage1+0x1>
 430:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <voltage1+0x2>
 434:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <voltage1+0x3>
 438:	0e c0       	rjmp	.+28     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
	}else if(count == 1){
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	61 f4       	brne	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
		count = 0;
 43e:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <count>
		voltage2 = mapingADC(1);
 442:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <mapingADC>
 446:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <__data_end>
 44a:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <__data_end+0x1>
 44e:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__data_end+0x2>
 452:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <__data_end+0x3>
	}
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_18>:


//ISR, recieve
ISR(USART_RX_vect){
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	3f 93       	push	r19
 486:	4f 93       	push	r20
 488:	5f 93       	push	r21
 48a:	6f 93       	push	r22
 48c:	7f 93       	push	r23
 48e:	8f 93       	push	r24
 490:	9f 93       	push	r25
 492:	af 93       	push	r26
 494:	bf 93       	push	r27
 496:	ef 93       	push	r30
 498:	ff 93       	push	r31
	bufferRX = UDR0;
 49a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 49e:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <bufferRX>
	while(!(UCSR0A & (1 << UDRE0)));	//if buffer is emptym, if it is not, it waits
 4a2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4a6:	85 ff       	sbrs	r24, 5
 4a8:	fc cf       	rjmp	.-8      	; 0x4a2 <__vector_18+0x2a>
	serialShow(bufferRX);
 4aa:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <bufferRX>
 4ae:	0e 94 4c 03 	call	0x698	; 0x698 <serialShow>
	
	if(bufferRX == '+') counter++;
 4b2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <bufferRX>
 4b6:	8b 32       	cpi	r24, 0x2B	; 43
 4b8:	31 f4       	brne	.+12     	; 0x4c6 <__vector_18+0x4e>
 4ba:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <counter>
 4be:	8f 5f       	subi	r24, 0xFF	; 255
 4c0:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <counter>
 4c4:	0e c0       	rjmp	.+28     	; 0x4e2 <__vector_18+0x6a>
	else if(bufferRX == '-') counter--;
 4c6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <bufferRX>
 4ca:	8d 32       	cpi	r24, 0x2D	; 45
 4cc:	31 f4       	brne	.+12     	; 0x4da <__vector_18+0x62>
 4ce:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <counter>
 4d2:	81 50       	subi	r24, 0x01	; 1
 4d4:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <counter>
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__vector_18+0x6a>
	else writeTextUART("Opcion invalida\n");
 4da:	80 e4       	ldi	r24, 0x40	; 64
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	0e 94 3b 03 	call	0x676	; 0x676 <writeTextUART>
 4e2:	ff 91       	pop	r31
 4e4:	ef 91       	pop	r30
 4e6:	bf 91       	pop	r27
 4e8:	af 91       	pop	r26
 4ea:	9f 91       	pop	r25
 4ec:	8f 91       	pop	r24
 4ee:	7f 91       	pop	r23
 4f0:	6f 91       	pop	r22
 4f2:	5f 91       	pop	r21
 4f4:	4f 91       	pop	r20
 4f6:	3f 91       	pop	r19
 4f8:	2f 91       	pop	r18
 4fa:	0f 90       	pop	r0
 4fc:	0f be       	out	0x3f, r0	; 63
 4fe:	0f 90       	pop	r0
 500:	1f 90       	pop	r1
 502:	18 95       	reti

00000504 <LCD_Port>:
  }
  
  void LCD_Shift_Left(void){
	  
	  LCD_CMD(0x01);
	  LCD_CMD(0x08);
 504:	84 ff       	sbrs	r24, 4
 506:	04 c0       	rjmp	.+8      	; 0x510 <LCD_Port+0xc>
 508:	95 b1       	in	r25, 0x05	; 5
 50a:	91 60       	ori	r25, 0x01	; 1
 50c:	95 b9       	out	0x05, r25	; 5
 50e:	03 c0       	rjmp	.+6      	; 0x516 <LCD_Port+0x12>
 510:	95 b1       	in	r25, 0x05	; 5
 512:	9e 7f       	andi	r25, 0xFE	; 254
 514:	95 b9       	out	0x05, r25	; 5
 516:	85 ff       	sbrs	r24, 5
 518:	04 c0       	rjmp	.+8      	; 0x522 <LCD_Port+0x1e>
 51a:	95 b1       	in	r25, 0x05	; 5
 51c:	92 60       	ori	r25, 0x02	; 2
 51e:	95 b9       	out	0x05, r25	; 5
 520:	03 c0       	rjmp	.+6      	; 0x528 <LCD_Port+0x24>
 522:	95 b1       	in	r25, 0x05	; 5
 524:	9d 7f       	andi	r25, 0xFD	; 253
 526:	95 b9       	out	0x05, r25	; 5
 528:	86 ff       	sbrs	r24, 6
 52a:	04 c0       	rjmp	.+8      	; 0x534 <LCD_Port+0x30>
 52c:	95 b1       	in	r25, 0x05	; 5
 52e:	94 60       	ori	r25, 0x04	; 4
 530:	95 b9       	out	0x05, r25	; 5
 532:	03 c0       	rjmp	.+6      	; 0x53a <LCD_Port+0x36>
 534:	95 b1       	in	r25, 0x05	; 5
 536:	9b 7f       	andi	r25, 0xFB	; 251
 538:	95 b9       	out	0x05, r25	; 5
 53a:	88 23       	and	r24, r24
 53c:	24 f4       	brge	.+8      	; 0x546 <LCD_Port+0x42>
 53e:	95 b1       	in	r25, 0x05	; 5
 540:	98 60       	ori	r25, 0x08	; 8
 542:	95 b9       	out	0x05, r25	; 5
 544:	03 c0       	rjmp	.+6      	; 0x54c <LCD_Port+0x48>
 546:	95 b1       	in	r25, 0x05	; 5
 548:	97 7f       	andi	r25, 0xF7	; 247
 54a:	95 b9       	out	0x05, r25	; 5
 54c:	80 ff       	sbrs	r24, 0
 54e:	04 c0       	rjmp	.+8      	; 0x558 <LCD_Port+0x54>
 550:	9b b1       	in	r25, 0x0b	; 11
 552:	90 61       	ori	r25, 0x10	; 16
 554:	9b b9       	out	0x0b, r25	; 11
 556:	03 c0       	rjmp	.+6      	; 0x55e <LCD_Port+0x5a>
 558:	9b b1       	in	r25, 0x0b	; 11
 55a:	9f 7e       	andi	r25, 0xEF	; 239
 55c:	9b b9       	out	0x0b, r25	; 11
 55e:	81 ff       	sbrs	r24, 1
 560:	04 c0       	rjmp	.+8      	; 0x56a <LCD_Port+0x66>
 562:	9b b1       	in	r25, 0x0b	; 11
 564:	90 62       	ori	r25, 0x20	; 32
 566:	9b b9       	out	0x0b, r25	; 11
 568:	03 c0       	rjmp	.+6      	; 0x570 <LCD_Port+0x6c>
 56a:	9b b1       	in	r25, 0x0b	; 11
 56c:	9f 7d       	andi	r25, 0xDF	; 223
 56e:	9b b9       	out	0x0b, r25	; 11
 570:	82 ff       	sbrs	r24, 2
 572:	04 c0       	rjmp	.+8      	; 0x57c <LCD_Port+0x78>
 574:	9b b1       	in	r25, 0x0b	; 11
 576:	90 64       	ori	r25, 0x40	; 64
 578:	9b b9       	out	0x0b, r25	; 11
 57a:	03 c0       	rjmp	.+6      	; 0x582 <LCD_Port+0x7e>
 57c:	9b b1       	in	r25, 0x0b	; 11
 57e:	9f 7b       	andi	r25, 0xBF	; 191
 580:	9b b9       	out	0x0b, r25	; 11
 582:	83 ff       	sbrs	r24, 3
 584:	04 c0       	rjmp	.+8      	; 0x58e <LCD_Port+0x8a>
 586:	8b b1       	in	r24, 0x0b	; 11
 588:	80 68       	ori	r24, 0x80	; 128
 58a:	8b b9       	out	0x0b, r24	; 11
 58c:	08 95       	ret
 58e:	8b b1       	in	r24, 0x0b	; 11
 590:	8f 77       	andi	r24, 0x7F	; 127
 592:	8b b9       	out	0x0b, r24	; 11
 594:	08 95       	ret

00000596 <LCD_CMD>:
 596:	9b b1       	in	r25, 0x0b	; 11
 598:	9b 7f       	andi	r25, 0xFB	; 251
 59a:	9b b9       	out	0x0b, r25	; 11
 59c:	0e 94 82 02 	call	0x504	; 0x504 <LCD_Port>
 5a0:	8b b1       	in	r24, 0x0b	; 11
 5a2:	88 60       	ori	r24, 0x08	; 8
 5a4:	8b b9       	out	0x0b, r24	; 11
 5a6:	8f e7       	ldi	r24, 0x7F	; 127
 5a8:	9e e3       	ldi	r25, 0x3E	; 62
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_CMD+0x14>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCD_CMD+0x1a>
 5b0:	00 00       	nop
 5b2:	8b b1       	in	r24, 0x0b	; 11
 5b4:	87 7f       	andi	r24, 0xF7	; 247
 5b6:	8b b9       	out	0x0b, r24	; 11
 5b8:	08 95       	ret

000005ba <initLCD8bits>:
 5ba:	84 b1       	in	r24, 0x04	; 4
 5bc:	8f 60       	ori	r24, 0x0F	; 15
 5be:	84 b9       	out	0x04, r24	; 4
 5c0:	8a b1       	in	r24, 0x0a	; 10
 5c2:	8c 6f       	ori	r24, 0xFC	; 252
 5c4:	8a b9       	out	0x0a, r24	; 10
 5c6:	15 b8       	out	0x05, r1	; 5
 5c8:	1b b8       	out	0x0b, r1	; 11
 5ca:	8f e1       	ldi	r24, 0x1F	; 31
 5cc:	9e e4       	ldi	r25, 0x4E	; 78
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <initLCD8bits+0x14>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <initLCD8bits+0x1a>
 5d4:	00 00       	nop
 5d6:	88 e3       	ldi	r24, 0x38	; 56
 5d8:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_CMD>
 5dc:	8f e1       	ldi	r24, 0x1F	; 31
 5de:	9e e4       	ldi	r25, 0x4E	; 78
 5e0:	01 97       	sbiw	r24, 0x01	; 1
 5e2:	f1 f7       	brne	.-4      	; 0x5e0 <initLCD8bits+0x26>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <initLCD8bits+0x2c>
 5e6:	00 00       	nop
 5e8:	8c e0       	ldi	r24, 0x0C	; 12
 5ea:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_CMD>
 5ee:	8f e3       	ldi	r24, 0x3F	; 63
 5f0:	9c e9       	ldi	r25, 0x9C	; 156
 5f2:	01 97       	sbiw	r24, 0x01	; 1
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <initLCD8bits+0x38>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <initLCD8bits+0x3e>
 5f8:	00 00       	nop
 5fa:	86 e0       	ldi	r24, 0x06	; 6
 5fc:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_CMD>
 600:	8f e3       	ldi	r24, 0x3F	; 63
 602:	9c e9       	ldi	r25, 0x9C	; 156
 604:	01 97       	sbiw	r24, 0x01	; 1
 606:	f1 f7       	brne	.-4      	; 0x604 <initLCD8bits+0x4a>
 608:	00 c0       	rjmp	.+0      	; 0x60a <initLCD8bits+0x50>
 60a:	00 00       	nop
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_CMD>
 612:	8f e3       	ldi	r24, 0x3F	; 63
 614:	9c e9       	ldi	r25, 0x9C	; 156
 616:	01 97       	sbiw	r24, 0x01	; 1
 618:	f1 f7       	brne	.-4      	; 0x616 <initLCD8bits+0x5c>
 61a:	00 c0       	rjmp	.+0      	; 0x61c <initLCD8bits+0x62>
 61c:	00 00       	nop
 61e:	08 95       	ret

00000620 <LCD_Write_Char>:
 620:	9b b1       	in	r25, 0x0b	; 11
 622:	94 60       	ori	r25, 0x04	; 4
 624:	9b b9       	out	0x0b, r25	; 11
 626:	0e 94 82 02 	call	0x504	; 0x504 <LCD_Port>
 62a:	8b b1       	in	r24, 0x0b	; 11
 62c:	88 60       	ori	r24, 0x08	; 8
 62e:	8b b9       	out	0x0b, r24	; 11
 630:	8f e7       	ldi	r24, 0x7F	; 127
 632:	9e e3       	ldi	r25, 0x3E	; 62
 634:	01 97       	sbiw	r24, 0x01	; 1
 636:	f1 f7       	brne	.-4      	; 0x634 <LCD_Write_Char+0x14>
 638:	00 c0       	rjmp	.+0      	; 0x63a <LCD_Write_Char+0x1a>
 63a:	00 00       	nop
 63c:	8b b1       	in	r24, 0x0b	; 11
 63e:	87 7f       	andi	r24, 0xF7	; 247
 640:	8b b9       	out	0x0b, r24	; 11
 642:	08 95       	ret

00000644 <LCD_Write_String>:
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	ec 01       	movw	r28, r24
 64a:	03 c0       	rjmp	.+6      	; 0x652 <LCD_Write_String+0xe>
 64c:	0e 94 10 03 	call	0x620	; 0x620 <LCD_Write_Char>
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	88 81       	ld	r24, Y
 654:	81 11       	cpse	r24, r1
 656:	fa cf       	rjmp	.-12     	; 0x64c <LCD_Write_String+0x8>
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <LCD_Set_Cursor>:
  }
  
  void LCD_Set_Cursor(char f, char c){
	  char temp = 0x80; // Valor por defecto para evitar advertencias

	  if (f ==1 ){
 65e:	81 30       	cpi	r24, 0x01	; 1
 660:	19 f4       	brne	.+6      	; 0x668 <LCD_Set_Cursor+0xa>
		  temp = 0x80 + ( c- 1);	//FIla 1
 662:	8f e7       	ldi	r24, 0x7F	; 127
 664:	86 0f       	add	r24, r22
 666:	04 c0       	rjmp	.+8      	; 0x670 <LCD_Set_Cursor+0x12>
		   }
		  else if (f == 2){
 668:	82 30       	cpi	r24, 0x02	; 2
 66a:	21 f4       	brne	.+8      	; 0x674 <LCD_Set_Cursor+0x16>
			
			temp = 0xC0 + ( c - 1);		// FIla 2  
 66c:	8f eb       	ldi	r24, 0xBF	; 191
 66e:	86 0f       	add	r24, r22
		  }else{
			  return;
		  }
		  LCD_CMD(temp);  
 670:	0e 94 cb 02 	call	0x596	; 0x596 <LCD_CMD>
 674:	08 95       	ret

00000676 <writeTextUART>:
void serialShow(volatile char buffer){
	UDR0 = buffer;
	writeTextUART(" <-- Enviado \n");
}

void writeTextUART(char* text){
 676:	ac 01       	movw	r20, r24
	for (uint8_t i = 0; text[i] != '\0'; i++)
 678:	20 e0       	ldi	r18, 0x00	; 0
 67a:	07 c0       	rjmp	.+14     	; 0x68a <writeTextUART+0x14>
	{
		while(!(UCSR0A & (1 << UDRE0)));
 67c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 680:	95 ff       	sbrs	r25, 5
 682:	fc cf       	rjmp	.-8      	; 0x67c <writeTextUART+0x6>
		UDR0 = text[i];
 684:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UDR0 = buffer;
	writeTextUART(" <-- Enviado \n");
}

void writeTextUART(char* text){
	for (uint8_t i = 0; text[i] != '\0'; i++)
 688:	2f 5f       	subi	r18, 0xFF	; 255
 68a:	fa 01       	movw	r30, r20
 68c:	e2 0f       	add	r30, r18
 68e:	f1 1d       	adc	r31, r1
 690:	30 81       	ld	r19, Z
 692:	31 11       	cpse	r19, r1
 694:	f3 cf       	rjmp	.-26     	; 0x67c <writeTextUART+0x6>
	{
		while(!(UCSR0A & (1 << UDRE0)));
		UDR0 = text[i];
	}
}
 696:	08 95       	ret

00000698 <serialShow>:



#include "uart.h"

void serialShow(volatile char buffer){
 698:	cf 93       	push	r28
 69a:	df 93       	push	r29
 69c:	1f 92       	push	r1
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	89 83       	std	Y+1, r24	; 0x01
	UDR0 = buffer;
 6a4:	89 81       	ldd	r24, Y+1	; 0x01
 6a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	writeTextUART(" <-- Enviado \n");
 6aa:	81 e5       	ldi	r24, 0x51	; 81
 6ac:	91 e0       	ldi	r25, 0x01	; 1
 6ae:	0e 94 3b 03 	call	0x676	; 0x676 <writeTextUART>
}
 6b2:	0f 90       	pop	r0
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	08 95       	ret

000006ba <initUART9600>:
}


void initUART9600(void){
	//settigns for RX and TX
	DDRD &= ~(1 << DDD0);		//Rx as input
 6ba:	8a b1       	in	r24, 0x0a	; 10
 6bc:	8e 7f       	andi	r24, 0xFE	; 254
 6be:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD1);		//TX as output
 6c0:	8a b1       	in	r24, 0x0a	; 10
 6c2:	82 60       	ori	r24, 0x02	; 2
 6c4:	8a b9       	out	0x0a, r24	; 10
	
	//Fast mode, U2X0
	UCSR0A = 0;
 6c6:	e0 ec       	ldi	r30, 0xC0	; 192
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	10 82       	st	Z, r1
	UCSR0A |= (1 << U2X0);
 6cc:	80 81       	ld	r24, Z
 6ce:	82 60       	ori	r24, 0x02	; 2
 6d0:	80 83       	st	Z, r24
	
	//Settigns for register B
	UCSR0B = 0;
 6d2:	e1 ec       	ldi	r30, 0xC1	; 193
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	10 82       	st	Z, r1
	UCSR0B |= (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); //ISR, enable for RX and TX
 6d8:	80 81       	ld	r24, Z
 6da:	88 69       	ori	r24, 0x98	; 152
 6dc:	80 83       	st	Z, r24
	
	// settigns for register C
	UCSR0C = 0;
 6de:	e2 ec       	ldi	r30, 0xC2	; 194
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	10 82       	st	Z, r1
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);		// character size: 8 bits, no parity, 1 stop bit
 6e4:	80 81       	ld	r24, Z
 6e6:	86 60       	ori	r24, 0x06	; 6
 6e8:	80 83       	st	Z, r24
	
	//Baudrate
	UBRR0 = 207;		// 9600
 6ea:	8f ec       	ldi	r24, 0xCF	; 207
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 6f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 6f6:	08 95       	ret

000006f8 <__floatunsisf>:
 6f8:	e8 94       	clt
 6fa:	09 c0       	rjmp	.+18     	; 0x70e <__floatsisf+0x12>

000006fc <__floatsisf>:
 6fc:	97 fb       	bst	r25, 7
 6fe:	3e f4       	brtc	.+14     	; 0x70e <__floatsisf+0x12>
 700:	90 95       	com	r25
 702:	80 95       	com	r24
 704:	70 95       	com	r23
 706:	61 95       	neg	r22
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	99 23       	and	r25, r25
 710:	a9 f0       	breq	.+42     	; 0x73c <__floatsisf+0x40>
 712:	f9 2f       	mov	r31, r25
 714:	96 e9       	ldi	r25, 0x96	; 150
 716:	bb 27       	eor	r27, r27
 718:	93 95       	inc	r25
 71a:	f6 95       	lsr	r31
 71c:	87 95       	ror	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b7 95       	ror	r27
 724:	f1 11       	cpse	r31, r1
 726:	f8 cf       	rjmp	.-16     	; 0x718 <__floatsisf+0x1c>
 728:	fa f4       	brpl	.+62     	; 0x768 <__floatsisf+0x6c>
 72a:	bb 0f       	add	r27, r27
 72c:	11 f4       	brne	.+4      	; 0x732 <__floatsisf+0x36>
 72e:	60 ff       	sbrs	r22, 0
 730:	1b c0       	rjmp	.+54     	; 0x768 <__floatsisf+0x6c>
 732:	6f 5f       	subi	r22, 0xFF	; 255
 734:	7f 4f       	sbci	r23, 0xFF	; 255
 736:	8f 4f       	sbci	r24, 0xFF	; 255
 738:	9f 4f       	sbci	r25, 0xFF	; 255
 73a:	16 c0       	rjmp	.+44     	; 0x768 <__floatsisf+0x6c>
 73c:	88 23       	and	r24, r24
 73e:	11 f0       	breq	.+4      	; 0x744 <__floatsisf+0x48>
 740:	96 e9       	ldi	r25, 0x96	; 150
 742:	11 c0       	rjmp	.+34     	; 0x766 <__floatsisf+0x6a>
 744:	77 23       	and	r23, r23
 746:	21 f0       	breq	.+8      	; 0x750 <__floatsisf+0x54>
 748:	9e e8       	ldi	r25, 0x8E	; 142
 74a:	87 2f       	mov	r24, r23
 74c:	76 2f       	mov	r23, r22
 74e:	05 c0       	rjmp	.+10     	; 0x75a <__floatsisf+0x5e>
 750:	66 23       	and	r22, r22
 752:	71 f0       	breq	.+28     	; 0x770 <__floatsisf+0x74>
 754:	96 e8       	ldi	r25, 0x86	; 134
 756:	86 2f       	mov	r24, r22
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	2a f0       	brmi	.+10     	; 0x768 <__floatsisf+0x6c>
 75e:	9a 95       	dec	r25
 760:	66 0f       	add	r22, r22
 762:	77 1f       	adc	r23, r23
 764:	88 1f       	adc	r24, r24
 766:	da f7       	brpl	.-10     	; 0x75e <__floatsisf+0x62>
 768:	88 0f       	add	r24, r24
 76a:	96 95       	lsr	r25
 76c:	87 95       	ror	r24
 76e:	97 f9       	bld	r25, 7
 770:	08 95       	ret

00000772 <__mulsf3>:
 772:	0e 94 cc 03 	call	0x798	; 0x798 <__mulsf3x>
 776:	0c 94 3d 04 	jmp	0x87a	; 0x87a <__fp_round>
 77a:	0e 94 2f 04 	call	0x85e	; 0x85e <__fp_pscA>
 77e:	38 f0       	brcs	.+14     	; 0x78e <__mulsf3+0x1c>
 780:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_pscB>
 784:	20 f0       	brcs	.+8      	; 0x78e <__mulsf3+0x1c>
 786:	95 23       	and	r25, r21
 788:	11 f0       	breq	.+4      	; 0x78e <__mulsf3+0x1c>
 78a:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 78e:	0c 94 2c 04 	jmp	0x858	; 0x858 <__fp_nan>
 792:	11 24       	eor	r1, r1
 794:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>

00000798 <__mulsf3x>:
 798:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_split3>
 79c:	70 f3       	brcs	.-36     	; 0x77a <__mulsf3+0x8>

0000079e <__mulsf3_pse>:
 79e:	95 9f       	mul	r25, r21
 7a0:	c1 f3       	breq	.-16     	; 0x792 <__mulsf3+0x20>
 7a2:	95 0f       	add	r25, r21
 7a4:	50 e0       	ldi	r21, 0x00	; 0
 7a6:	55 1f       	adc	r21, r21
 7a8:	62 9f       	mul	r22, r18
 7aa:	f0 01       	movw	r30, r0
 7ac:	72 9f       	mul	r23, r18
 7ae:	bb 27       	eor	r27, r27
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	63 9f       	mul	r22, r19
 7b6:	aa 27       	eor	r26, r26
 7b8:	f0 0d       	add	r31, r0
 7ba:	b1 1d       	adc	r27, r1
 7bc:	aa 1f       	adc	r26, r26
 7be:	64 9f       	mul	r22, r20
 7c0:	66 27       	eor	r22, r22
 7c2:	b0 0d       	add	r27, r0
 7c4:	a1 1d       	adc	r26, r1
 7c6:	66 1f       	adc	r22, r22
 7c8:	82 9f       	mul	r24, r18
 7ca:	22 27       	eor	r18, r18
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	73 9f       	mul	r23, r19
 7d4:	b0 0d       	add	r27, r0
 7d6:	a1 1d       	adc	r26, r1
 7d8:	62 1f       	adc	r22, r18
 7da:	83 9f       	mul	r24, r19
 7dc:	a0 0d       	add	r26, r0
 7de:	61 1d       	adc	r22, r1
 7e0:	22 1f       	adc	r18, r18
 7e2:	74 9f       	mul	r23, r20
 7e4:	33 27       	eor	r19, r19
 7e6:	a0 0d       	add	r26, r0
 7e8:	61 1d       	adc	r22, r1
 7ea:	23 1f       	adc	r18, r19
 7ec:	84 9f       	mul	r24, r20
 7ee:	60 0d       	add	r22, r0
 7f0:	21 1d       	adc	r18, r1
 7f2:	82 2f       	mov	r24, r18
 7f4:	76 2f       	mov	r23, r22
 7f6:	6a 2f       	mov	r22, r26
 7f8:	11 24       	eor	r1, r1
 7fa:	9f 57       	subi	r25, 0x7F	; 127
 7fc:	50 40       	sbci	r21, 0x00	; 0
 7fe:	9a f0       	brmi	.+38     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 800:	f1 f0       	breq	.+60     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 802:	88 23       	and	r24, r24
 804:	4a f0       	brmi	.+18     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 806:	ee 0f       	add	r30, r30
 808:	ff 1f       	adc	r31, r31
 80a:	bb 1f       	adc	r27, r27
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	91 50       	subi	r25, 0x01	; 1
 814:	50 40       	sbci	r21, 0x00	; 0
 816:	a9 f7       	brne	.-22     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 818:	9e 3f       	cpi	r25, 0xFE	; 254
 81a:	51 05       	cpc	r21, r1
 81c:	80 f0       	brcs	.+32     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 81e:	0c 94 26 04 	jmp	0x84c	; 0x84c <__fp_inf>
 822:	0c 94 71 04 	jmp	0x8e2	; 0x8e2 <__fp_szero>
 826:	5f 3f       	cpi	r21, 0xFF	; 255
 828:	e4 f3       	brlt	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	98 3e       	cpi	r25, 0xE8	; 232
 82c:	d4 f3       	brlt	.-12     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82e:	86 95       	lsr	r24
 830:	77 95       	ror	r23
 832:	67 95       	ror	r22
 834:	b7 95       	ror	r27
 836:	f7 95       	ror	r31
 838:	e7 95       	ror	r30
 83a:	9f 5f       	subi	r25, 0xFF	; 255
 83c:	c1 f7       	brne	.-16     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 83e:	fe 2b       	or	r31, r30
 840:	88 0f       	add	r24, r24
 842:	91 1d       	adc	r25, r1
 844:	96 95       	lsr	r25
 846:	87 95       	ror	r24
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__fp_inf>:
 84c:	97 f9       	bld	r25, 7
 84e:	9f 67       	ori	r25, 0x7F	; 127
 850:	80 e8       	ldi	r24, 0x80	; 128
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	08 95       	ret

00000858 <__fp_nan>:
 858:	9f ef       	ldi	r25, 0xFF	; 255
 85a:	80 ec       	ldi	r24, 0xC0	; 192
 85c:	08 95       	ret

0000085e <__fp_pscA>:
 85e:	00 24       	eor	r0, r0
 860:	0a 94       	dec	r0
 862:	16 16       	cp	r1, r22
 864:	17 06       	cpc	r1, r23
 866:	18 06       	cpc	r1, r24
 868:	09 06       	cpc	r0, r25
 86a:	08 95       	ret

0000086c <__fp_pscB>:
 86c:	00 24       	eor	r0, r0
 86e:	0a 94       	dec	r0
 870:	12 16       	cp	r1, r18
 872:	13 06       	cpc	r1, r19
 874:	14 06       	cpc	r1, r20
 876:	05 06       	cpc	r0, r21
 878:	08 95       	ret

0000087a <__fp_round>:
 87a:	09 2e       	mov	r0, r25
 87c:	03 94       	inc	r0
 87e:	00 0c       	add	r0, r0
 880:	11 f4       	brne	.+4      	; 0x886 <__fp_round+0xc>
 882:	88 23       	and	r24, r24
 884:	52 f0       	brmi	.+20     	; 0x89a <__fp_round+0x20>
 886:	bb 0f       	add	r27, r27
 888:	40 f4       	brcc	.+16     	; 0x89a <__fp_round+0x20>
 88a:	bf 2b       	or	r27, r31
 88c:	11 f4       	brne	.+4      	; 0x892 <__fp_round+0x18>
 88e:	60 ff       	sbrs	r22, 0
 890:	04 c0       	rjmp	.+8      	; 0x89a <__fp_round+0x20>
 892:	6f 5f       	subi	r22, 0xFF	; 255
 894:	7f 4f       	sbci	r23, 0xFF	; 255
 896:	8f 4f       	sbci	r24, 0xFF	; 255
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	08 95       	ret

0000089c <__fp_split3>:
 89c:	57 fd       	sbrc	r21, 7
 89e:	90 58       	subi	r25, 0x80	; 128
 8a0:	44 0f       	add	r20, r20
 8a2:	55 1f       	adc	r21, r21
 8a4:	59 f0       	breq	.+22     	; 0x8bc <__fp_splitA+0x10>
 8a6:	5f 3f       	cpi	r21, 0xFF	; 255
 8a8:	71 f0       	breq	.+28     	; 0x8c6 <__fp_splitA+0x1a>
 8aa:	47 95       	ror	r20

000008ac <__fp_splitA>:
 8ac:	88 0f       	add	r24, r24
 8ae:	97 fb       	bst	r25, 7
 8b0:	99 1f       	adc	r25, r25
 8b2:	61 f0       	breq	.+24     	; 0x8cc <__fp_splitA+0x20>
 8b4:	9f 3f       	cpi	r25, 0xFF	; 255
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <__fp_splitA+0x2a>
 8b8:	87 95       	ror	r24
 8ba:	08 95       	ret
 8bc:	12 16       	cp	r1, r18
 8be:	13 06       	cpc	r1, r19
 8c0:	14 06       	cpc	r1, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	f2 cf       	rjmp	.-28     	; 0x8aa <__fp_split3+0xe>
 8c6:	46 95       	lsr	r20
 8c8:	f1 df       	rcall	.-30     	; 0x8ac <__fp_splitA>
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <__fp_splitA+0x30>
 8cc:	16 16       	cp	r1, r22
 8ce:	17 06       	cpc	r1, r23
 8d0:	18 06       	cpc	r1, r24
 8d2:	99 1f       	adc	r25, r25
 8d4:	f1 cf       	rjmp	.-30     	; 0x8b8 <__fp_splitA+0xc>
 8d6:	86 95       	lsr	r24
 8d8:	71 05       	cpc	r23, r1
 8da:	61 05       	cpc	r22, r1
 8dc:	08 94       	sec
 8de:	08 95       	ret

000008e0 <__fp_zero>:
 8e0:	e8 94       	clt

000008e2 <__fp_szero>:
 8e2:	bb 27       	eor	r27, r27
 8e4:	66 27       	eor	r22, r22
 8e6:	77 27       	eor	r23, r23
 8e8:	cb 01       	movw	r24, r22
 8ea:	97 f9       	bld	r25, 7
 8ec:	08 95       	ret

000008ee <__tablejump2__>:
 8ee:	ee 0f       	add	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	05 90       	lpm	r0, Z+
 8f4:	f4 91       	lpm	r31, Z
 8f6:	e0 2d       	mov	r30, r0
 8f8:	09 94       	ijmp

000008fa <dtostrf>:
 8fa:	ef 92       	push	r14
 8fc:	0f 93       	push	r16
 8fe:	1f 93       	push	r17
 900:	cf 93       	push	r28
 902:	df 93       	push	r29
 904:	e8 01       	movw	r28, r16
 906:	47 fd       	sbrc	r20, 7
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
 90a:	34 e0       	ldi	r19, 0x04	; 4
 90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0x11>
 90e:	34 e1       	ldi	r19, 0x14	; 20
 910:	04 2e       	mov	r0, r20
 912:	00 0c       	add	r0, r0
 914:	55 0b       	sbc	r21, r21
 916:	57 ff       	sbrs	r21, 7
 918:	03 c0       	rjmp	.+6      	; 0x920 <__stack+0x21>
 91a:	51 95       	neg	r21
 91c:	41 95       	neg	r20
 91e:	51 09       	sbc	r21, r1
 920:	e3 2e       	mov	r14, r19
 922:	02 2f       	mov	r16, r18
 924:	24 2f       	mov	r18, r20
 926:	ae 01       	movw	r20, r28
 928:	0e 94 b7 04 	call	0x96e	; 0x96e <dtoa_prf>
 92c:	ce 01       	movw	r24, r28
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ef 90       	pop	r14
 938:	08 95       	ret

0000093a <__utoa_ncheck>:
 93a:	bb 27       	eor	r27, r27

0000093c <__utoa_common>:
 93c:	fb 01       	movw	r30, r22
 93e:	55 27       	eor	r21, r21
 940:	aa 27       	eor	r26, r26
 942:	88 0f       	add	r24, r24
 944:	99 1f       	adc	r25, r25
 946:	aa 1f       	adc	r26, r26
 948:	a4 17       	cp	r26, r20
 94a:	10 f0       	brcs	.+4      	; 0x950 <__utoa_common+0x14>
 94c:	a4 1b       	sub	r26, r20
 94e:	83 95       	inc	r24
 950:	50 51       	subi	r21, 0x10	; 16
 952:	b9 f7       	brne	.-18     	; 0x942 <__utoa_common+0x6>
 954:	a0 5d       	subi	r26, 0xD0	; 208
 956:	aa 33       	cpi	r26, 0x3A	; 58
 958:	08 f0       	brcs	.+2      	; 0x95c <__utoa_common+0x20>
 95a:	a9 5d       	subi	r26, 0xD9	; 217
 95c:	a1 93       	st	Z+, r26
 95e:	00 97       	sbiw	r24, 0x00	; 0
 960:	79 f7       	brne	.-34     	; 0x940 <__utoa_common+0x4>
 962:	b1 11       	cpse	r27, r1
 964:	b1 93       	st	Z+, r27
 966:	11 92       	st	Z+, r1
 968:	cb 01       	movw	r24, r22
 96a:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <strrev>

0000096e <dtoa_prf>:
 96e:	a9 e0       	ldi	r26, 0x09	; 9
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	ed eb       	ldi	r30, 0xBD	; 189
 974:	f4 e0       	ldi	r31, 0x04	; 4
 976:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <__prologue_saves__+0xc>
 97a:	6a 01       	movw	r12, r20
 97c:	12 2f       	mov	r17, r18
 97e:	b0 2e       	mov	r11, r16
 980:	2b e3       	ldi	r18, 0x3B	; 59
 982:	20 17       	cp	r18, r16
 984:	20 f0       	brcs	.+8      	; 0x98e <dtoa_prf+0x20>
 986:	ff 24       	eor	r15, r15
 988:	f3 94       	inc	r15
 98a:	f0 0e       	add	r15, r16
 98c:	02 c0       	rjmp	.+4      	; 0x992 <dtoa_prf+0x24>
 98e:	2c e3       	ldi	r18, 0x3C	; 60
 990:	f2 2e       	mov	r15, r18
 992:	0f 2d       	mov	r16, r15
 994:	27 e0       	ldi	r18, 0x07	; 7
 996:	ae 01       	movw	r20, r28
 998:	4f 5f       	subi	r20, 0xFF	; 255
 99a:	5f 4f       	sbci	r21, 0xFF	; 255
 99c:	0e 94 11 06 	call	0xc22	; 0xc22 <__ftoa_engine>
 9a0:	bc 01       	movw	r22, r24
 9a2:	49 81       	ldd	r20, Y+1	; 0x01
 9a4:	84 2f       	mov	r24, r20
 9a6:	89 70       	andi	r24, 0x09	; 9
 9a8:	81 30       	cpi	r24, 0x01	; 1
 9aa:	31 f0       	breq	.+12     	; 0x9b8 <dtoa_prf+0x4a>
 9ac:	e1 fc       	sbrc	r14, 1
 9ae:	06 c0       	rjmp	.+12     	; 0x9bc <dtoa_prf+0x4e>
 9b0:	e0 fe       	sbrs	r14, 0
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <dtoa_prf+0x52>
 9b4:	90 e2       	ldi	r25, 0x20	; 32
 9b6:	05 c0       	rjmp	.+10     	; 0x9c2 <dtoa_prf+0x54>
 9b8:	9d e2       	ldi	r25, 0x2D	; 45
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <dtoa_prf+0x54>
 9bc:	9b e2       	ldi	r25, 0x2B	; 43
 9be:	01 c0       	rjmp	.+2      	; 0x9c2 <dtoa_prf+0x54>
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	5e 2d       	mov	r21, r14
 9c4:	50 71       	andi	r21, 0x10	; 16
 9c6:	43 ff       	sbrs	r20, 3
 9c8:	3c c0       	rjmp	.+120    	; 0xa42 <dtoa_prf+0xd4>
 9ca:	91 11       	cpse	r25, r1
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <dtoa_prf+0x64>
 9ce:	83 e0       	ldi	r24, 0x03	; 3
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <dtoa_prf+0x66>
 9d2:	84 e0       	ldi	r24, 0x04	; 4
 9d4:	81 17       	cp	r24, r17
 9d6:	18 f4       	brcc	.+6      	; 0x9de <dtoa_prf+0x70>
 9d8:	21 2f       	mov	r18, r17
 9da:	28 1b       	sub	r18, r24
 9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <dtoa_prf+0x72>
 9de:	20 e0       	ldi	r18, 0x00	; 0
 9e0:	51 11       	cpse	r21, r1
 9e2:	0b c0       	rjmp	.+22     	; 0x9fa <dtoa_prf+0x8c>
 9e4:	f6 01       	movw	r30, r12
 9e6:	82 2f       	mov	r24, r18
 9e8:	30 e2       	ldi	r19, 0x20	; 32
 9ea:	88 23       	and	r24, r24
 9ec:	19 f0       	breq	.+6      	; 0x9f4 <dtoa_prf+0x86>
 9ee:	31 93       	st	Z+, r19
 9f0:	81 50       	subi	r24, 0x01	; 1
 9f2:	fb cf       	rjmp	.-10     	; 0x9ea <dtoa_prf+0x7c>
 9f4:	c2 0e       	add	r12, r18
 9f6:	d1 1c       	adc	r13, r1
 9f8:	20 e0       	ldi	r18, 0x00	; 0
 9fa:	99 23       	and	r25, r25
 9fc:	29 f0       	breq	.+10     	; 0xa08 <dtoa_prf+0x9a>
 9fe:	d6 01       	movw	r26, r12
 a00:	9c 93       	st	X, r25
 a02:	f6 01       	movw	r30, r12
 a04:	31 96       	adiw	r30, 0x01	; 1
 a06:	6f 01       	movw	r12, r30
 a08:	c6 01       	movw	r24, r12
 a0a:	03 96       	adiw	r24, 0x03	; 3
 a0c:	e2 fe       	sbrs	r14, 2
 a0e:	0a c0       	rjmp	.+20     	; 0xa24 <dtoa_prf+0xb6>
 a10:	3e e4       	ldi	r19, 0x4E	; 78
 a12:	d6 01       	movw	r26, r12
 a14:	3c 93       	st	X, r19
 a16:	41 e4       	ldi	r20, 0x41	; 65
 a18:	11 96       	adiw	r26, 0x01	; 1
 a1a:	4c 93       	st	X, r20
 a1c:	11 97       	sbiw	r26, 0x01	; 1
 a1e:	12 96       	adiw	r26, 0x02	; 2
 a20:	3c 93       	st	X, r19
 a22:	06 c0       	rjmp	.+12     	; 0xa30 <dtoa_prf+0xc2>
 a24:	3e e6       	ldi	r19, 0x6E	; 110
 a26:	f6 01       	movw	r30, r12
 a28:	30 83       	st	Z, r19
 a2a:	41 e6       	ldi	r20, 0x61	; 97
 a2c:	41 83       	std	Z+1, r20	; 0x01
 a2e:	32 83       	std	Z+2, r19	; 0x02
 a30:	fc 01       	movw	r30, r24
 a32:	32 2f       	mov	r19, r18
 a34:	40 e2       	ldi	r20, 0x20	; 32
 a36:	33 23       	and	r19, r19
 a38:	09 f4       	brne	.+2      	; 0xa3c <dtoa_prf+0xce>
 a3a:	42 c0       	rjmp	.+132    	; 0xac0 <dtoa_prf+0x152>
 a3c:	41 93       	st	Z+, r20
 a3e:	31 50       	subi	r19, 0x01	; 1
 a40:	fa cf       	rjmp	.-12     	; 0xa36 <dtoa_prf+0xc8>
 a42:	42 ff       	sbrs	r20, 2
 a44:	44 c0       	rjmp	.+136    	; 0xace <dtoa_prf+0x160>
 a46:	91 11       	cpse	r25, r1
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <dtoa_prf+0xe0>
 a4a:	83 e0       	ldi	r24, 0x03	; 3
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <dtoa_prf+0xe2>
 a4e:	84 e0       	ldi	r24, 0x04	; 4
 a50:	81 17       	cp	r24, r17
 a52:	18 f4       	brcc	.+6      	; 0xa5a <dtoa_prf+0xec>
 a54:	21 2f       	mov	r18, r17
 a56:	28 1b       	sub	r18, r24
 a58:	01 c0       	rjmp	.+2      	; 0xa5c <dtoa_prf+0xee>
 a5a:	20 e0       	ldi	r18, 0x00	; 0
 a5c:	51 11       	cpse	r21, r1
 a5e:	0b c0       	rjmp	.+22     	; 0xa76 <dtoa_prf+0x108>
 a60:	f6 01       	movw	r30, r12
 a62:	82 2f       	mov	r24, r18
 a64:	30 e2       	ldi	r19, 0x20	; 32
 a66:	88 23       	and	r24, r24
 a68:	19 f0       	breq	.+6      	; 0xa70 <dtoa_prf+0x102>
 a6a:	31 93       	st	Z+, r19
 a6c:	81 50       	subi	r24, 0x01	; 1
 a6e:	fb cf       	rjmp	.-10     	; 0xa66 <dtoa_prf+0xf8>
 a70:	c2 0e       	add	r12, r18
 a72:	d1 1c       	adc	r13, r1
 a74:	20 e0       	ldi	r18, 0x00	; 0
 a76:	99 23       	and	r25, r25
 a78:	29 f0       	breq	.+10     	; 0xa84 <dtoa_prf+0x116>
 a7a:	d6 01       	movw	r26, r12
 a7c:	9c 93       	st	X, r25
 a7e:	f6 01       	movw	r30, r12
 a80:	31 96       	adiw	r30, 0x01	; 1
 a82:	6f 01       	movw	r12, r30
 a84:	c6 01       	movw	r24, r12
 a86:	03 96       	adiw	r24, 0x03	; 3
 a88:	e2 fe       	sbrs	r14, 2
 a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <dtoa_prf+0x134>
 a8c:	39 e4       	ldi	r19, 0x49	; 73
 a8e:	d6 01       	movw	r26, r12
 a90:	3c 93       	st	X, r19
 a92:	3e e4       	ldi	r19, 0x4E	; 78
 a94:	11 96       	adiw	r26, 0x01	; 1
 a96:	3c 93       	st	X, r19
 a98:	11 97       	sbiw	r26, 0x01	; 1
 a9a:	36 e4       	ldi	r19, 0x46	; 70
 a9c:	12 96       	adiw	r26, 0x02	; 2
 a9e:	3c 93       	st	X, r19
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <dtoa_prf+0x142>
 aa2:	39 e6       	ldi	r19, 0x69	; 105
 aa4:	f6 01       	movw	r30, r12
 aa6:	30 83       	st	Z, r19
 aa8:	3e e6       	ldi	r19, 0x6E	; 110
 aaa:	31 83       	std	Z+1, r19	; 0x01
 aac:	36 e6       	ldi	r19, 0x66	; 102
 aae:	32 83       	std	Z+2, r19	; 0x02
 ab0:	fc 01       	movw	r30, r24
 ab2:	32 2f       	mov	r19, r18
 ab4:	40 e2       	ldi	r20, 0x20	; 32
 ab6:	33 23       	and	r19, r19
 ab8:	19 f0       	breq	.+6      	; 0xac0 <dtoa_prf+0x152>
 aba:	41 93       	st	Z+, r20
 abc:	31 50       	subi	r19, 0x01	; 1
 abe:	fb cf       	rjmp	.-10     	; 0xab6 <dtoa_prf+0x148>
 ac0:	fc 01       	movw	r30, r24
 ac2:	e2 0f       	add	r30, r18
 ac4:	f1 1d       	adc	r31, r1
 ac6:	10 82       	st	Z, r1
 ac8:	8e ef       	ldi	r24, 0xFE	; 254
 aca:	9f ef       	ldi	r25, 0xFF	; 255
 acc:	a6 c0       	rjmp	.+332    	; 0xc1a <dtoa_prf+0x2ac>
 ace:	21 e0       	ldi	r18, 0x01	; 1
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	91 11       	cpse	r25, r1
 ad4:	02 c0       	rjmp	.+4      	; 0xada <dtoa_prf+0x16c>
 ad6:	20 e0       	ldi	r18, 0x00	; 0
 ad8:	30 e0       	ldi	r19, 0x00	; 0
 ada:	16 16       	cp	r1, r22
 adc:	17 06       	cpc	r1, r23
 ade:	1c f4       	brge	.+6      	; 0xae6 <dtoa_prf+0x178>
 ae0:	fb 01       	movw	r30, r22
 ae2:	31 96       	adiw	r30, 0x01	; 1
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <dtoa_prf+0x17c>
 ae6:	e1 e0       	ldi	r30, 0x01	; 1
 ae8:	f0 e0       	ldi	r31, 0x00	; 0
 aea:	2e 0f       	add	r18, r30
 aec:	3f 1f       	adc	r19, r31
 aee:	bb 20       	and	r11, r11
 af0:	21 f0       	breq	.+8      	; 0xafa <dtoa_prf+0x18c>
 af2:	eb 2d       	mov	r30, r11
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	31 96       	adiw	r30, 0x01	; 1
 af8:	02 c0       	rjmp	.+4      	; 0xafe <dtoa_prf+0x190>
 afa:	e0 e0       	ldi	r30, 0x00	; 0
 afc:	f0 e0       	ldi	r31, 0x00	; 0
 afe:	2e 0f       	add	r18, r30
 b00:	3f 1f       	adc	r19, r31
 b02:	e1 2f       	mov	r30, r17
 b04:	f0 e0       	ldi	r31, 0x00	; 0
 b06:	2e 17       	cp	r18, r30
 b08:	3f 07       	cpc	r19, r31
 b0a:	1c f4       	brge	.+6      	; 0xb12 <dtoa_prf+0x1a4>
 b0c:	12 1b       	sub	r17, r18
 b0e:	21 2f       	mov	r18, r17
 b10:	01 c0       	rjmp	.+2      	; 0xb14 <dtoa_prf+0x1a6>
 b12:	20 e0       	ldi	r18, 0x00	; 0
 b14:	8e 2d       	mov	r24, r14
 b16:	88 71       	andi	r24, 0x18	; 24
 b18:	59 f4       	brne	.+22     	; 0xb30 <dtoa_prf+0x1c2>
 b1a:	f6 01       	movw	r30, r12
 b1c:	82 2f       	mov	r24, r18
 b1e:	30 e2       	ldi	r19, 0x20	; 32
 b20:	88 23       	and	r24, r24
 b22:	19 f0       	breq	.+6      	; 0xb2a <dtoa_prf+0x1bc>
 b24:	31 93       	st	Z+, r19
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	fb cf       	rjmp	.-10     	; 0xb20 <dtoa_prf+0x1b2>
 b2a:	c2 0e       	add	r12, r18
 b2c:	d1 1c       	adc	r13, r1
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	99 23       	and	r25, r25
 b32:	29 f0       	breq	.+10     	; 0xb3e <dtoa_prf+0x1d0>
 b34:	d6 01       	movw	r26, r12
 b36:	9c 93       	st	X, r25
 b38:	f6 01       	movw	r30, r12
 b3a:	31 96       	adiw	r30, 0x01	; 1
 b3c:	6f 01       	movw	r12, r30
 b3e:	51 11       	cpse	r21, r1
 b40:	0b c0       	rjmp	.+22     	; 0xb58 <dtoa_prf+0x1ea>
 b42:	f6 01       	movw	r30, r12
 b44:	82 2f       	mov	r24, r18
 b46:	90 e3       	ldi	r25, 0x30	; 48
 b48:	88 23       	and	r24, r24
 b4a:	19 f0       	breq	.+6      	; 0xb52 <dtoa_prf+0x1e4>
 b4c:	91 93       	st	Z+, r25
 b4e:	81 50       	subi	r24, 0x01	; 1
 b50:	fb cf       	rjmp	.-10     	; 0xb48 <dtoa_prf+0x1da>
 b52:	c2 0e       	add	r12, r18
 b54:	d1 1c       	adc	r13, r1
 b56:	20 e0       	ldi	r18, 0x00	; 0
 b58:	0f 2d       	mov	r16, r15
 b5a:	06 0f       	add	r16, r22
 b5c:	9a 81       	ldd	r25, Y+2	; 0x02
 b5e:	34 2f       	mov	r19, r20
 b60:	30 71       	andi	r19, 0x10	; 16
 b62:	44 ff       	sbrs	r20, 4
 b64:	03 c0       	rjmp	.+6      	; 0xb6c <dtoa_prf+0x1fe>
 b66:	91 33       	cpi	r25, 0x31	; 49
 b68:	09 f4       	brne	.+2      	; 0xb6c <dtoa_prf+0x1fe>
 b6a:	01 50       	subi	r16, 0x01	; 1
 b6c:	10 16       	cp	r1, r16
 b6e:	24 f4       	brge	.+8      	; 0xb78 <dtoa_prf+0x20a>
 b70:	09 30       	cpi	r16, 0x09	; 9
 b72:	18 f0       	brcs	.+6      	; 0xb7a <dtoa_prf+0x20c>
 b74:	08 e0       	ldi	r16, 0x08	; 8
 b76:	01 c0       	rjmp	.+2      	; 0xb7a <dtoa_prf+0x20c>
 b78:	01 e0       	ldi	r16, 0x01	; 1
 b7a:	ab 01       	movw	r20, r22
 b7c:	77 ff       	sbrs	r23, 7
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <dtoa_prf+0x216>
 b80:	40 e0       	ldi	r20, 0x00	; 0
 b82:	50 e0       	ldi	r21, 0x00	; 0
 b84:	fb 01       	movw	r30, r22
 b86:	e4 1b       	sub	r30, r20
 b88:	f5 0b       	sbc	r31, r21
 b8a:	a1 e0       	ldi	r26, 0x01	; 1
 b8c:	b0 e0       	ldi	r27, 0x00	; 0
 b8e:	ac 0f       	add	r26, r28
 b90:	bd 1f       	adc	r27, r29
 b92:	ea 0f       	add	r30, r26
 b94:	fb 1f       	adc	r31, r27
 b96:	8e e2       	ldi	r24, 0x2E	; 46
 b98:	a8 2e       	mov	r10, r24
 b9a:	4b 01       	movw	r8, r22
 b9c:	80 1a       	sub	r8, r16
 b9e:	91 08       	sbc	r9, r1
 ba0:	0b 2d       	mov	r16, r11
 ba2:	10 e0       	ldi	r17, 0x00	; 0
 ba4:	11 95       	neg	r17
 ba6:	01 95       	neg	r16
 ba8:	11 09       	sbc	r17, r1
 baa:	4f 3f       	cpi	r20, 0xFF	; 255
 bac:	bf ef       	ldi	r27, 0xFF	; 255
 bae:	5b 07       	cpc	r21, r27
 bb0:	21 f4       	brne	.+8      	; 0xbba <dtoa_prf+0x24c>
 bb2:	d6 01       	movw	r26, r12
 bb4:	ac 92       	st	X, r10
 bb6:	11 96       	adiw	r26, 0x01	; 1
 bb8:	6d 01       	movw	r12, r26
 bba:	64 17       	cp	r22, r20
 bbc:	75 07       	cpc	r23, r21
 bbe:	2c f0       	brlt	.+10     	; 0xbca <dtoa_prf+0x25c>
 bc0:	84 16       	cp	r8, r20
 bc2:	95 06       	cpc	r9, r21
 bc4:	14 f4       	brge	.+4      	; 0xbca <dtoa_prf+0x25c>
 bc6:	81 81       	ldd	r24, Z+1	; 0x01
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <dtoa_prf+0x25e>
 bca:	80 e3       	ldi	r24, 0x30	; 48
 bcc:	41 50       	subi	r20, 0x01	; 1
 bce:	51 09       	sbc	r21, r1
 bd0:	31 96       	adiw	r30, 0x01	; 1
 bd2:	d6 01       	movw	r26, r12
 bd4:	11 96       	adiw	r26, 0x01	; 1
 bd6:	7d 01       	movw	r14, r26
 bd8:	40 17       	cp	r20, r16
 bda:	51 07       	cpc	r21, r17
 bdc:	24 f0       	brlt	.+8      	; 0xbe6 <dtoa_prf+0x278>
 bde:	d6 01       	movw	r26, r12
 be0:	8c 93       	st	X, r24
 be2:	67 01       	movw	r12, r14
 be4:	e2 cf       	rjmp	.-60     	; 0xbaa <dtoa_prf+0x23c>
 be6:	64 17       	cp	r22, r20
 be8:	75 07       	cpc	r23, r21
 bea:	39 f4       	brne	.+14     	; 0xbfa <dtoa_prf+0x28c>
 bec:	96 33       	cpi	r25, 0x36	; 54
 bee:	20 f4       	brcc	.+8      	; 0xbf8 <dtoa_prf+0x28a>
 bf0:	95 33       	cpi	r25, 0x35	; 53
 bf2:	19 f4       	brne	.+6      	; 0xbfa <dtoa_prf+0x28c>
 bf4:	31 11       	cpse	r19, r1
 bf6:	01 c0       	rjmp	.+2      	; 0xbfa <dtoa_prf+0x28c>
 bf8:	81 e3       	ldi	r24, 0x31	; 49
 bfa:	f6 01       	movw	r30, r12
 bfc:	80 83       	st	Z, r24
 bfe:	f7 01       	movw	r30, r14
 c00:	82 2f       	mov	r24, r18
 c02:	90 e2       	ldi	r25, 0x20	; 32
 c04:	88 23       	and	r24, r24
 c06:	19 f0       	breq	.+6      	; 0xc0e <dtoa_prf+0x2a0>
 c08:	91 93       	st	Z+, r25
 c0a:	81 50       	subi	r24, 0x01	; 1
 c0c:	fb cf       	rjmp	.-10     	; 0xc04 <dtoa_prf+0x296>
 c0e:	f7 01       	movw	r30, r14
 c10:	e2 0f       	add	r30, r18
 c12:	f1 1d       	adc	r31, r1
 c14:	10 82       	st	Z, r1
 c16:	80 e0       	ldi	r24, 0x00	; 0
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	29 96       	adiw	r28, 0x09	; 9
 c1c:	ec e0       	ldi	r30, 0x0C	; 12
 c1e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__epilogue_restores__+0xc>

00000c22 <__ftoa_engine>:
 c22:	28 30       	cpi	r18, 0x08	; 8
 c24:	08 f0       	brcs	.+2      	; 0xc28 <__ftoa_engine+0x6>
 c26:	27 e0       	ldi	r18, 0x07	; 7
 c28:	33 27       	eor	r19, r19
 c2a:	da 01       	movw	r26, r20
 c2c:	99 0f       	add	r25, r25
 c2e:	31 1d       	adc	r19, r1
 c30:	87 fd       	sbrc	r24, 7
 c32:	91 60       	ori	r25, 0x01	; 1
 c34:	00 96       	adiw	r24, 0x00	; 0
 c36:	61 05       	cpc	r22, r1
 c38:	71 05       	cpc	r23, r1
 c3a:	39 f4       	brne	.+14     	; 0xc4a <__ftoa_engine+0x28>
 c3c:	32 60       	ori	r19, 0x02	; 2
 c3e:	2e 5f       	subi	r18, 0xFE	; 254
 c40:	3d 93       	st	X+, r19
 c42:	30 e3       	ldi	r19, 0x30	; 48
 c44:	2a 95       	dec	r18
 c46:	e1 f7       	brne	.-8      	; 0xc40 <__ftoa_engine+0x1e>
 c48:	08 95       	ret
 c4a:	9f 3f       	cpi	r25, 0xFF	; 255
 c4c:	30 f0       	brcs	.+12     	; 0xc5a <__ftoa_engine+0x38>
 c4e:	80 38       	cpi	r24, 0x80	; 128
 c50:	71 05       	cpc	r23, r1
 c52:	61 05       	cpc	r22, r1
 c54:	09 f0       	breq	.+2      	; 0xc58 <__ftoa_engine+0x36>
 c56:	3c 5f       	subi	r19, 0xFC	; 252
 c58:	3c 5f       	subi	r19, 0xFC	; 252
 c5a:	3d 93       	st	X+, r19
 c5c:	91 30       	cpi	r25, 0x01	; 1
 c5e:	08 f0       	brcs	.+2      	; 0xc62 <__ftoa_engine+0x40>
 c60:	80 68       	ori	r24, 0x80	; 128
 c62:	91 1d       	adc	r25, r1
 c64:	df 93       	push	r29
 c66:	cf 93       	push	r28
 c68:	1f 93       	push	r17
 c6a:	0f 93       	push	r16
 c6c:	ff 92       	push	r15
 c6e:	ef 92       	push	r14
 c70:	19 2f       	mov	r17, r25
 c72:	98 7f       	andi	r25, 0xF8	; 248
 c74:	96 95       	lsr	r25
 c76:	e9 2f       	mov	r30, r25
 c78:	96 95       	lsr	r25
 c7a:	96 95       	lsr	r25
 c7c:	e9 0f       	add	r30, r25
 c7e:	ff 27       	eor	r31, r31
 c80:	ec 52       	subi	r30, 0x2C	; 44
 c82:	ff 4f       	sbci	r31, 0xFF	; 255
 c84:	99 27       	eor	r25, r25
 c86:	33 27       	eor	r19, r19
 c88:	ee 24       	eor	r14, r14
 c8a:	ff 24       	eor	r15, r15
 c8c:	a7 01       	movw	r20, r14
 c8e:	e7 01       	movw	r28, r14
 c90:	05 90       	lpm	r0, Z+
 c92:	08 94       	sec
 c94:	07 94       	ror	r0
 c96:	28 f4       	brcc	.+10     	; 0xca2 <__ftoa_engine+0x80>
 c98:	36 0f       	add	r19, r22
 c9a:	e7 1e       	adc	r14, r23
 c9c:	f8 1e       	adc	r15, r24
 c9e:	49 1f       	adc	r20, r25
 ca0:	51 1d       	adc	r21, r1
 ca2:	66 0f       	add	r22, r22
 ca4:	77 1f       	adc	r23, r23
 ca6:	88 1f       	adc	r24, r24
 ca8:	99 1f       	adc	r25, r25
 caa:	06 94       	lsr	r0
 cac:	a1 f7       	brne	.-24     	; 0xc96 <__ftoa_engine+0x74>
 cae:	05 90       	lpm	r0, Z+
 cb0:	07 94       	ror	r0
 cb2:	28 f4       	brcc	.+10     	; 0xcbe <__ftoa_engine+0x9c>
 cb4:	e7 0e       	add	r14, r23
 cb6:	f8 1e       	adc	r15, r24
 cb8:	49 1f       	adc	r20, r25
 cba:	56 1f       	adc	r21, r22
 cbc:	c1 1d       	adc	r28, r1
 cbe:	77 0f       	add	r23, r23
 cc0:	88 1f       	adc	r24, r24
 cc2:	99 1f       	adc	r25, r25
 cc4:	66 1f       	adc	r22, r22
 cc6:	06 94       	lsr	r0
 cc8:	a1 f7       	brne	.-24     	; 0xcb2 <__ftoa_engine+0x90>
 cca:	05 90       	lpm	r0, Z+
 ccc:	07 94       	ror	r0
 cce:	28 f4       	brcc	.+10     	; 0xcda <__ftoa_engine+0xb8>
 cd0:	f8 0e       	add	r15, r24
 cd2:	49 1f       	adc	r20, r25
 cd4:	56 1f       	adc	r21, r22
 cd6:	c7 1f       	adc	r28, r23
 cd8:	d1 1d       	adc	r29, r1
 cda:	88 0f       	add	r24, r24
 cdc:	99 1f       	adc	r25, r25
 cde:	66 1f       	adc	r22, r22
 ce0:	77 1f       	adc	r23, r23
 ce2:	06 94       	lsr	r0
 ce4:	a1 f7       	brne	.-24     	; 0xcce <__ftoa_engine+0xac>
 ce6:	05 90       	lpm	r0, Z+
 ce8:	07 94       	ror	r0
 cea:	20 f4       	brcc	.+8      	; 0xcf4 <__ftoa_engine+0xd2>
 cec:	49 0f       	add	r20, r25
 cee:	56 1f       	adc	r21, r22
 cf0:	c7 1f       	adc	r28, r23
 cf2:	d8 1f       	adc	r29, r24
 cf4:	99 0f       	add	r25, r25
 cf6:	66 1f       	adc	r22, r22
 cf8:	77 1f       	adc	r23, r23
 cfa:	88 1f       	adc	r24, r24
 cfc:	06 94       	lsr	r0
 cfe:	a9 f7       	brne	.-22     	; 0xcea <__ftoa_engine+0xc8>
 d00:	84 91       	lpm	r24, Z
 d02:	10 95       	com	r17
 d04:	17 70       	andi	r17, 0x07	; 7
 d06:	41 f0       	breq	.+16     	; 0xd18 <__ftoa_engine+0xf6>
 d08:	d6 95       	lsr	r29
 d0a:	c7 95       	ror	r28
 d0c:	57 95       	ror	r21
 d0e:	47 95       	ror	r20
 d10:	f7 94       	ror	r15
 d12:	e7 94       	ror	r14
 d14:	1a 95       	dec	r17
 d16:	c1 f7       	brne	.-16     	; 0xd08 <__ftoa_engine+0xe6>
 d18:	ea e7       	ldi	r30, 0x7A	; 122
 d1a:	f0 e0       	ldi	r31, 0x00	; 0
 d1c:	68 94       	set
 d1e:	15 90       	lpm	r1, Z+
 d20:	15 91       	lpm	r17, Z+
 d22:	35 91       	lpm	r19, Z+
 d24:	65 91       	lpm	r22, Z+
 d26:	95 91       	lpm	r25, Z+
 d28:	05 90       	lpm	r0, Z+
 d2a:	7f e2       	ldi	r23, 0x2F	; 47
 d2c:	73 95       	inc	r23
 d2e:	e1 18       	sub	r14, r1
 d30:	f1 0a       	sbc	r15, r17
 d32:	43 0b       	sbc	r20, r19
 d34:	56 0b       	sbc	r21, r22
 d36:	c9 0b       	sbc	r28, r25
 d38:	d0 09       	sbc	r29, r0
 d3a:	c0 f7       	brcc	.-16     	; 0xd2c <__ftoa_engine+0x10a>
 d3c:	e1 0c       	add	r14, r1
 d3e:	f1 1e       	adc	r15, r17
 d40:	43 1f       	adc	r20, r19
 d42:	56 1f       	adc	r21, r22
 d44:	c9 1f       	adc	r28, r25
 d46:	d0 1d       	adc	r29, r0
 d48:	7e f4       	brtc	.+30     	; 0xd68 <__ftoa_engine+0x146>
 d4a:	70 33       	cpi	r23, 0x30	; 48
 d4c:	11 f4       	brne	.+4      	; 0xd52 <__ftoa_engine+0x130>
 d4e:	8a 95       	dec	r24
 d50:	e6 cf       	rjmp	.-52     	; 0xd1e <__ftoa_engine+0xfc>
 d52:	e8 94       	clt
 d54:	01 50       	subi	r16, 0x01	; 1
 d56:	30 f0       	brcs	.+12     	; 0xd64 <__ftoa_engine+0x142>
 d58:	08 0f       	add	r16, r24
 d5a:	0a f4       	brpl	.+2      	; 0xd5e <__ftoa_engine+0x13c>
 d5c:	00 27       	eor	r16, r16
 d5e:	02 17       	cp	r16, r18
 d60:	08 f4       	brcc	.+2      	; 0xd64 <__ftoa_engine+0x142>
 d62:	20 2f       	mov	r18, r16
 d64:	23 95       	inc	r18
 d66:	02 2f       	mov	r16, r18
 d68:	7a 33       	cpi	r23, 0x3A	; 58
 d6a:	28 f0       	brcs	.+10     	; 0xd76 <__ftoa_engine+0x154>
 d6c:	79 e3       	ldi	r23, 0x39	; 57
 d6e:	7d 93       	st	X+, r23
 d70:	2a 95       	dec	r18
 d72:	e9 f7       	brne	.-6      	; 0xd6e <__ftoa_engine+0x14c>
 d74:	10 c0       	rjmp	.+32     	; 0xd96 <__ftoa_engine+0x174>
 d76:	7d 93       	st	X+, r23
 d78:	2a 95       	dec	r18
 d7a:	89 f6       	brne	.-94     	; 0xd1e <__ftoa_engine+0xfc>
 d7c:	06 94       	lsr	r0
 d7e:	97 95       	ror	r25
 d80:	67 95       	ror	r22
 d82:	37 95       	ror	r19
 d84:	17 95       	ror	r17
 d86:	17 94       	ror	r1
 d88:	e1 18       	sub	r14, r1
 d8a:	f1 0a       	sbc	r15, r17
 d8c:	43 0b       	sbc	r20, r19
 d8e:	56 0b       	sbc	r21, r22
 d90:	c9 0b       	sbc	r28, r25
 d92:	d0 09       	sbc	r29, r0
 d94:	98 f0       	brcs	.+38     	; 0xdbc <__ftoa_engine+0x19a>
 d96:	23 95       	inc	r18
 d98:	7e 91       	ld	r23, -X
 d9a:	73 95       	inc	r23
 d9c:	7a 33       	cpi	r23, 0x3A	; 58
 d9e:	08 f0       	brcs	.+2      	; 0xda2 <__ftoa_engine+0x180>
 da0:	70 e3       	ldi	r23, 0x30	; 48
 da2:	7c 93       	st	X, r23
 da4:	20 13       	cpse	r18, r16
 da6:	b8 f7       	brcc	.-18     	; 0xd96 <__ftoa_engine+0x174>
 da8:	7e 91       	ld	r23, -X
 daa:	70 61       	ori	r23, 0x10	; 16
 dac:	7d 93       	st	X+, r23
 dae:	30 f0       	brcs	.+12     	; 0xdbc <__ftoa_engine+0x19a>
 db0:	83 95       	inc	r24
 db2:	71 e3       	ldi	r23, 0x31	; 49
 db4:	7d 93       	st	X+, r23
 db6:	70 e3       	ldi	r23, 0x30	; 48
 db8:	2a 95       	dec	r18
 dba:	e1 f7       	brne	.-8      	; 0xdb4 <__ftoa_engine+0x192>
 dbc:	11 24       	eor	r1, r1
 dbe:	ef 90       	pop	r14
 dc0:	ff 90       	pop	r15
 dc2:	0f 91       	pop	r16
 dc4:	1f 91       	pop	r17
 dc6:	cf 91       	pop	r28
 dc8:	df 91       	pop	r29
 dca:	99 27       	eor	r25, r25
 dcc:	87 fd       	sbrc	r24, 7
 dce:	90 95       	com	r25
 dd0:	08 95       	ret

00000dd2 <strrev>:
 dd2:	dc 01       	movw	r26, r24
 dd4:	fc 01       	movw	r30, r24
 dd6:	67 2f       	mov	r22, r23
 dd8:	71 91       	ld	r23, Z+
 dda:	77 23       	and	r23, r23
 ddc:	e1 f7       	brne	.-8      	; 0xdd6 <strrev+0x4>
 dde:	32 97       	sbiw	r30, 0x02	; 2
 de0:	04 c0       	rjmp	.+8      	; 0xdea <strrev+0x18>
 de2:	7c 91       	ld	r23, X
 de4:	6d 93       	st	X+, r22
 de6:	70 83       	st	Z, r23
 de8:	62 91       	ld	r22, -Z
 dea:	ae 17       	cp	r26, r30
 dec:	bf 07       	cpc	r27, r31
 dee:	c8 f3       	brcs	.-14     	; 0xde2 <strrev+0x10>
 df0:	08 95       	ret

00000df2 <__prologue_saves__>:
 df2:	2f 92       	push	r2
 df4:	3f 92       	push	r3
 df6:	4f 92       	push	r4
 df8:	5f 92       	push	r5
 dfa:	6f 92       	push	r6
 dfc:	7f 92       	push	r7
 dfe:	8f 92       	push	r8
 e00:	9f 92       	push	r9
 e02:	af 92       	push	r10
 e04:	bf 92       	push	r11
 e06:	cf 92       	push	r12
 e08:	df 92       	push	r13
 e0a:	ef 92       	push	r14
 e0c:	ff 92       	push	r15
 e0e:	0f 93       	push	r16
 e10:	1f 93       	push	r17
 e12:	cf 93       	push	r28
 e14:	df 93       	push	r29
 e16:	cd b7       	in	r28, 0x3d	; 61
 e18:	de b7       	in	r29, 0x3e	; 62
 e1a:	ca 1b       	sub	r28, r26
 e1c:	db 0b       	sbc	r29, r27
 e1e:	0f b6       	in	r0, 0x3f	; 63
 e20:	f8 94       	cli
 e22:	de bf       	out	0x3e, r29	; 62
 e24:	0f be       	out	0x3f, r0	; 63
 e26:	cd bf       	out	0x3d, r28	; 61
 e28:	09 94       	ijmp

00000e2a <__epilogue_restores__>:
 e2a:	2a 88       	ldd	r2, Y+18	; 0x12
 e2c:	39 88       	ldd	r3, Y+17	; 0x11
 e2e:	48 88       	ldd	r4, Y+16	; 0x10
 e30:	5f 84       	ldd	r5, Y+15	; 0x0f
 e32:	6e 84       	ldd	r6, Y+14	; 0x0e
 e34:	7d 84       	ldd	r7, Y+13	; 0x0d
 e36:	8c 84       	ldd	r8, Y+12	; 0x0c
 e38:	9b 84       	ldd	r9, Y+11	; 0x0b
 e3a:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3c:	b9 84       	ldd	r11, Y+9	; 0x09
 e3e:	c8 84       	ldd	r12, Y+8	; 0x08
 e40:	df 80       	ldd	r13, Y+7	; 0x07
 e42:	ee 80       	ldd	r14, Y+6	; 0x06
 e44:	fd 80       	ldd	r15, Y+5	; 0x05
 e46:	0c 81       	ldd	r16, Y+4	; 0x04
 e48:	1b 81       	ldd	r17, Y+3	; 0x03
 e4a:	aa 81       	ldd	r26, Y+2	; 0x02
 e4c:	b9 81       	ldd	r27, Y+1	; 0x01
 e4e:	ce 0f       	add	r28, r30
 e50:	d1 1d       	adc	r29, r1
 e52:	0f b6       	in	r0, 0x3f	; 63
 e54:	f8 94       	cli
 e56:	de bf       	out	0x3e, r29	; 62
 e58:	0f be       	out	0x3f, r0	; 63
 e5a:	cd bf       	out	0x3d, r28	; 61
 e5c:	ed 01       	movw	r28, r26
 e5e:	08 95       	ret

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
